{"version":3,"sources":["Components/Home/Home.js","services/RetinaXService.js","services/CellTypeService.js","Components/CellTypeCreatorUI/CreateCellTypeForm.js","Components/NetworkBuilderUI/UberGraphView/components/circle.js","Components/NetworkBuilderUI/UberGraphView/fromUberGit/graph-config.js","Components/NetworkBuilderUI/CellTypePicker/CellTypePicker.js","Components/NetworkBuilderUI/UberGraphView/utilities/layout-engine/layout-engine.js","Components/NetworkBuilderUI/UberGraphView/utilities/layout-engine/none.js","Components/NetworkBuilderUI/UberGraphView/utilities/layout-engine/snap-to-grid.js","Components/NetworkBuilderUI/UberGraphView/utilities/layout-engine/layout-engine-config.js","Components/NetworkBuilderUI/UberGraphView/utilities/layout-engine/vertical-tree.js","Components/NetworkBuilderUI/UberGraphView/components/background.js","Components/NetworkBuilderUI/UberGraphView/components/arrowhead-marker.js","Components/NetworkBuilderUI/UberGraphView/components/background-pattern.js","Components/NetworkBuilderUI/UberGraphView/components/dropshadow-filter.js","Components/NetworkBuilderUI/UberGraphView/components/defs.js","Components/NetworkBuilderUI/UberGraphView/components/graph-util.js","Components/NetworkBuilderUI/UberGraphView/components/edge.js","Components/NetworkBuilderUI/UberGraphView/components/graph-controls.js","Components/NetworkBuilderUI/UberGraphView/components/node-text.js","Components/NetworkBuilderUI/UberGraphView/components/node.js","services/CellInstanceService.js","Components/NetworkBuilderUI/UberGraphView/components/graph-view.js","Components/CreateConnectionUI/ConnectForm.js","Components/NetworkBuilderUI/UberGraphView/fromUberGit/graph.js","Components/SimulationUI/OutputCellsList/OutputCellsList.js","services/SimulateNetworkService.js","Components/SimulationUI/Stepper/VerticalLinearStepper.js","Components/SimulationUI/ResultsTable/ResultsTable.js","Components/SimulationUI/ResultsModal/ResultsModal.js","Components/NetworkBuilderUI/NetworkBuilder.js","Routes/NavRoutes.js","App/App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","className","Jumbotron","Link","to","Button","Component","RetinaXService","Object","classCallCheck","this","baseUrl","headers","Content-Type","Accept","Access-Control-Allow-Origin","Access-Control-Allow-Methods","CellTypeService","createCellTypeRequest","url","fetch","method","body","JSON","stringify","then","response","console","log","json","catch","reason","alert","id","CreateCellTypeForm","_React$Component","props","_this","possibleConstructorReturn","getPrototypeOf","call","state","name","transformType","function","expression","variables","service","toggle","addCellType","inherits","createClass","key","value","event","setState","target","_function","split","transform","_this2","preventDefault","createCellType","toUpperCase","join","createFunctionRequest","cellType","_this3","onSubmit","handleSubmit","bind","CardTitle","CreateCellTypeForm_CreateCellTypeFormTextRow","text","placeholder","onChange","handleNameChange","handleExpressionChange","handleVariablesChange","FormGroup","ButtonGroup","map","transfrom","active","isActiveTransformType","onClick","handleTransformChange","react_katex","math","getExpressionIfDefined","errorColor","renderError","error","type","React","CreateCellTypeFormTextRow","_React$Component2","_this4","Label","Input","Circle","_this$props","gridSpacing","gridDotSize","react","cx","cy","r","defaultProps","NODE_KEY","SPECIAL_TYPE","EMPTY_EDGE_TYPE","SPECIAL_EDGE_TYPE","nodeTypes","edgeTypes","EmptyNodeShape","viewBox","width","height","CustomEmptyShape","SpecialShape","PolyShape","d","SkinnyShape","x","y","rx","ry","SpecialChildShape","fill","graph_config","EdgeTypes","emptyEdge","shape","shapeId","specialEdge","NodeSubtypes","specialChild","NodeTypes","emptyNode","typeText","empty","special","skinny","poly","CellTypePicker","modal","dragged","cellTypes","selectedCellType","setSelectedType","assertThisInitialized","types","push","getCellTypes","onStart","onStop","ListGroup","index","ListGroupItem","isSelected","select","replace","Modal","style","borderRadius","isOpen","CreateCellTypeForm_CreateCellTypeForm","onCreateCellTypeClicked","xmlns","LayoutEngine","graphViewProps","node","nodes","nodesMap","i","length","position","calculatePosition","None","SnapToGrid","gridOffset","newX","newY","multiplier","Math","round","LayoutEngines","VerticalTree","_this$graphViewProps","nodeKey","size","nodeSize","g","dagre","Graph","setGraph","setDefaultEdgeLabel","forEach","nodeId","nodeKeyId","concat","nodesMapNode","incomingEdges","outgoingEdges","setNode","edge","setEdge","gNodeId","gNode","Background","gridSize","backgroundFillId","ArrowheadMarker","edgeArrowSize","refX","markerWidth","markerHeight","orient","BackgroundPattern","patternUnits","circle","DropshadowFilter","in","stdDeviation","dx","dy","result","slope","Defs","graphConfigDefs","nextProps","prevState","processGraphConfigDefs","nodeSubtypes","typesObj","keys","safeId","arrowhead_marker","background_pattern","dropshadow_filter","renderDefs","GraphUtils","arr","item","children","originalArrIndex","parents","source","edges","nodeMapSourceNode","nodeMapTargetNode","container","document","getElementById","parentNode","removeChild","element","selector","matches","findParent","_len","arguments","args","Array","_key","_i","arg","isArray","updateClassNames","trim","Boolean","count","chunksize","callback","finished","chunk","end","min","setTimeout","prevNode","newNode","prevNodeKeys","newNodeKeys","checkedKeys","hasOwnProperty","Edge","getEdgeHandleTranslation","data","sourceNode","targetNode","pathDescription","getPathDescription","pathDescriptionArr","diffX","parseFloat","diffY","getEdgeHandleOffsetTranslation","offset","edgeHandleSize","getEdgeHandleRotation","negate","undefined","rotated","src","trg","theta","getTheta","PI","getEdgeHandleTransformation","translation","_this$getEdgeHandleRo","rotation","slicedToArray","edgeOverlayRef","pt1","pt2","xComp","yComp","atan2","srcTrgDataArray","d3","querySelector","getBoundingClientRect","edgePathElement","getAttribute","dArr","dimension","xOff","yOff","intersect","point","defSvgRotatedRectElement","includesArrow","viewWrapperElem","getDefaultIntersectResponse","arrowSize","getArrowSize","clientRect","widthAttr","heightAttr","w","h","trgX","trgY","srcX","srcY","top","bottom","left","right","line","x1","y1","x2","y2","rect","topLeft","Point2D","bottomRight","center","lerp","rotate","angle","Matrix2D","rotationAt","rotatedPoly","p","pathIntersect","Intersection","intersectLinePolygon","params","points","arrowWidth","arrowHeight","xIntersect","yIntersect","defSvgPathElement","test","val","isEnd","yIntersectDiff","abs","xIntersectDiff","defSvgCircleElement","parentElement","parentWidth","parentHeight","offX","offY","nodeElem","trgNode","getAttributeNS","xlinkHref","defSvgRectElement","objectSpread","getRotatedRectIntersect","getPathIntersect","getCircleIntersect","_this$props2","srcOff","calculateOffset","trgOff","linePoints","lineFunction","textAnchor","alignmentBaseline","handleText","_this$getEdgeHandleRo3","_this$getEdgeHandleRo4","title","label_to","label_from","fontSize","stroke","_this$props3","classNames","selected","data-source","data-target","getXlinkHref","renderHandleText","renderLabelText","ref","GraphControls","zoom","e","minZoom","maxZoom","sliderVal","zoomLevelNext","sliderToZoom","delta","zoomLevel","modifyZoom","zoomToSlider","max","step","onMouseDown","zoomToFit","fa","NodeText","instance","idText","getIdText","inputType","getTypeText","opacity","lineOffset","Node","handleMouseMove","mouseButtonDown","sourceEvent","buttons","shiftKey","layoutEngine","newState","drawingEdge","off","assign","getPositionForNode","onNodeMove","handleDragStart","nodeRef","current","oldSibling","nextSibling","appendChild","handleDragEnd","_this$state","mouseDown","insertBefore","onNodeUpdate","onNodeSelected","handleMouseOver","hovered","onNodeMouseEnter","handleMouseOut","onNodeMouseLeave","dragFunction","on","renderNode","_this$state2","nodeShapeContainerClassName","nodeClassName","nodeSubtypeClassName","nodeTypeXlinkHref","getNodeTypeXlinkHref","nodeSubtypeXlinkHref","getNodeSubtypeXlinkHref","defSvgNodeElement","nodeWidthAttr","nodeHeightAttr","parseInt","subtype","data-index","_this$props4","renderNodeText","node_text","_this$state3","_this$props5","onMouseOver","onMouseOut","renderShape","renderText","CellInstanceService","cellTypeId","sourceCell","destinationCell","delay","variable","inputFunctionVariable","cell","GraphView","removeOldEdges","prevEdges","edgesMap","removeEdgeElement","handleDelete","canDeleteNode","canDeleteEdge","readOnly","deleteNode","deleteEdge","handleWrapperKeydown","onUndo","onCopySelected","onPasteSelected","focused","selectedNodeObj","metaKey","ctrlKey","handleEdgeSelected","_e$target$dataset","dataset","svgClicked","getEdgeBySourceTarget","selectedEdgeObj","componentUpToDate","onSelectEdge","handleSvgClicked","isPartOfEdge","selectingNode","previousSelection","onSelectNode","syncRenderNode","xycoords","onCreateNode","handleDocumentClick","ownerSVGElement","graphSvg","documentClicked","handleNodeMove","canCreateEdge","nodeMapNode","getNodeById","updateCellLocation","draggingEdge","syncRenderEdge","targetPosition","renderConnectedEdgesFromNode","asyncRenderNode","handleNodeUpdate","onUpdateNode","createNewEdge","nodeMap","hoveredNode","handleNodeMouseEnter","hoveredNodeData","edgeEndNode","handleNodeMouseLeave","toElement","relatedTarget","classList","contains","handleNodeSelected","creatingEdge","handleZoomStart","edgeId","isArrowClicked","draggedEdge","dragEdge","handleZoom","view","attr","viewTransform","renderGraphControls","handleZoomEnd","draggedEdgeCopy","removeElementFromDom","sourceNodeById","targetNodeById","canSwap","onSwapEdge","handleZoomToFit","parent","viewWrapper","entities","viewBBox","getBBox","clientWidth","clientHeight","next","k","setZoom","zoomDur","modK","modX","modY","dur","extent","scaleExtent","targetZoom","translate0","l","renderBackground","background","getNodeComponent","_this$props6","components_node","renderNodes","isEdgeSelected","getEdgeComponent","sourceNodeMapNode","targetNodeMapNode","_this$props7","components_edge","renderEdge","nodeMoving","containerId","customContainerId","afterRenderEdge","edgeContainer","display","customContainer","remove","newSvgEdgeContainer","createElementNS","ReactDOM","render","asyncRenderEdge","timeoutId","cancelAnimationFrame","edgeTimeouts","requestAnimationFrame","renderEdges","_this$state4","nodeTimeouts","renderNodesTimeout","renderEdgesTimeout","graphControls","layoutEngineType","getNodesMap","getEdgesMap","linkNodesAndEdges","selectedNodeMap","selectedEdgeMap","adjustNodes","selectionChanged","addEventListener","filter","zoomFilter","containZoom","selectedView","renderView","zoomDelay","removeEventListener","nextState","prevProps","_this$state5","newNodes","forceReRender","removeOldNodes","addNewNodes","addNewEdges","nodesMapVar","oldNodesMap","selectedNode","prevSelectedNode","forceRender","yieldingLoop","prevNodes","prevNodesMap","_loop","prevNodeMapNode","oldEdgesMap","selectedEdge","prevSelectedEdge","prevEdge","swapEdge","newNodesArr","onDeleteNode","newEdgesArr","deleteEdgeBySourceTarget","onDeleteEdge","_this5","_this$props8","onCreateEdge","_this$state6","mapId1","mapId2","areCompatible","_this$props9","eventTarget","tagName","edgeCoords","parsePathToXY","getEdgePathElement","button","stopImmediatePropagation","mouseCoordinates","_this$props10","getMouseCoordinates","t","translate","scale","transition","duration","clearTimeout","nodeContainer","anyElement","_this6","_this7","idVar","showGraphControls","graphControlsWrapper","graph_controls","_this8","_this$props11","defs","el","startNode","endNode","maxTitleChars","ConnectForm","dropdownOpen","dropToggle","srcCell","destCell","onConnectCells","connectCells","variableName","ModalHeader","ModalBody","Form","row","for","sm","Col","pattern","Dropdown","DropdownToggle","caret","DropdownMenu","DropdownItem","header","ModalFooter","color","submit","disabled","sample","makeItLarge","graph","generatedSample","totalNodes","numNodes","floor","random","generateSample","addStartNode","Date","now","toConsumableArray","deleteStartNode","splice","handleChange","viewNode","getNodeIndex","simulationMode","simulationStep","SELECTING_OUTPUT_CELLS","onOutputCellSelected","viewEdge","selectedType","addCellInstance","onAddCellOrConnectCells","nodeArr","newEdges","deleteCellInstance","sourceViewNode","targetViewNode","getEdgeIndex","parse","deleteConnection","warn","copiedNode","forceUpdate","handleChangeLayoutEngineType","connectModal","simulationOutputCells","updatedInputCells","refresh","UPLOADING_INPUT_FILE","getCellInstances","cellInstances","xCoordinate","yCoordinate","getConnections","connections","connection","fromCell","toCell","searchNode","findIndex","searchEdge","connectionVariable","_this$state$graph","GraphConfig","graph_view","ConnectForm_ConnectForm","OutputCellsList","outputCells","flush","outputCell","Close","ListGroupItemHeading","SimulateNetworkService","userInput","maxTime","VerticalLinearStepper","csvHeaders","getInputCells","inputCells","inputCell","array","col","file","fileReader","FileReader","onloadend","content","Papa","errors","err","message","inputData","transpose","readAsText","Typography_default","OutputCellsList_OutputCellsList_OutputCellsList","react_csv","filename","accept","handleFileUpload","files","getSelectingOutputCellsView","getUploadingInputFileView","SHOWING_RESULTS","getShowingResultsView","outputInstances","slice","simulateNetwork","results","onResultsArrived","classes","activeStep","handleBack","handleNext","handleReset","steps","root","Stepper_default","orientation","label","Step_default","StepLabel_default","StepContent_default","getStepContent","actionsContainer","Button_default","variant","Paper_default","square","elevation","resetContainer","withStyles","theme","marginTop","spacing","unit","marginRight","marginBottom","padding","ResultsTable","outputResults","ids","dataIndex","fixed","toString","tableContent","timePoint","table","columns","dataSource","bordered","useFixedHeader","pagination","pageSize","scroll","ResultsModal","ResultsTable_ResultsTable","NONE","NetworkBuilder","selectedOutputCells","showResults","networkIsValid","simulateService","viewCellType","cellsResults","refreshNetworkValidation","isNetworkStructureValid","topView","buttonText","sideComponent","SimulationUI_Stepper_VerticalLinearStepper","CellTypePicker_CellTypePicker_CellTypePicker","setSelectedCellType","hidden","onSimulateNetworkClicked","fillRule","Alert","graph_Graph","ResultsModal_ResultsModal_ResultsModal","toggleShowResults","NavRoutes","Switch","Route","exact","path","component","App","HashRouter","basename","Navbar","expand","NavbarBrand","href","Nav","navbar","window","location","hostname","match","src_App_App"],"mappings":"ohBA4BeA,2LArBP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAWD,UAAW,SAClBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACVH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,QAAMC,UAAW,KAAjB,MAEJH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,kDACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SACdH,EAAAC,EAAAC,cAAA,uCACAF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QACTH,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAI,mBACNN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQJ,UAAW,yBAAnB,+BAdTK,0JCJEC,EAEjB,SAAAA,IAAcC,OAAAC,EAAA,EAAAD,CAAAE,KAAAH,GAGVG,KAAKC,QAAU,wBAIfD,KAAKE,QAAU,CACXC,eAAgB,mBAChBC,OAAU,mBACVC,8BAA+B,IAC/BC,+BAAgC,2BCXvBC,yLAEFC,GACX,IAAIC,EAAMT,KAAKC,QAAU,yBAEzB,OAAOS,IAAMD,EAAI,CACbE,OAAQ,OACRC,KAAMC,KAAKC,UAAUN,GACrBN,QAASF,KAAKE,UACfa,KAAK,SAAAC,GAEJ,OADAC,QAAQC,IAAIF,GACLA,EAASG,SACjBJ,KAAK,SAAAH,GAGJ,OAFAK,QAAQC,IAAIN,GAELA,IACRQ,MAAO,SAAAC,GAAM,OAAIC,MAAMD,4CAI1B,IAAIZ,EAAMT,KAAKC,QAAU,mBAEzB,OAAOS,IAAMD,EAAI,CACbE,OAAQ,MACRT,QAASF,KAAKE,UACfa,KAAK,SAAAC,GAEJ,OAAOA,EAASG,SACjBJ,KAAK,SAAAH,GAGJ,OAAOA,IACRQ,MAAO,SAAAC,GAAM,OAAIC,MAAMD,4CAGfE,GACX,IAAId,EAAMT,KAAKC,QAAU,oBAAoBsB,EAE7C,OAAOb,IAAMD,EAAI,CACbE,OAAQ,SACRT,QAASF,KAAKE,UACfkB,MAAO,SAAAC,GAAM,OAAIC,MAAMD,YAzCWxB,GCOhC2B,EAAb,SAAAC,GACI,SAAAD,EAAYE,GAAO,IAAAC,EAAA,OAAA7B,OAAAC,EAAA,EAAAD,CAAAE,KAAAwB,IACfG,EAAA7B,OAAA8B,EAAA,EAAA9B,CAAAE,KAAAF,OAAA+B,EAAA,EAAA/B,CAAA0B,GAAAM,KAAA9B,KAAM0B,KAEDK,MAAQ,CACTC,KAAM,GACNC,cAAe,GACfC,SAAS,CACLC,WAAY,GACZC,UAAU,KAGlBT,EAAKD,MAAQA,EACbC,EAAKU,QAAU,IAAI9B,EACnBoB,EAAKW,OAASZ,EAAMY,OACpBX,EAAKY,YAAcb,EAAMa,YAdVZ,EADvB,OAAA7B,OAAA0C,EAAA,EAAA1C,CAAA0B,EAAAC,GAAA3B,OAAA2C,EAAA,EAAA3C,CAAA0B,EAAA,EAAAkB,IAAA,mBAAAC,MAAA,SAkBqBC,GACb5C,KAAK6C,SAAS,CAACb,KAAMY,EAAME,OAAOH,UAnB1C,CAAAD,IAAA,yBAAAC,MAAA,SAuB2BC,GAEnB,IAAIG,EAAY/C,KAAK+B,MAAMG,SAC3Ba,EAAUZ,WAAaS,EAAME,OAAOH,MAEpC3C,KAAK6C,SAAS,CAACX,SAAUa,MA5BjC,CAAAL,IAAA,wBAAAC,MAAA,SA+B0BC,GAElB,IAAIG,EAAY/C,KAAK+B,MAAMG,SAC3Ba,EAAUX,UAAYQ,EAAME,OAAOH,MAAMK,MAAM,KAE/ChD,KAAK6C,SAAS,CAACX,SAAUa,MApCjC,CAAAL,IAAA,wBAAAC,MAAA,SAuC0BM,GAClBjD,KAAK6C,SAAS,CAACZ,cAAegB,MAxCtC,CAAAP,IAAA,eAAAC,MAAA,SA2CiBC,GAAO,IAAAM,EAAAlD,KAYhB,OAXA4C,EAAMO,iBAENnD,KAAKqC,QAAQe,eAAe,CACxBpB,KAAMhC,KAAK+B,MAAMC,KACjBC,cAAejC,KAAK+B,MAAME,cAAcoB,cAAcL,MAAM,KAAKM,KAAK,KACtEC,sBAAuBvD,KAAK+B,MAAMG,WACnCnB,KAAK,SAACyC,GACLN,EAAKX,YAAYiB,GACjBN,EAAKZ,WAGFM,IAvDf,CAAAF,IAAA,yBAAAC,MAAA,WA2DQ,OAAG3C,KAAK+B,MAAMG,SAASC,WACZnC,KAAK+B,MAAMG,SAASC,WAExB,MA9Df,CAAAO,IAAA,wBAAAC,MAAA,SAkE0BV,GAClB,OAAOA,GAAiBjC,KAAK+B,MAAME,gBAnE3C,CAAAS,IAAA,SAAAC,MAAA,WAsEY,IAAAc,EAAAzD,KAIJ,OADAiB,QAAQC,IAAIlB,KAAK0B,OAEbtC,EAAAC,EAAAC,cAAA,OAAKiC,GAAG,kBACJnC,EAAAC,EAAAC,cAAA,QAAMoE,SAAU1D,KAAK2D,aAAaC,KAAK5D,OACnCZ,EAAAC,EAAAC,cAACuE,EAAA,EAAD,CAAWtE,UAAW,SAAtB,0BACAH,EAAAC,EAAAC,cAACwE,EAAD,CAA2BC,KAAK,QAAQpB,MAAO3C,KAAK+B,MAAMC,KAAOgC,YAAY,aAAaC,SAAUjE,KAAKkE,iBAAiBN,KAAK5D,QAE/HZ,EAAAC,EAAAC,cAACwE,EAAD,CAA2BC,KAAK,uBAAwBpB,MAAO3C,KAAK+B,MAAMG,SAASC,WAAa6B,YAAY,YAAYC,SAAUjE,KAAKmE,uBAAuBP,KAAK5D,QAEnKZ,EAAAC,EAAAC,cAACwE,EAAD,CAA2BC,KAAK,aAAapB,MAAO3C,KAAK+B,MAAMG,SAASE,UAAW4B,YAAY,UAAUC,SAAUjE,KAAKoE,sBAAsBR,KAAK5D,QAGnJZ,EAAAC,EAAAC,cAAC+E,EAAA,EAAD,KACAjF,EAAAC,EAAAC,cAAA,SAAOiC,GAAI,qBAAsBhC,UAAU,2BAA3C,mBAEAH,EAAAC,EAAAC,cAACgF,EAAA,EAAD,KAjBK,CAAC,mBAAoB,oBAAqB,oBAAqB,sBAkBpDC,IAAI,SAACC,GAAD,OACZpF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQ8E,OAAQhB,EAAKiB,sBAAsBF,GAAYG,QAAS,SAAC/B,GAAD,OAAWa,EAAKmB,sBAAsBJ,KACjGA,OAKbpF,EAAAC,EAAAC,cAAA,OAAKiC,GAAK,YAAahC,UAAU,kBAC7BH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,aACZH,EAAAC,EAAAC,cAACuF,EAAA,UAAD,CACIC,KAAM9E,KAAK+E,yBACXC,WAAY,UACZC,YAAa,SAACC,GACd,OAAO9F,EAAAC,EAAAC,cAAA,oCAKnBF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,0CAA0C4F,KAAK,UAAjE,0BA3GpB3D,EAAA,CAAwC4D,IAAMxF,WAqHjCyF,EAAb,SAAAC,GACI,SAAAD,EAAY3D,GAAO,IAAA6D,EAAA,OAAAzF,OAAAC,EAAA,EAAAD,CAAAE,KAAAqF,IACfE,EAAAzF,OAAA8B,EAAA,EAAA9B,CAAAE,KAAAF,OAAA+B,EAAA,EAAA/B,CAAAuF,GAAAvD,KAAA9B,KAAM0B,KACDK,MAAQ,CACTgC,KAAMrC,EAAMqC,KACZC,YAAatC,EAAMsC,YACnBC,SAAUvC,EAAMuC,SAChBtB,MAAOjB,EAAMiB,OANF4C,EADvB,OAAAzF,OAAA0C,EAAA,EAAA1C,CAAAuF,EAAAC,GAAAxF,OAAA2C,EAAA,EAAA3C,CAAAuF,EAAA,EAAA3C,IAAA,SAAAC,MAAA,WAYM,OACIvD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC+E,EAAA,EAAD,KACEjF,EAAAC,EAAAC,cAACkG,EAAA,EAAD,CAAOjG,UAAW,kBAAlB,IAAsCS,KAAK+B,MAAMgC,KAAjD,KACA3E,EAAAC,EAAAC,cAACmG,EAAA,EAAD,CAAOlG,UAAW,YAAayE,YAAahE,KAAK+B,MAAMiC,YAAamB,KAAK,OAAOlB,SAAUjE,KAAK+B,MAAMkC,iBAhBrHoB,EAAA,CAA+CD,IAAMxF,WCvG/C8F,2LAMK,IAAAC,EAC8B3F,KAAK0B,MAAlCkE,EADDD,EACCC,YAAaC,EADdF,EACcE,YAErB,OAAOC,EAAA,wBAAQvG,UAAU,SAASwG,IAAKH,GAAe,GAAK,EAAGI,IAAKJ,GAAe,GAAK,EAAGK,EAAGJ,WAT5ET,cAAfM,EACGQ,aAAe,CACpBL,YAAa,EACbD,YAAa,IAUFF,QCfFS,EAAW,KAOXC,EAAe,UAGfC,EAAkB,YAClBC,EAAoB,cAEpBC,EAAY,CARC,cACD,OAOwBH,EALtB,UAMdI,EAAY,CAACH,EAAiBC,GAG9BG,EACXX,EAAA,wBAAQY,QAAQ,cAAcC,MAAM,MAAMC,OAAO,MAAMrF,GAAG,aACxDuE,EAAA,wBAAQC,GAAG,KAAKC,GAAG,KAAKC,EAAE,QAIjBY,EACXf,EAAA,wBAAQY,QAAQ,cAAcnF,GAAG,eAC/BuE,EAAA,wBAAQC,GAAG,KAAKC,GAAG,KAAKC,EAAE,QAIjBa,EACXhB,EAAA,wBAAQY,QAAQ,gBAAgBnF,GAAG,UAAUoF,MAAM,MAAMC,OAAO,OAC9Dd,EAAA,sBAAM7C,UAAU,2BAA2B0D,MAAM,MAAMC,OAAO,SAIrDG,EACXjB,EAAA,wBAAQY,QAAQ,YAAYnF,GAAG,OAAOoF,MAAM,KAAKC,OAAO,MACtDd,EAAA,sBAAMkB,EAAE,yCAICC,EACXnB,EAAA,wBAAQY,QAAQ,aAAaC,MAAM,MAAMC,OAAO,KAAKrF,GAAG,UACtDuE,EAAA,sBAAMoB,EAAE,IAAIC,EAAE,IAAIC,GAAG,IAAIC,GAAG,IAAIV,MAAM,MAAMC,OAAO,QAI1CU,EACXxB,EAAA,wBAAQY,QAAQ,cAAcnF,GAAG,gBAC/BuE,EAAA,sBAAMoB,EAAE,MAAMC,EAAE,IAAIR,MAAM,MAAMC,OAAO,MAAMW,KAAK,8BAgBvCC,EAAA,CACbC,UAAW,CACTC,UAAW,CACTC,MAdJ7B,EAAA,wBAAQY,QAAQ,YAAYnF,GAAG,aAC7BuE,EAAA,wBAAQC,GAAG,KAAKC,GAAG,KAAKC,EAAE,IAAIsB,KAAK,kBAcjCK,QAAS,cAEXC,YAAa,CACXF,MAZJ7B,EAAA,wBAAQY,QAAQ,YAAYnF,GAAG,eAC7BuE,EAAA,sBAAM7C,UAAU,aAAaiE,EAAE,OAAOC,EAAE,OAAOR,MAAM,KAAKC,OAAO,KAAKW,KAAK,kBAYzEK,QAAS,iBAGbE,aAAc,CACZC,aAAc,CACZJ,MAAOL,EACPM,QAAS,kBAGbI,UAAW,CACTC,UAAW,CACTN,MAAOlB,EACPmB,QAAS,aACTM,SAAU,QAEZC,MAAO,CACLR,MAAOd,EACPe,QAAS,SACTM,SAAU,QAEZE,QAAS,CACPT,MAAOb,EACPc,QAAS,WACTM,SAAU,WAEZG,OAAQ,CACNV,MAAOV,EACPW,QAAS,UACTM,SAAU,UAEZI,KAAM,CACJX,MAAOZ,EACPa,QAAS,QACTM,SAAU,mBClHKK,cAEjB,SAAAA,EAAY7G,GAAM,IAAAC,EAAA,OAAA7B,OAAAC,EAAA,EAAAD,CAAAE,KAAAuI,IACd5G,EAAA7B,OAAA8B,EAAA,EAAA9B,CAAAE,KAAAF,OAAA+B,EAAA,EAAA/B,CAAAyI,GAAAzG,KAAA9B,KAAM0B,KACDK,MAAQ,CACTyG,OAAO,EACPC,QAAQ,EACRC,UAAW,GACXC,iBAAkB,GAClBC,gBAAkBlH,EAAMkH,iBAE5BjH,EAAKU,QAAU,IAAI9B,EACnBoB,EAAKW,OAASX,EAAKW,OAAOsB,KAAZ9D,OAAA+I,EAAA,EAAA/I,QAAA+I,EAAA,EAAA/I,CAAA6B,KAVAA,uFAaMiB,GACpB5C,KAAKsC,6CAGGkB,GACR,IAAIsF,EAAQ9I,KAAK+B,MAAM2G,UACvBI,EAAMC,KAAKvF,GAEXxD,KAAK6C,SAAS,CACV6F,UAAWI,qCAKf9I,KAAK6C,SAAS,CACV2F,OAAQxI,KAAK+B,MAAMyG,0CAKvBxI,KAAK6C,SAAS,CAAC4F,QAAQ,qCAIvBzI,KAAK6C,SAAS,CAAC4F,QAAQ,mCAGpBtD,GACHnF,KAAK6C,SAAS,CAAC8F,iBAAiBxD,IAChCnF,KAAK+B,MAAM6G,gBAAgBzD,sCAGpBA,GACP,OAAOnF,KAAK+B,MAAM4G,iBAAiBpH,KAAO4D,EAAK5D,gDAE/B,IAAA2B,EAAAlD,KAChBA,KAAKqC,QAAQ2G,eAAejI,KAAK,SAAA+H,GAC7B5F,EAAKL,SAAS,CAAC6F,UAAWI,uCAI1B,IAAArF,EAAAzD,KAEA8I,GAD2B9I,KAAKiJ,QAAQrF,KAAK5D,MAAeA,KAAKkJ,OAAOtF,KAAK5D,MACrEA,KAAK+B,MAAM2G,WAEvB,OACItJ,EAAAC,EAAAC,cAAA,OAAKC,UAAW,kBAEZH,EAAAC,EAAAC,cAAA,MAAIC,UAAW,eAAf,cAEAH,EAAAC,EAAAC,cAAC6J,EAAA,EAAD,CAAW5J,UAAW,oCACjBuJ,EAAMvE,IAAI,SAACY,EAAMiE,GACV,IAAI7H,EAAK,WAAW6H,EACpB,OAAQhK,EAAAC,EAAAC,cAAC+J,EAAA,EAAD,CAAe3G,IAAK0G,EAAO3E,OAAQhB,EAAK6F,WAAWnE,GAAOR,QAAS,kBAAMlB,EAAK8F,OAAOpE,KAErF/F,EAAAC,EAAAC,cAAA,OAAKC,UAAW,WAAYgC,GAAIA,EAAImB,IAAK0G,GACrChK,EAAAC,EAAAC,cAAA,UAAK6F,EAAKnD,MACV5C,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,aAAQ6F,EAAKjD,SAASC,YACtB/C,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,aAAQ6F,EAAKlD,cAAcuH,QAAQ,OAAO,kBAQlEpK,EAAAC,EAAAC,cAACmK,EAAA,EAAD,CAAOC,MAAO,CAACC,aAAa,QAASC,OAAQ5J,KAAK+B,MAAMyG,MAAOlG,OAAQtC,KAAKsC,OAAQ/C,UAAWS,KAAK0B,MAAMnC,WACtGH,EAAAC,EAAAC,cAACuK,EAAD,CAAoBvH,OAAUtC,KAAKsC,OAAQC,YAAavC,KAAKuC,YAAYqB,KAAK5D,SAElFZ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQJ,UAAW,oBAAqBoF,QAAS3E,KAAK8J,wBAAwBlG,KAAK5D,OAC/EZ,EAAAC,EAAAC,cAAA,OAAKqH,MAAM,KAAKC,OAAO,KAAKmD,MAAM,8BAC9B3K,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAAUyH,EAAE,kCAAkCO,KAAK,aAF3E,uCAvF4B3H,sCCavBoK,sBAEnB,SAAAA,EAAYC,GAAkCnK,OAAAC,EAAA,EAAAD,CAAAE,KAAAgK,GAC5ChK,KAAKiK,eAAiBA,gEAGNC,GAChB,OAAOA,sCAGGC,EAAgBC,GAM1B,IALA,IAAIF,EAAO,KAKFG,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAAI,CACpCH,EAAOC,EAAME,GACb,IAAME,EAAWvK,KAAKwK,kBAAkB,CACtCtD,EAAGgD,EAAKhD,GAAK,EACbC,EAAG+C,EAAK/C,GAAK,IAEf+C,EAAKhD,EAAIqD,EAASrD,EAClBgD,EAAK/C,EAAIoD,EAASpD,EAEpB,OAAOgD,6CAGUD,GACjB,OAAOlK,KAAKwK,kBAAkBN,aC/BnBO,6LALKP,GAChB,OAAOA,SAFQF,ICmCJU,6LAlCKR,GAAiB,IACzBhD,EAASgD,EAAThD,EAAGC,EAAM+C,EAAN/C,EACLvB,EAAgB5F,KAAKiK,eAArBrE,YAEA+E,GADN/E,EAAcA,GAAe,IACI,EAE7BgF,EAAO1D,GAAK,EACZ2D,EAAO1D,GAAK,EAChB,GAAID,IAAMA,EAAIyD,GAAc/E,IAAgB,EAAG,CAG7C,IAAIkF,EAAa,GACZ5D,EAAIyD,GAAc/E,EAAc+E,IACnCG,GAAc,GAEhBF,EAAQhF,EAAcmF,KAAKC,MAAM9D,EAAItB,GAAiB+E,EAAaG,EAGrE,GAAI3D,IAAMA,EAAIwD,GAAc/E,IAAgB,EAAG,CAG7C,IAAIkF,EAAa,GACZ3D,EAAIwD,GAAc/E,EAAc+E,IACnCG,GAAc,GAEhBD,EAAQjF,EAAcmF,KAAKC,MAAM7D,EAAIvB,GAAiB+E,EAAaG,EAErE,MAAO,CACL5D,EAAG0D,EACHzD,EAAG0D,UA9BgBb,cCKZiB,GAAgB,CAC3BR,QACAC,cACAQ,iMCLYf,EAAgBC,GAAyB,IAAAe,EACrBnL,KAAKiK,eAA3BmB,EAD2CD,EAC3CC,QACFC,EAAyB,KAFoBF,EAClCG,UACS,GACpBC,EAAI,IAAIC,YAAeC,MAiC7B,OAhCAF,EAAEG,SAAS,IACXH,EAAEI,oBAAoB,iBAAO,KAE7BxB,EAAMyB,QAAQ,SAAC1B,GACb,GAAKE,EAAL,CAGA,IAAMyB,EAAS3B,EAAKkB,GACdU,EAAS,OAAAC,OAAUF,GACnBG,EAAe5B,EAAS0B,GAGY,IAAtCE,EAAaC,cAAc3B,QAAsD,IAAtC0B,EAAaE,cAAc5B,SAG1EiB,EAAEY,QAAQL,EAAW,CAAEnF,MAAO0E,EAAMzE,OAAQyE,IAC5CW,EAAaE,cAAcN,QAAQ,SAACQ,GAClCb,EAAEc,QAAQP,EAAV,OAAAC,OAA8BK,EAAKtJ,eAIvC0I,UAAaD,GAEbA,EAAEpB,QAAQyB,QAAQ,SAACU,GACjB,IAAMN,EAAe5B,EAASkC,GAGxBC,EAAQhB,EAAErB,KAAKoC,GAErBN,EAAa9B,KAAKhD,EAAIqF,EAAMrF,EAC5B8E,EAAa9B,KAAK/C,EAAIoF,EAAMpF,IAEvBgD,SArCgBO,KCGrB8B,oLAMK,IAAA7G,EACgC3F,KAAK0B,MAApC+K,EADD9G,EACC8G,SAAUC,EADX/G,EACW+G,iBAClB,OACE5G,EAAA,sBACEvG,UAAU,aACV2H,IAAKuF,GAAY,GAAK,EACtBtF,IAAKsF,GAAY,GAAK,EACtB9F,MAAO8F,EACP7F,OAAQ6F,EACRlF,KAAI,OAAAwE,OAASW,GAAoB,GAA7B,cAfatH,aAAnBoH,GACGtG,aAAe,CACpBwG,iBAAkB,QAClBD,SAAU,OAkBCD,UCtBTG,oLAKK,IACCC,EAAkB5M,KAAK0B,MAAvBkL,cACR,OAAKA,GAAmC,IAAlBA,EAKpB9G,EAAA,wBACEvE,GAAG,YACHmB,IAAI,YACJgE,QAAO,MAAAqF,OAAQa,EAAgB,EAAxB,KAAAb,OAA6Ba,EAA7B,KAAAb,OAA8Ca,GACrDC,KAAI,GAAAd,OAAKa,EAAgB,GACzBE,YAAW,GAAAf,OAAKa,GAChBG,aAAY,GAAAhB,OAAKa,GACjBI,OAAO,QAEPlH,EAAA,sBACEvG,UAAU,QACVyH,EAAC,OAAA+E,OAAUa,EAAiB,EAA3B,KAAAb,OAAgCa,EAAhC,SAAAb,OAAsDa,EAAiB,MAfrE,YARiBxH,aAAxBuH,GACGzG,aAAe,CACpB0G,cAAe,GA4BJD,UChBAM,oLAXJ,IAAAtH,EAC8B3F,KAAK0B,MAAlCkE,EADDD,EACCC,YAAaC,EADdF,EACcE,YAErB,OACEC,EAAA,yBAASvE,GAAG,OAAOmB,IAAI,OAAOiE,MAAOf,EAAagB,OAAQhB,EAAasH,aAAa,kBAClFpH,EAAA,cAACqH,EAAD,CAAQvH,YAAaA,EAAaC,YAAaA,YANvBT,aCYjBgI,oLAhBX,OACEtH,EAAA,wBAAQvE,GAAG,aAAamB,IAAI,aAAakE,OAAO,QAC9Cd,EAAA,gCAAgBuH,GAAG,cAAcC,aAAa,MAC9CxH,EAAA,0BAAUyH,GAAG,IAAIC,GAAG,IAAIC,OAAO,eAC/B3H,EAAA,yCACEA,EAAA,yBAASX,KAAK,SAASuI,MAAM,SAE/B5H,EAAA,6BACEA,EAAA,kCACAA,EAAA,6BAAauH,GAAG,2BAXKjI,aCiBzBuI,eAwBJ,SAAAA,EAAYjM,GAAmB,IAAAC,EAAA,OAAA7B,OAAAC,EAAA,EAAAD,CAAAE,KAAA2N,IAC7BhM,EAAA7B,OAAA8B,EAAA,EAAA9B,CAAAE,KAAAF,OAAA+B,EAAA,EAAA/B,CAAA6N,GAAA7L,KAAA9B,KAAM0B,KACDK,MAAQ,CACX6L,gBAAiB,IAHUjM,6FAlBCkM,EAAgBC,GAC9C,IAAMF,EAAkB,GAKxB,OAJAD,EAAKI,uBAAuBF,EAAUtH,UAAWqH,GACjDD,EAAKI,uBAAuBF,EAAUG,aAAcJ,GACpDD,EAAKI,uBAAuBF,EAAUrH,UAAWoH,GAE1C,CACLA,kEAI0BK,EAAeL,GAC3C9N,OAAOoO,KAAKD,GAAUrC,QAAQ,SAACzG,GAC7B,IAAMgJ,EAASF,EAAS9I,GAAMyC,QAAUqG,EAAS9I,GAAMyC,QAAQ4B,QAAQ,IAAK,IAAM,WAClFoE,EAAgB7E,KAAK3D,eAAmB6I,EAAS9I,GAAMwC,MAAO,CAAEjF,IAAG,GAAAqJ,OAAKoC,EAAL,KAAApC,OAAe6B,EAAgBtD,OAAS,0DAWtG,IAAA3E,EAC6C3F,KAAK0B,MAAjDkL,EADDjH,EACCiH,cAAehH,EADhBD,EACgBC,YAAaC,EAD7BF,EAC6BE,YACpC,OACEC,EAAA,0BACG9F,KAAK+B,MAAM6L,gBAEZ9H,EAAA,cAACsI,GAAD,CAAiBxB,cAAeA,IAEhC9G,EAAA,cAACuI,GAAD,CAAmBzI,YAAaA,EAAaC,YAAaA,IAE1DC,EAAA,cAACwI,GAAD,MAECtO,KAAK0B,MAAM6M,YAAcvO,KAAK0B,MAAM6M,qBA3C1BnJ,aAAbuI,GACGzH,aAAe,CACpBL,YAAa,EACb0I,WAAY,kBAAM,OA8CPZ,yDCkFAa,4GAzIMC,EAAc/L,GAG/B,IAFA,IAAM6B,EAAM,GACRmK,EAAO,KACFrE,EAAI,EAAGA,EAAIoE,EAAInE,OAAQD,IAC9BqE,EAAOD,EAAIpE,GACX9F,EAAG,OAAAwH,OAAQ2C,EAAKhM,KAAU,CACxBiM,SAAU,GACV1C,cAAe,GACf/B,KAAMwE,EACNE,iBAAkBvE,EAClB6B,cAAe,GACf2C,QAAS,IAGb,OAAOtK,sCAGUkK,GAGjB,IAFA,IAAMlK,EAAM,GACRmK,EAAO,KACFrE,EAAI,EAAGA,EAAIoE,EAAInE,OAAQD,KAC9BqE,EAAOD,EAAIpE,IACDvH,SAGVyB,EAAG,GAAAwH,OAAI2C,EAAKI,QAAU,GAAnB,KAAA/C,OAAyB2C,EAAK5L,SAAY,CAC3CsJ,KAAMsC,EACNE,iBAAkBvE,IAGtB,OAAO9F,4CAGgB6F,EAAe2E,GAItC,IAHA,IAAIC,EAAoB,KACpBC,EAAoB,KACpB7C,EAAO,KACF/B,EAAI,EAAGA,EAAI0E,EAAMzE,OAAQD,KAChC+B,EAAO2C,EAAM1E,IACHvH,SAGVkM,EAAoB5E,EAAQ,OAAA2B,OAAQK,EAAK0C,QAAU,KACnDG,EAAoB7E,EAAQ,OAAA2B,OAAQK,EAAKtJ,SAErCkM,GAAqBC,IACvBD,EAAkB9C,cAAcnD,KAAKqD,GACrC6C,EAAkBhD,cAAclD,KAAKqD,GACrC4C,EAAkBL,SAAS5F,KAAKkG,GAChCA,EAAkBJ,QAAQ9F,KAAKiG,kDAKTzN,GAC1B,IAAM2N,EAAYC,SAASC,eAAe7N,GAC1C,SAAI2N,IAAaA,EAAUG,cACzBH,EAAUG,WAAWC,YAAYJ,IAC1B,sCAKOK,EAAcC,GAE9B,OAAID,GAAsB,MAAXA,GAAmBA,EAAQE,SAA8B,MAAnBF,EAAQE,SAAmBF,EAAQE,QAAQD,GACvFD,EACEA,GAAsB,MAAXA,GAAyC,MAAtBA,EAAQF,YAAsBE,EAAQF,WACtEb,EAAWkB,WAAWH,EAAQF,WAAYG,GAG5C,0CAGyB,IAChC,IAAIjQ,EAAY,GADgBoQ,EAAAC,UAAAtF,OAAbuF,EAAa,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAbF,EAAaE,GAAAH,UAAAG,GAEhC,QAAAC,EAAA,EAAAA,EAAkBH,EAAlBvF,OAAA0F,IAAwB,CAAnB,IAAMC,EAAOJ,EAAJG,GACO,kBAARC,GAAmC,kBAARA,EACpC1Q,GAAS,IAAAwM,OAAQkE,GACO,kBAARA,GAAqBH,MAAMI,QAAQD,IAAgB,OAARA,EAElDH,MAAMI,QAAQD,KACvB1Q,GAAS,IAAAwM,OAAQkE,EAAI3M,KAAK,OAFxB/D,EAAYS,KAAKmQ,iBAAiBF,EAAK1Q,GAM7C,OAAOA,EAAU6Q,gDAGKH,EAAK1Q,GAMzB,OALAO,OAAOoO,KAAK+B,GAAKrE,QAAQ,SAAClJ,GAClB2N,QAAQJ,EAAIvN,MACZnD,GAAS,IAAAwM,OAAQrJ,MAGlBnD,uCAGS+Q,EAAOC,EAAWC,EAAUC,GAC9C,IAAIpG,EAAI,GACR,SAAUqG,IAEN,IADA,IAAIC,EAAM5F,KAAK6F,IAAIvG,EAAIkG,EAAWD,GAC3BjG,EAAIsG,IAAOtG,EAChBmG,EAAS1O,KAAK,KAAMuI,GAElBA,EAAIiG,EACNO,WAAWH,EAAO,GAElBD,GAAYA,EAAS3O,KAAK,MARhC,iDAa2BgP,EAAUC,GAIrC,IAHA,IAAMC,EAAelR,OAAOoO,KAAK4C,GAC3BG,EAAcnR,OAAOoO,KAAK4C,GAC1BI,EAAc,GACX7G,EAAI,EAAGA,EAAI2G,EAAa1G,OAAQD,IAAI,CAC3C,IAAM3H,EAAMsO,EAAa3G,GACzB,IAAK0G,EAAQI,eAAezO,IAAQoO,EAASpO,KAASqO,EAAQrO,GAC5D,OAAO,EAETwO,EAAYxO,IAAO,EAErB,IAAK,IAAI2H,EAAI,EAAGA,EAAI4G,EAAY3G,OAAQD,IAAI,CAC1C,IAAM3H,EAAMuO,EAAY5G,GACxB,IAAI6G,EAAYxO,MAGXoO,EAASK,eAAezO,IAAQoO,EAASpO,KAASqO,EAAQrO,IAC7D,OAAO,EAGX,OAAO,WC9GL0O,eAiYJ,SAAAA,EAAY1P,GAAmB,IAAAC,EAAA,OAAA7B,OAAAC,EAAA,EAAAD,CAAAE,KAAAoR,IAC7BzP,EAAA7B,OAAA8B,EAAA,EAAA9B,CAAAE,KAAAF,OAAA+B,EAAA,EAAA/B,CAAAsR,GAAAtP,KAAA9B,KAAM0B,KAIR2P,yBAA2B,WAAM,IAAA1L,EAC6BhE,EAAKD,MAAd4P,GADpB3L,EACvB2F,SADuB3F,EACbyF,QADazF,EACJ4L,WADI5L,EACQ6L,WADR7L,EACoB2L,MAE/CG,EAAkB9P,EAAK+P,mBAAmBJ,GAIxCK,GADNF,GADAA,EAAkBA,EAAgBjI,QAAQ,KAAM,KACdA,QAAQ,IAAK,MACJxG,MAAM,KAI3C4O,EAAQC,WAAWF,EAAmB,IAAME,WAAWF,EAAmB,IAC1EG,EAAQD,WAAWF,EAAmB,IAAME,WAAWF,EAAmB,IAC1EzK,EAAI2K,WAAWF,EAAmB,IAAMC,EAAQ,EAChDzK,EAAI0K,WAAWF,EAAmB,IAAMG,EAAQ,EAEtD,mBAAA/F,OAAoB7E,EAApB,MAAA6E,OAA0B5E,EAA1B,MArB6BxF,EAwB/BoQ,+BAAiC,WAC/B,IAAMC,IAAWrQ,EAAKD,MAAMuQ,gBAAkB,GAAK,EACnD,mBAAAlG,OAAoBiG,EAApB,MAAAjG,OAA+BiG,EAA/B,MA1B6BrQ,EA6B/BuQ,sBAAwB,WAAyB,IAAxBC,EAAwBvC,UAAAtF,OAAA,QAAA8H,IAAAxC,UAAA,IAAAA,UAAA,GAC3CyC,GAAU,EACRC,EAAM3Q,EAAKD,MAAM6P,WACjBgB,EAAM5Q,EAAKD,MAAM8P,WACnBgB,EAAkC,IAA1BpB,EAAKqB,SAASH,EAAKC,GAAaxH,KAAK2H,GAQjD,OAPIP,IACFK,GAASA,IAERA,EAAQ,IAAMA,GAAS,MACxBA,GAAgB,IAChBH,GAAU,GAEL,WAAAtG,OAAWyG,EAAX,KAAqBH,IAzCC1Q,EA4C/BgR,4BAA8B,WAC5B,IAAMC,EAAcjR,EAAK0P,2BADSwB,EAEblR,EAAKuQ,wBAAlBY,EAF0BhT,OAAAiT,GAAA,EAAAjT,CAAA+S,EAAA,MAG5Bb,EAASrQ,EAAKoQ,iCACpB,SAAAhG,OAAU6G,EAAV,KAAA7G,OAAyB+G,EAAzB,KAAA/G,OAAqCiG,IA9CrCrQ,EAAKqR,eAAiB5N,cAFOzD,6EA3XfsR,EAAUC,GACxB,IAAMC,GAASD,EAAIhM,GAAK,IAAM+L,EAAI/L,GAAK,GACjCkM,GAASF,EAAI/L,GAAK,IAAM8L,EAAI9L,GAAK,GAEvC,OADc4D,KAAKsI,MAAMD,EAAOD,wCAIdG,GAGlB,OAAOC,OAEJrM,EAAE,SAACF,GACF,OAAOA,EAAEE,IAEVC,EAAE,SAACH,GACF,OAAOA,EAAEG,GANNoM,CAOFD,0CAKL,OAF6E1D,UAAAtF,OAAA,QAAA8H,IAAAxC,UAAA,GAAAA,UAAA,GAAVT,UACnBqE,cAAhB,sBACNC,mEAGFrH,GACxB,OADgGwD,UAAAtF,OAAA,QAAA8H,IAAAxC,UAAA,GAAAA,UAAA,GAAVT,UAC/DqE,cAAhB,SAAAzH,OAAuCK,EAAK0C,OAA5C,KAAA/C,OAAsDK,EAAKtJ,OAA3D,sFAGY4Q,GACnB,IAAM1S,EAAW,CACf8N,OAAQ,CAAE5H,EAAG,EAAGC,EAAG,GACnBrE,OAAQ,CAAEoE,EAAG,EAAGC,EAAG,IAErB,GAAIuM,EAAiB,CACnB,IAAI1M,EAAI0M,EAAgBC,aAAa,KAGjCC,GADJ5M,GADAA,EAAIA,GAAKA,EAAEwC,QAAQ,KAAM,MAChBxC,EAAEwC,QAAQ,IAAK,OACPxC,EAAEhE,MAAM,MAAS,GAKd,KAJpB4Q,EAAOA,EAAKrP,IAAI,SAAAsP,GACd,OAAOhC,WAAWgC,MAGXvJ,SACPtJ,EAAS8N,OAAO5H,EAAI0M,EAAK,GACzB5S,EAAS8N,OAAO3H,EAAIyM,EAAK,GACzB5S,EAAS8B,OAAOoE,EAAI0M,EAAK,GACzB5S,EAAS8B,OAAOqE,EAAIyM,EAAK,IAG7B,OAAO5S,wDAIP,MAAO,CACL8S,KAAM,EACNC,KAAM,EACNC,UAAW,CACT7O,KAAM,OACN8O,MAAO,CACL/M,EAAG,EACHC,EAAG,qDAOT+M,EACA5B,EACAC,EACA4B,GAEA,IADAC,EACAxE,UAAAtF,OAAA,QAAA8H,IAAAxC,UAAA,GAAAA,UAAA,GADiDT,SAE3CnO,EAAWoQ,EAAKiD,8BAChBC,EAAYlD,EAAKmD,aAAaH,GAC9BI,EAAaN,EAAyBT,wBAEtCgB,EAAYP,EAAyBP,aAAa,SAClDe,EAAaR,EAAyBP,aAAa,UACnDgB,EAAIF,EAAY5C,WAAW4C,GAAaD,EAAW7N,MACnDiO,EAAIF,EAAa7C,WAAW6C,GAAcF,EAAW5N,OACrDiO,EAAOtC,EAAIrL,GAAK,EAChB4N,EAAOvC,EAAIpL,GAAK,EAChB4N,EAAOzC,EAAIpL,GAAK,EAChB8N,EAAO1C,EAAInL,GAAK,EAEhB8N,EAAMH,EAAOF,EAAI,EACjBM,EAASJ,EAAOF,EAAI,EACpBO,EAAON,EAAOF,EAAI,EAClBS,EAAQP,EAAOF,EAAI,EAEnBU,EAAO1N,iBAAM,OAAQ,CAAE2N,GAAIP,EAAMQ,GAAIP,EAAMQ,GAAIX,EAAMY,GAAIX,IAG3DY,EAAO,CACPC,QAAS,IAAIC,WAAQT,EAAMF,GAC3BY,YAAa,IAAID,WAAQR,EAAOF,IAIhC5M,EAAO,CACToN,EAAKC,QACL,IAAIC,WAAQF,EAAKG,YAAY3O,EAAGwO,EAAKC,QAAQxO,GAC7CuO,EAAKG,YACL,IAAID,WAAQF,EAAKC,QAAQzO,EAAGwO,EAAKG,YAAY1O,IAI3C2O,EAASJ,EAAKC,QAAQI,KAAKL,EAAKG,YAAa,IAG7C5S,EAAYiR,EAAyBP,aAAa,aAClDqC,EAAS/S,EAAYA,EAAUuG,QAAQ,wBAAyB,MAAQ,KACxEyM,EAAQ,EACRD,IAEFA,EAASA,EAAOxM,QAAQ,iBAAkB,IAE1CyM,EAAQpE,WAAWmE,GAAUjL,KAAK2H,GAAK,KAGzC,IAAII,EAAWoD,YAASC,WAAWF,EAAOH,GAEpCM,EAAc9N,EAAK/D,IAAI,SAAA8R,GAAC,OAAIA,EAAEpT,UAAU6P,KAGxCwD,EAAgBC,gBAAaC,qBAAqBnB,EAAKoB,OAAO,GAAIpB,EAAKoB,OAAO,GAAIL,GAExF,GAAIE,EAAcI,OAAOpM,OAAS,EAAG,CACnC,IAAIqM,EAAa,EACbC,EAAc,EACZC,EAAaP,EAAcI,OAAO,GAAGxP,EACrC4P,EAAaR,EAAcI,OAAO,GAAGvP,EACvC0P,EAAa1B,GAAQ0B,EAAazB,GAAS0B,EAAahC,EAE1D8B,EAActC,EAAU1N,OACfiQ,EAAa1B,GAAQ0B,EAAazB,GAAS0B,EAAahC,EAEjE8B,GAAetC,EAAU1N,OAGzB+P,EAFSG,EAAa7B,GAAO6B,EAAa5B,GAAU2B,EAAahC,GAEnDP,EAAU3N,MAGX2N,EAAU3N,MAEzB3F,EAAS8S,KAAOe,EAAOgC,GAAc1C,EAAgBwC,EAAa,KAAO,GACzE3V,EAAS+S,KAAOe,EAAOgC,GAAc3C,EAAgByC,EAAc,KAAO,GAC1E5V,EAASgT,UAAYsC,EAAcI,OAAO,GAE5C,OAAO1V,2CAIP+V,EACAzE,EACAC,GAGA,IAFA4B,IAEAvE,UAAAtF,OAAA,QAAA8H,IAAAxC,UAAA,KAAAA,UAAA,GADAwE,EACAxE,UAAAtF,OAAA,QAAA8H,IAAAxC,UAAA,GAAAA,UAAA,GADiDT,SAE3CnO,EAAWoQ,EAAKiD,8BAChBC,EAAYlD,EAAKmD,aAAaH,GAE9BI,EAAauC,EAAkBtD,wBAE/BkB,EAAIH,EAAW7N,MACfiO,EAAIJ,EAAW5N,OACfiO,EAAOtC,EAAIrL,GAAK,EAChB4N,EAAOvC,EAAIpL,GAAK,EAChB4N,EAAOzC,EAAIpL,GAAK,EAChB8N,EAAO1C,EAAInL,GAAK,EAGhB8N,EAAMH,EAAOF,EAAI,EACjBM,EAASJ,EAAOF,EAAI,EACpBO,EAAON,EAAOF,EAAI,EAClBS,EAAQP,EAAOF,EAAI,EAGrB3N,EAAI+P,EAAkBpD,aAAa,KACvC,GAAK,KAAKqD,KAAKhQ,GAAf,CAOA,IAAI4M,GADJ5M,EAAIA,EAAEwC,QAAQ,MAAO,KACRxG,MAAM,KACnB4Q,EAAOA,EAAKrP,IAAI,SAAC0S,EAAK7N,GACpB,IAAI8N,GAAQ,EAMZ,MALI,KAAKF,KAAKC,KACZA,EAAMA,EAAIzN,QAAQ,KAAM,IACxB0N,GAAQ,GAGN9N,EAAQ,IAAM,EACRyI,WAAWoF,GAAO9B,GAAS+B,EAAQ,IAAM,IAE3CrF,WAAWoF,GAAOhC,GAAQiC,EAAQ,IAAM,MAGlD,IAAMZ,EAAgBtC,qBACpBrM,iBAAM,OAAQ,CAAEX,EAAG,KAAO4M,EAAKtQ,KAAK,OACpCqE,iBAAM,OAAQ,CAAE2N,GAAIP,EAAMQ,GAAIP,EAAMQ,GAAIX,EAAMY,GAAIX,KAGpD,GAAIwB,EAAcI,OAAOpM,OAAS,EAAG,CACnC,IAAIqM,EAAa,EACbC,EAAc,EACZC,EAAaP,EAAcI,OAAO,GAAGxP,EACrC4P,EAAaR,EAAcI,OAAO,GAAGvP,EACvC2D,EAAa,EACjB,GAAI+L,EAAa1B,GAAQ0B,EAAazB,EAAO,CAC3C,IAAM+B,EAAiBL,EAAahC,EACpChK,EAAagM,EAAahC,GAAQ,EAAI,EAEtC8B,EAActC,EAAU1N,OAASkE,EAMjC8L,GAA4B7L,KAAK6F,IAAI7F,KAAKqM,IAAID,GAAiB,GAEjE,GAAIL,EAAa7B,GAAO6B,EAAa5B,EAAQ,CAC3C,IAAMmC,EAAiBR,EAAahC,EACpC/J,EAAa+L,EAAahC,GAAQ,EAAI,EAEtC8B,EAAarC,EAAU3N,MAAQmE,EAC/B6L,GAA0B5L,KAAK6F,IAAI7F,KAAKqM,IAAIC,GAAiB,GAG/DrW,EAAS8S,KAAOe,EAAOgC,GAAc1C,EAAgBwC,EAAa,KAAO,GACzE3V,EAAS+S,KAAOe,EAAOgC,GAAc3C,EAAgByC,EAAc,KAAO,GAE1E5V,EAASgT,UAAYsC,EAAcI,OAAO,GAE5C,OAAO1V,8CAIPsW,EACAhF,EACAC,GAGA,IAFA4B,IAEAvE,UAAAtF,OAAA,QAAA8H,IAAAxC,UAAA,KAAAA,UAAA,GADAwE,EACAxE,UAAAtF,OAAA,QAAA8H,IAAAxC,UAAA,GAAAA,UAAA,GADiDT,SAE3CnO,EAAWoQ,EAAKiD,8BAChBC,EAAYlD,EAAKmD,aAAaH,GAChCuC,EAAarC,EAAU3N,MACvBiQ,EAActC,EAAU1N,OACtB4N,EAAa8C,EAAoB7D,wBACjC8D,EAAgBD,EAAoBC,cACtCC,EAAcD,EAAc5D,aAAa,SACzC8D,EAAeF,EAAc5D,aAAa,SAC1C6D,IACFA,EAAc3F,WAAW2F,IAEvBC,IACFA,EAAe5F,WAAW4F,IAG5B,IAAM9C,EAAI6C,GAA4BhD,EAAW7N,MAC3CiO,EAAI6C,GAA8BjD,EAAW5N,OAC7CiO,EAAOtC,EAAIrL,GAAK,EAChB4N,EAAOvC,EAAIpL,GAAK,EAChB4N,EAAOzC,EAAIpL,GAAK,EAChB8N,EAAO1C,EAAInL,GAAK,EAGlBuQ,EAAO/C,EAAI,GAAMR,EAAgBwC,EADV,KAC4C,GACnEgB,EAAO/C,EAAI,GAAMT,EAAgByC,EAFV,KAE4C,GAIjEN,EAAgBtC,qBACpBrM,iBAAM,UAAW,CACfP,GAAIsQ,EACJrQ,GAAIsQ,EACJ5R,GAAI8O,EACJ7O,GAAI8O,IAENnN,iBAAM,OAAQ,CAAE2N,GAAIP,EAAMQ,GAAIP,EAAMQ,GAAIX,EAAMY,GAAIX,KAGpD,GAAIwB,EAAcI,OAAOpM,OAAS,EAAG,CACnC,IAAIuM,EAAaP,EAAcI,OAAO,GAAGxP,EACrC4P,EAAaR,EAAcI,OAAO,GAAGvP,EAEzCnG,EAAS8S,KAAOe,EAAOgC,EACvB7V,EAAS+S,KAAOe,EAAOgC,EACvB9V,EAASgT,UAAYsC,EAAcI,OAAO,GAE5C,OAAO1V,0CAIPsK,EACAgH,EACAC,EACAnH,GAGA,IAFA+I,IAEAvE,UAAAtF,OAAA,QAAA8H,IAAAxC,UAAA,KAAAA,UAAA,GADAwE,EACAxE,UAAAtF,OAAA,QAAA8H,IAAAxC,UAAA,GAAAA,UAAA,GADmCT,SAE/BnO,EAAWoQ,EAAKiD,8BAEpB,IAAK9B,EAAInH,GACP,OAAOpK,EAMT,IAAM4W,EAAWzI,SAASC,eAAT,QAAArD,OAAgCwG,EAAInH,KACrD,IAAKwM,EACH,OAAO5W,EAET,IAAM6W,EAAUD,EAASpE,cAAT,YAGhB,IAAKqE,GAAYA,IAAYA,EAAQC,eACnC,OAAO9W,EAGT,IAAM+W,EAAYF,EAAQC,eAAe,+BAAgC,QAEzE,IAAKC,EACH,OAAO/W,EAGT,IAAMgX,EAA2C5D,EAAgBZ,cAAhB,QAAAzH,OAAsCgM,EAAtC,UAG3ChB,EACHA,EAEC,KADA3C,EAAgBZ,cAAhB,QAAAzH,OAAsCgM,EAAtC,UAGET,EACHP,GAAsBA,EAErB,KADA3C,EAAgBZ,cAAhB,QAAAzH,OAAsCgM,EAAtC,kBAAAhM,OAAgEgM,EAAhE,mBAAAhM,OAA2FgM,EAA3F,aAwBJ,OAlBE/W,EAFEgX,EAEMlY,OAAAmY,EAAA,EAAAnY,CAAA,GACHkB,EACAoQ,EAAK8G,wBAAwBF,EAAmB1F,EAAKC,EAAK4B,EAAeC,IAErE2C,EAEDjX,OAAAmY,EAAA,EAAAnY,CAAA,GACHkB,EACAoQ,EAAK+G,iBAAiBpB,EAAmBzE,EAAKC,EAAK4B,EAAeC,IAI/DtU,OAAAmY,EAAA,EAAAnY,CAAA,GACHkB,EACAoQ,EAAKgH,mBAAmBd,EAAqBhF,EAAKC,EAAK4B,EAAeC,yCAO3D5N,EAAgB8K,GAClC,OAAIA,EAAKnM,MAAQqB,EAAU8K,EAAKnM,MACvBqB,EAAU8K,EAAKnM,MAAMyC,QACnBpB,EAAUkB,UACZlB,EAAUkB,UAAUE,QAEtB,iEAwDUwE,GAAW,IAAAiM,EAC2CrY,KAAK0B,MAApE6P,EADoB8G,EACpB9G,WAAYC,EADQ6G,EACR7G,WAAYpG,EADJiN,EACIjN,QAASE,EADb+M,EACa/M,SAAU8I,EADvBiE,EACuBjE,gBAC7CS,EAAOrD,GAAcA,EAAWtK,EAAIsK,EAAWtK,EAAI,EACnD4N,EAAOtD,GAAcA,EAAWrK,EAAIqK,EAAWrK,EAAI,EACnD4N,EAAOvD,GAAcD,EAAWrK,EAAIqK,EAAWrK,EAAI,EACnD8N,EAAOxD,GAAcD,EAAWpK,EAAIoK,EAAWpK,EAAI,EAOnDmR,EAASlH,EAAKmH,gBAAgBjN,GAAY,EAAGkG,EAAYD,EAAYnG,GAAS,EAAOgJ,GACrFoE,EAASpH,EAAKmH,gBAAgBjN,GAAY,EAAGiG,EAAYC,EAAYpG,GAAS,EAAMgJ,GAEpFqE,EAAa,CACjB,CACEvR,EAAG6N,EAAOuD,EAAOxE,KACjB3M,EAAG6N,EAAOsD,EAAOvE,MAEnB,CACE7M,EAAG2N,EAAO2D,EAAO1E,KACjB3M,EAAG2N,EAAO0D,EAAOzE,OAIrB,OAAO3C,EAAKsH,aAAaD,4CAGVnH,GACf,OACExL,EAAA,sBACEvG,UAAU,YACVoZ,WAAW,SACXC,kBAAkB,UAClB3V,UAAS,GAAA8I,OAAK/L,KAAKqR,6BAElBC,EAAKuH,oDAKKvH,GAAW,IAAAwH,EACI9Y,KAAKkS,wBADT6G,EAAAjZ,OAAAiT,GAAA,EAAAjT,CAAAgZ,EAAA,GACnBhG,EADmBiG,EAAA,GAEpBC,EAFoBD,EAAA,GAEH,GAAAhN,OAAMuF,EAAK2H,SAAX,YAAAlN,OAAyBuF,EAAK4H,YAA9B,GAAAnN,OAAgDuF,EAAK4H,WAArD,YAAAnN,OAAqEuF,EAAK2H,UACjG,OACEnT,EAAA,sBACEvG,UAAU,YACVoZ,WAAW,SACXC,kBAAkB,UAClBlP,MAAO,CAACyP,SAAU,OAAQC,OAAQ,OAAQ7R,KAAM,SAChDtE,UAAS,GAAA8I,OAAK/L,KAAKqR,2BAAV,KAAAtF,OAAwC+G,EAAxC,qBAERkG,oCAKE,IAAAK,EACsDrZ,KAAK0B,MAA1D4P,EADD+H,EACC/H,KAAM9K,EADP6S,EACO7S,UAAWyL,EADlBoH,EACkBpH,eACzB,IAFOoH,EACkCjF,gBAEvC,OAAO,KAET,IAAM7S,EAAE,GAAAwK,OAAMuF,EAAKxC,QAAU,GAArB,KAAA/C,OAA2BuF,EAAKxO,QAClCvD,EAAYiP,GAAW8K,WAAW,OAAQ,CAC9CC,SAAUvZ,KAAK0B,MAAM4H,aAGvB,OACExD,EAAA,mBAAGvG,UAAU,iBAAiBia,cAAalI,EAAKxC,OAAQ2K,cAAanI,EAAKxO,QACxEgD,EAAA,mBAAGvG,UAAWA,GACZuG,EAAA,sBAAMvG,UAAU,YAAYyH,EAAGhH,KAAK0R,mBAAmBJ,SAASc,IAC9DtM,EAAA,qBACEiS,UAAW3G,EAAKsI,aAAalT,EAAW8K,GACxC3K,MAAOsL,EACPrL,OAAQqL,EACRhP,UAAS,GAAA8I,OAAK/L,KAAK2S,iCAEpBrB,EAAKuH,YAAc7Y,KAAK2Z,iBAAiBrI,GACzCA,EAAK4H,YAAc5H,EAAK2H,UAAYjZ,KAAK4Z,gBAAgBtI,IAE9DxL,EAAA,mBAAGvG,UAAU,sBACXuG,EAAA,sBACEvG,UAAU,oBACVsa,IAAK7Z,KAAKgT,eACVzR,GAAIA,EACJiY,cAAalI,EAAKxC,OAClB2K,cAAanI,EAAKxO,OAClBkE,EAAGhH,KAAK0R,mBAAmBJ,SAASc,aA5gB7BhN,aAAbgM,GACGlL,aAAe,CACpB+L,eAAgB,GAChB3I,YAAY,GAihBD8H,oBCviBT0I,eAMJ,SAAAA,EAAYpY,GAA2B,IAAAC,EAAA,OAAA7B,OAAAC,EAAA,EAAAD,CAAAE,KAAA8Z,IACrCnY,EAAA7B,OAAA8B,EAAA,EAAA9B,CAAAE,KAAAF,OAAA+B,EAAA,EAAA/B,CAAAga,GAAAhY,KAAA9B,KAAM0B,KAgBRqY,KAAO,SAACC,GAAW,IAAArU,EACYhE,EAAKD,MAA1BuY,EADStU,EACTsU,QAASC,EADAvU,EACAuU,QACXC,EAAYH,EAAElX,OAAOH,MACrByX,EAAgBzY,EAAK0Y,aAAaF,GAClCG,EAAQF,EAAgBzY,EAAKD,MAAM6Y,UAErCH,IAAkBF,GAAW,IAAME,IAAkBH,GAAW,IAClEtY,EAAKD,MAAM8Y,WAAWF,IAxBa3Y,4EAK1BsV,GAAa,IAAAoB,EACKrY,KAAK0B,MAA1BuY,EADgB5B,EAChB4B,QACR,OAAOhD,IAFiBoB,EACP6B,SACS,IAAMD,GAAW,IAvBjC,KAuBgDA,GAAW,wCAI1DhD,GAAa,IAAAoC,EACKrZ,KAAK0B,MAA1BuY,EADgBZ,EAChBY,QACR,OA7BU,KA6BFhD,GAAOgD,GAAW,MAFFZ,EACPa,SACoC,IAAMD,GAAW,qCAgBtE,OACE7a,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,SACE6F,KAAK,QACL5F,UAAU,SACVqR,IAAK5Q,KAAKya,aAAaza,KAAK0B,MAAMuY,SAAW,GAC7CS,IAAK1a,KAAKya,aAAaza,KAAK0B,MAAMwY,SAAW,GAC7CvX,MAAO3C,KAAKya,aAAaza,KAAK0B,MAAM6Y,WACpCtW,SAAUjE,KAAK+Z,KACfY,KAAK,MAEPvb,EAAAC,EAAAC,cAAA,kBAEFF,EAAAC,EAAAC,cAAA,UAAQ6F,KAAK,SAAS5F,UAAU,gBAAgBqb,YAAa5a,KAAK0B,MAAMmZ,WACtEzb,EAAAC,EAAAC,cAACwb,GAAA,EAAD,eAnDkB1V,IAAMxF,WAA5Bka,GACG5T,aAAe,CACpBgU,QAAS,IACTD,QAAS,KAuDEH,UCSAiB,eAvEb,SAAAA,EAAYrZ,GAAM,IAAAC,EAAA,OAAA7B,OAAAC,EAAA,EAAAD,CAAAE,KAAA+a,IACdpZ,EAAA7B,OAAA8B,EAAA,EAAA9B,CAAAE,KAAAF,OAAA+B,EAAA,EAAA/B,CAAAib,GAAAjZ,KAAA9B,KAAM0B,KACDK,MAAQ,CACXuP,KAAM5P,EAAM4P,MAHA3P,yFAmBQD,GACxB,IAAI4P,EAAO5P,EAAM4P,KACjBA,EAAK0J,SAAWtZ,EAAM4P,KAAK0J,SACzBhb,KAAK6C,SAAS,CAACyO,KAAMA,0CAKvB,OADetR,KAAK+B,MAAMuP,KAAK0J,SAEpBhb,KAAK+B,MAAMuP,KAAK0J,SAASxX,SAASxB,KAEpC,uCAMP,OADehC,KAAK+B,MAAMuP,KAAK0J,SAEpBhb,KAAK+B,MAAMuP,KAAK0J,SAASzZ,GAEzB,oCAIN,IAAAoE,EACiC3F,KAAK0B,MAArC4P,EADD3L,EACC2L,KAAiBhI,GADlB3D,EACOY,UADPZ,EACkB2D,YAEnB2R,EAASjb,KAAKkb,YACdlC,EAAQ1H,EAAK0J,UAAiD,UAArC1J,EAAK0J,SAASxX,SAAS2X,UAAwB7J,EAAK0H,MAAQ,GACrFzZ,EAAYiP,GAAW8K,WAAW,YAAa,CAAEC,SAAUjQ,IAC3DpB,EAAWlI,KAAKob,cACtB,OACEtV,EAAA,sBAAMvG,UAAWA,EAAWoZ,WAAW,YAElCzQ,GACDpC,EAAA,uBAAOuV,QAAQ,OAAOnT,GAEvB8Q,GACClT,EAAA,uBAAOoB,EAAG,EAAGsG,GAZA,GAYgB2L,SAAS,QACnCH,GAGJA,GAASlT,EAAA,2BAAQkT,GAEjBiC,GAAUnV,EAAA,uBAAOoB,EAAG,EAAGsG,GAAI8N,GAAgBD,QAAQ,OAAOJ,EAAOnV,EAAA,kCAlEnDV,aCgDjBmW,eAsBJ,SAAAA,EAAY7Z,GAAmB,IAAAC,EAAA,OAAA7B,OAAAC,EAAA,EAAAD,CAAAE,KAAAub,IAC7B5Z,EAAA7B,OAAA8B,EAAA,EAAA9B,CAAAE,KAAAF,OAAA+B,EAAA,EAAA/B,CAAAyb,GAAAzZ,KAAA9B,KAAM0B,KA0BR8Z,gBAAkB,WAChB,IAAMC,EAAmD,IAAjClI,KAASmI,YAAYC,QACvCC,EAAWrI,KAASmI,YAAYE,SAFhBjW,EAGuChE,EAAKD,MAA1D4J,EAHc3F,EAGd2F,SAAUuQ,EAHIlW,EAGJkW,aAAczQ,EAHVzF,EAGUyF,QAASgJ,EAHnBzO,EAGmByO,gBACzC,GAAKqH,EAAL,CAKA,IAAMK,EAAW,CACf5U,EAAGqM,KAASrM,EACZC,EAAGoM,KAASpM,GAGd,GAAIyU,EAAU,CACZja,EAAKkB,SAAS,CAAEkZ,aAAa,IAG7B,IAAMC,EAAM5K,GAAKmH,gBAAgBjN,EAAU3J,EAAKD,MAAM4P,KAAMwK,EAAU1Q,GAAS,EAAMgJ,GACrF0H,EAAS5U,GAAK8U,EAAIlI,KAClBgI,EAAS3U,GAAK6U,EAAIjI,UAETpS,EAAKI,MAAMga,aAAeF,GAEnC/b,OAAOmc,OAAOH,EAAUD,EAAaK,mBAAmBJ,IAE1Dna,EAAKkB,SAASiZ,GAGdna,EAAKD,MAAMya,WAAWL,EAAUna,EAAKD,MAAM4P,KAAKlG,GAAUwQ,KAxD7Bja,EA2D/Bya,gBAAkB,WACXza,EAAK0a,QAAQC,UAGb3a,EAAK4a,aACR5a,EAAK4a,WAAa5a,EAAK0a,QAAQC,QAAQ/E,cAAciF,aAGvD7a,EAAK0a,QAAQC,QAAQ/E,cAAcA,cAAckF,YAAY9a,EAAK0a,QAAQC,QAAQ/E,iBAnErD5V,EAsE/B+a,cAAgB,WACd,GAAK/a,EAAK0a,QAAQC,QAAlB,CADoB,IAAAK,EAIUhb,EAAKI,MAA3BmF,EAJYyV,EAIZzV,EAAGC,EAJSwV,EAITxV,EAAG4U,EAJMY,EAINZ,YAJM1D,EAKa1W,EAAKD,MAA9B4P,EALY+G,EAKZ/G,KAAalG,GALDiN,EAKNjP,MALMiP,EAKCjN,SACrBzJ,EAAKkB,SAAS,CAAE+Z,WAAW,EAAOb,aAAa,IAE3Cpa,EAAK4a,YAAc5a,EAAK4a,WAAWhF,eACrC5V,EAAK4a,WAAWhF,cAAcsF,aAAalb,EAAK0a,QAAQC,QAAQ/E,cAAe5V,EAAK4a,YAGtF,IAAMX,EAAWrI,KAASmI,YAAYE,SACtCja,EAAKD,MAAMob,aACT,CAAE5V,IAAGC,KACLmK,EAAKlG,GACLwQ,GAAYG,GAGdpa,EAAKD,MAAMqb,eAAezL,EAAMA,EAAKlG,GAAUwQ,GAAYG,KAzF9Bpa,EA4F/Bqb,gBAAkB,SAACpa,GAEjB,IAAIqa,GAAU,GACT1J,MAAiC,IAArBA,KAASoI,SAAmB/Y,GAA2B,IAAlBA,EAAM+Y,WAC1DsB,GAAU,EACVtb,EAAKkB,SAAS,CAAEoa,aAGlBtb,EAAKD,MAAMwb,iBAAiBta,EAAOjB,EAAKD,MAAM4P,KAAM2L,IApGvBtb,EAuG/Bwb,eAAiB,SAACva,GAKhBjB,EAAKkB,SAAS,CAAEoa,SAAS,IACzBtb,EAAKD,MAAM0b,iBAAiBxa,EAAOjB,EAAKD,MAAM4P,OA1G9C3P,EAAKI,MAAQ,CACXga,aAAa,EACbkB,SAAS,EACTL,WAAW,EACXrD,UAAU,EACVrS,EAAGxF,EAAM4P,KAAKpK,GAAK,EACnBC,EAAGzF,EAAM4P,KAAKnK,GAAK,GAGrBxF,EAAK0a,QAAUjX,cAZczD,6FAXCkM,EAAuBC,GACrD,MAAO,CACLyL,SAAU1L,EAAUvE,WACpBpC,EAAG2G,EAAUyD,KAAKpK,EAClBC,EAAG0G,EAAUyD,KAAKnK,gEAuBpB,IAAMkW,EAAe9J,OAElB+J,GAAG,OAAQtd,KAAKwb,iBAChB8B,GAAG,QAAStd,KAAKoc,iBACjBkB,GAAG,MAAOtd,KAAK0c,eAClBnJ,KACUvT,KAAKqc,QAAQC,SACpBgB,GAAG,WAAYtd,KAAKmd,gBACpBrb,KAAKub,yCA0GI,IAAAhE,EAC0DrZ,KAAK0B,MAAnE6b,EADIlE,EACJkE,WAAYjM,EADR+H,EACQ/H,KAAMlI,EADdiQ,EACcjQ,MAAO7C,EADrB8S,EACqB9S,UAAWyH,EADhCqL,EACgCrL,aAAc5C,EAD9CiO,EAC8CjO,QAD9CoS,EAEkBxd,KAAK+B,MAA3Bkb,EAFIO,EAEJP,QAAS1D,EAFLiE,EAEKjE,SACX7X,EAAQ,CACZkF,OAAQ5G,KAAK0B,MAAM4J,UAAY,EAC/B3E,MAAO3G,KAAK0B,MAAM4J,UAAY,GAE1BmS,EAA8BjP,GAAW8K,WAAW,SACpDoE,EAAgBlP,GAAW8K,WAAW,OAAQ,CAAEC,WAAU0D,YAC1DU,EAAuBnP,GAAW8K,WAAW,gBAAiB,CAAEC,SAAUvZ,KAAK+B,MAAMwX,WACrFqE,EAAoBrC,EAAKsC,qBAAqBvM,EAAM/K,IAAc,GAClEuX,EAAuBvC,EAAKwC,wBAAwBzM,EAAMtD,IAAiB,GAG3EgQ,EAAyBJ,EAAoBzO,SAASqE,cAAT,QAAAzH,OAA+B6R,IAAuB,KACnGK,EAAgBD,EAAoBA,EAAkBrK,aAAa,SAAW,EAC9EuK,EAAiBF,EAAoBA,EAAkBrK,aAAa,UAAY,EAItF,OAHAjS,EAAMiF,MAAQsX,EAAgBE,SAASF,EAAe,IAAMvc,EAAMiF,MAClEjF,EAAMkF,OAASsX,EAAiBC,SAASD,EAAgB,IAAMxc,EAAMkF,OAEjE2W,EAEKA,EAAWvd,KAAKqc,QAAS/K,EAAMA,EAAKlG,GAAUmO,EAAU0D,GAG7DnX,EAAA,kBAAAhG,OAAAmc,OAAA,CAAG1c,UAAWke,GAAiC/b,KAC1C4P,EAAK8M,SACNtY,EAAA,qBACEuY,aAAYjV,EACZ7J,UAAWoe,EACXzW,GAAIxF,EAAMiF,MAAQ,EAClBQ,GAAIzF,EAAMkF,OAAS,EACnBD,MAAOjF,EAAMiF,MACbC,OAAQlF,EAAMkF,OACdmR,UAAW+F,IAGfhY,EAAA,qBACEuY,aAAYjV,EACZ7J,UAAWme,EACXxW,GAAIxF,EAAMiF,MAAQ,EAClBQ,GAAIzF,EAAMkF,OAAS,EACnBD,MAAOjF,EAAMiF,MACbC,OAAQlF,EAAMkF,OACdmR,UAAW6F,0CAOR,IAAAU,EACwDte,KAAK0B,MAAhE4P,EADGgN,EACHhN,KAAa/P,GADV+c,EACGlV,MADHkV,EACU/c,IAAIgF,EADd+X,EACc/X,UAAWgY,EADzBD,EACyBC,eAAgBjV,EADzCgV,EACyChV,WAEpD,OAAIiV,EACKA,EAAejN,EAAM/P,EAAI+H,GAE1BxD,EAAA,cAAC0Y,GAAD,CAAUlN,KAAMA,EAAM/K,UAAWA,EAAW+C,WAAYtJ,KAAK+B,MAAMwX,4CAGpE,IAAAkF,EAC6Bze,KAAK+B,MAAjCmF,EADDuX,EACCvX,EAAGC,EADJsX,EACItX,EAAG8V,EADPwB,EACOxB,QAAS1D,EADhBkF,EACgBlF,SADhBmF,EAEuB1e,KAAK0B,MAA3B2Z,EAFDqD,EAECrD,QAAS9Z,EAFVmd,EAEUnd,GAAI+P,EAFdoN,EAEcpN,KACf/R,EAAYiP,GAAW8K,WAAW,OAAQhI,EAAKnM,KAAM,CACzD8X,UACA1D,aAEF,OACEzT,EAAA,mBACEvG,UAAWA,EACXof,YAAa3e,KAAKgd,gBAClB4B,WAAY5e,KAAKmd,eACjB5b,GAAIA,EACJsY,IAAK7Z,KAAKqc,QACVhB,QAASA,EACTpY,UAAS,aAAA8I,OAAe7E,EAAf,MAAA6E,OAAqB5E,EAArB,MAERnH,KAAK6e,cACL7e,KAAK8e,6DAhGgBxN,EAAa/K,GACvC,OAAI+K,EAAKnM,MAAQoB,EAAU+K,EAAKnM,MACvBoB,EAAU+K,EAAKnM,MAAMyC,QACnBrB,EAAU0B,UACZ1B,EAAU0B,UAAUL,QAEtB,qDAGsB0J,EAAatD,GAC1C,OAAIsD,EAAK8M,SAAWpQ,GAAgBA,EAAasD,EAAK8M,SAC7CpQ,EAAasD,EAAK8M,SAASxW,QACzBoG,GAAgBA,EAAa/F,UAC/B+F,EAAa/F,UAAUL,QAEzB,YArJQxC,aAAbmW,GACGrV,aAAe,CACpBoD,YAAY,EACZgC,SAAU,IACV4R,iBAAkB,aAClBE,iBAAkB,aAClBjB,WAAY,aACZY,eAAgB,aAChBD,aAAc,cAqOHvB,UCrTMwD,uBAEjB,SAAAA,IAAe,OAAAjf,OAAAC,EAAA,EAAAD,CAAAE,KAAA+e,GAAAjf,OAAA8B,EAAA,EAAA9B,CAAAE,KAAAF,OAAA+B,EAAA,EAAA/B,CAAAif,GAAAjd,KAAA9B,oFAICwD,EAAU0D,EAAGC,GACzB,IAAI1G,EAAMT,KAAKC,QAAU,kBAGzB,OAAOS,IAAMD,EAAK,CACdE,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACjBke,WAAYxb,EAASjC,GACrB2F,EAAGA,EACHC,EAAGA,IAEPjH,QAASF,KAAKE,UACfa,KAAK,SAAAC,GAEJ,OADAC,QAAQC,IAAIF,GACLA,EAASG,SACjBJ,KAAK,SAAAH,GAEJ,OADAK,QAAQC,IAAIN,GACLA,IACRQ,MAAO,SAAAC,GAAM,OAAIC,MAAMD,0CAGjB4d,EAAYC,EAAiBC,EAAOC,GAC7C,IAAI3e,EAAMT,KAAKC,QAAU,kBAGzB,OAAOS,IAAMD,EAAK,CACdE,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACjBme,WAAYA,EACZC,gBAAiBA,EACjBC,MAAOA,EACPE,sBAAuBD,IAE3Blf,QAASF,KAAKE,UACfa,KAAK,SAAAC,GAEJ,OAAOA,EAASG,SACjBJ,KAAK,SAAAH,GAEJ,OAAOA,IACRQ,MAAO,SAAAC,GAAM,OAAIC,MAAMD,2CAGhB4d,EAAYC,GACtB,IAAIze,EAAMT,KAAKC,QAAU,qCAAqCgf,EAAWzb,SAASvB,cAC7E,kBAAoBid,EAAgB1b,SAASvB,cAElD,OAAOvB,IAAMD,EAAK,CACdE,OAAQ,MACRT,QAASF,KAAKE,UACfa,KAAK,SAAAC,GAEJ,OAAOA,EAASG,SACjBJ,KAAK,SAAAH,GAEJ,OAAOA,IACRQ,MAAO,SAAAC,GAAM,OAAIC,MAAMD,gDAI1B,IAAIZ,EAAMT,KAAKC,QAAU,wBAEzB,OAAOS,IAAMD,EAAK,CACdE,OAAQ,MACRT,QAASF,KAAKE,UACfa,KAAK,SAAAC,GACJ,OAAOA,EAASG,SACjBJ,KAAK,SAAAH,GACJ,OAAOA,IACRQ,MAAO,SAAAC,GAAM,OAAIC,MAAMD,6CAI1B,IAAIZ,EAAMT,KAAKC,QAAU,qBAEzB,OAAOS,IAAMD,EAAK,CACdE,OAAQ,MACRT,QAASF,KAAKE,UACfa,KAAK,SAAAC,GACJ,OAAOA,EAASG,SACjBJ,KAAK,SAAAH,GACJ,OAAOA,IACRQ,MAAO,SAAAC,GAAM,OAAIC,MAAMD,8CAI1B,IAAIZ,EAAMT,KAAKC,QAAU,sBAEzB,OAAOS,IAAMD,EAAK,CACdE,OAAQ,MACRT,QAASF,KAAKE,UACfa,KAAK,SAAAC,GAEJ,OADAC,QAAQC,IAAIF,GACLA,EAASG,SACjBJ,KAAK,SAAAH,GAEJ,OADAK,QAAQC,IAAIN,GACLA,IACRQ,MAAO,SAAAC,GAAM,OAAIC,MAAMD,gDAGXie,EAAMpY,EAAGC,GACxB,IAAI1G,EAAMT,KAAKC,QAAU,6BAA+BiH,EAAI,IAAMC,EAAI,IAEtE,OAAOzG,IAAMD,EAAK,CACdE,OAAQ,MACRT,QAASF,KAAKE,QACdU,KAAMC,KAAKC,UAAUwe,KACtBle,MAAO,SAAAC,GAAM,OAAIC,MAAMD,gDAKXE,GACf,IAAId,EAAMT,KAAKC,QAAU,wBAAwBsB,EAEjD,OAAOb,IAAMD,EAAI,CACbE,OAAQ,SACRT,QAASF,KAAKE,UACfkB,MAAO,SAAAC,GAAM,OAAIC,MAAMD,8CAGbE,GACb,IAAId,EAAMT,KAAKC,QAAU,sBAAsBsB,EAE/C,OAAOb,IAAMD,EAAI,CACbE,OAAQ,SACRT,QAASF,KAAKE,UACfkB,MAAO,SAAAC,GAAM,OAAIC,MAAMD,YArIexB,ICyD3C0f,eA0EJ,SAAAA,EAAY7d,GAAwB,IAAAC,EAAA,OAAA7B,OAAAC,EAAA,EAAAD,CAAAE,KAAAuf,IAClC5d,EAAA7B,OAAA8B,EAAA,EAAA9B,CAAAE,KAAAF,OAAA+B,EAAA,EAAA/B,CAAAyf,GAAAzd,KAAA9B,KAAM0B,KAgOR8d,eAAiB,SAACC,EAAoBC,GAGpC,IADA,IAAItT,EAAO,KACF/B,EAAI,EAAGA,EAAIoV,EAAUnV,OAAQD,KACpC+B,EAAOqT,EAAUpV,IAEPyE,QACP1C,EAAKtJ,QACL4c,EAAQ,GAAA3T,OAAIK,EAAK0C,OAAT,KAAA/C,OAAmBK,EAAKtJ,UAEjCnB,EAAKge,kBAAkBvT,EAAK0C,OAAQ1C,EAAKtJ,SA3OXnB,EA+SpCie,aAAe,SAACrG,GAA4B,IAAA5T,EACShE,EAAKD,MAAhDme,EADkCla,EAClCka,cAAeC,EADmBna,EACnBma,eADmBna,EACJoa,UACrBxG,KACZA,EAASzK,QAAU+Q,GAAiBA,EAActG,GAGrD5X,EAAKqe,WAAWzG,GACPA,EAASzK,QAAUgR,GAAiBA,EAAcvG,IAG3D5X,EAAKse,WAAW1G,KAzTgB5X,EA6TpCue,qBAA8C,SAAClZ,GAAM,IAAAqR,EACW1W,EAAKD,MAA3D6X,EAD2ClB,EAC3CkB,SAAU4G,EADiC9H,EACjC8H,OAAQC,EADyB/H,EACzB+H,eAAgBC,EADShI,EACTgI,gBADS1D,EAEdhb,EAAKI,MAAlCue,EAF2C3D,EAE3C2D,QAASC,EAFkC5D,EAElC4D,gBAEjB,GAAKD,EAGL,OAAQtZ,EAAEtE,KACR,IAAK,SACL,IAAK,YACC6d,GACF5e,EAAKie,aAAaW,EAAgBrW,MAAQqP,GAE5C,MACF,IAAK,KACEvS,EAAEwZ,SAAWxZ,EAAEyZ,UAAYN,GAC9BA,IAEF,MACF,IAAK,KACEnZ,EAAEwZ,SAAWxZ,EAAEyZ,UAAYF,EAAgBrW,MAAQkW,GACtDA,IAEF,MACF,IAAK,KACEpZ,EAAEwZ,SAAWxZ,EAAEyZ,UAAYF,EAAgBrW,MAAQmW,GACtDA,MAvV4B1e,EA+VpC+e,mBAAqB,SAAC1G,GAAM,IAAA2G,EACC3G,EAAElX,OAAO8d,QAA5B9R,EADkB6R,EAClB7R,OAAQhM,EADU6d,EACV7d,OACZgZ,EAAW,CACb+E,YAAY,EACZP,SAAS,GAEX,GAAIxR,GAAUhM,EAAQ,CAGpB,IAF2BnB,EAAKmf,sBAAsBhS,EAAQhM,GAG5D,OAEF,IAAM8L,EAAoBjN,EAAKmf,sBAAsBhS,EAAQhM,GAAc8L,iBAChDjN,EAAKI,MAAMgf,iBAAmBpf,EAAKI,MAAMgf,gBAAgB3U,KACpF0P,EAAQhc,OAAAmY,EAAA,EAAAnY,CAAA,GACHgc,EADG,CAENiF,gBAAiB,CACfC,mBAAmB,EACnB5U,KAAMzK,EAAKI,MAAMgN,MAAMH,MAG3BjN,EAAKkB,SAASiZ,GACdna,EAAKD,MAAMuf,aAAatf,EAAKI,MAAMgN,MAAMH,SAEzCjN,EAAKkB,SAASiZ,IAvXkBna,EA2XpCuf,iBAAmB,SAACla,EAAQqD,GAC1B,GAAI1I,EAAKwf,aAAa5N,KAASzQ,QAC7BnB,EAAK+e,mBAAmBnN,WAI1B,GAAI5R,EAAKI,MAAMqf,cACbzf,EAAKkB,SAAS,CACZyd,SAAS,EACTc,eAAe,EACfP,YAAY,QAET,CACL,IAAMQ,EAAqB1f,EAAKI,MAAMwe,iBAAmB5e,EAAKI,MAAMwe,gBAAgBrW,MAAS,KAC7DvI,EAAKI,MAAMwe,iBAAmB5e,EAAKI,MAAMwe,gBAAgBnX,MAazF,GAVAzH,EAAKkB,SAAS,CACZ0d,gBAAiB,KACjBD,SAAS,EACTO,YAAY,IAEdlf,EAAKD,MAAM4f,aAAa,MACpBD,GACF1f,EAAK4f,eAAeF,IAGjB1f,EAAKD,MAAMqe,UAAYxM,KAASqI,SAAU,CAC7C,IAAM4F,EAAWjO,KAASA,KAASzQ,QACnCnB,EAAKD,MAAM+f,aAAaD,EAAS,GAAIA,EAAS,GAAIjO,SAxZpB5R,EA6ZpC+f,oBAAsB,SAAC9e,GAEjBA,GACFA,EAAME,QAC0B,MAAhCF,EAAME,OAAO6e,iBACb/e,EAAME,OAAO6e,kBAAoBhgB,EAAKigB,SAAStF,SAIjD3a,EAAKkB,SAAS,CACZgf,iBAAiB,EACjBvB,SAAS,EACTO,YAAY,KAzaoBlf,EAibpCmgB,eAAiB,SAACvX,EAAkBsB,EAAgB+P,GAAsB,IAAAvC,EAC3B1X,EAAKD,MAAjCqgB,GADuD1I,EAChEjO,QADgEiO,EACvD0I,eAAehC,EADwC1G,EACxC0G,SAC1BiC,EAAmCrgB,EAAKsgB,YAAYpW,GAC1D,GAAKmW,EAAL,CAGA,IAAM9X,EAAO8X,EAAY9X,MAIX,IAAI6U,IACVmD,mBAAmBhY,EAAK8Q,SAAUzQ,EAASrD,EAAGqD,EAASpD,GAE3D4Y,IAGCnE,GAAaja,EAAKI,MAAMogB,cAQjBJ,GAAiBA,EAAclW,IAAYlK,EAAKI,MAAMogB,gBAEhExgB,EAAKygB,eAAe,CAAEtT,OAAQjD,EAAQwW,eAAgB9X,IACtD5I,EAAKkB,SAAS,CAAEsf,cAAc,MAT9BjY,EAAKhD,EAAIqD,EAASrD,EAClBgD,EAAK/C,EAAIoD,EAASpD,EAGlBxF,EAAK2gB,6BAA6BN,GAAa,GAC/CrgB,EAAK4gB,gBAAgBrY,OAxcWvI,EAogBpC6gB,iBAAmB,SAACjY,EAAesB,EAAgB+P,GAAsB,IAAA0C,EACpC3c,EAAKD,MAAhC+gB,EAD+DnE,EAC/DmE,aAER,IAHuEnE,EACjDyB,SAEtB,CAMA,GAAInE,EACFja,EAAK+gB,oBACA,CACL,IAAMC,EAAUhhB,EAAKsgB,YAAYpW,GAE7B8W,IACF7iB,OAAOmc,OAAO0G,EAAQzY,KAAMK,GAC5BkY,EAAaE,EAAQzY,OAIzBvI,EAAKkB,SAAS,CACZme,mBAAmB,EACnBV,SAAS,EAGTsC,aAAa,EACb/B,YAAY,MA9hBoBlf,EAkiBpCkhB,qBAAuB,SAACjgB,EAAY0O,EAAW2L,GAEzCA,IAAYtb,EAAKI,MAAM6gB,YACzBjhB,EAAKkB,SAAS,CACZ+f,aAAa,EACbE,gBAAiBxR,KAET2L,GAAWtb,EAAKI,MAAM6gB,aAAejhB,EAAKI,MAAMogB,aAC1DxgB,EAAKkB,SAAS,CACZkgB,YAAazR,IAGf3P,EAAKkB,SAAS,CACZ+f,aAAa,EACbE,gBAAiBxR,KAhjBa3P,EAqjBpCqhB,qBAAuB,SAACpgB,EAAY0O,GAElC,GAAe,MAAZiC,MAA0C,MAAtBA,KAAS0P,WAA8B,MAATrgB,GAAwC,MAAvBA,EAAMsgB,iBAIzE3P,MAAYA,KAAS0P,WAAazU,GAAWkB,WAAW6D,KAAS0P,UAAW,UAC5ErgB,GAASA,EAAMsgB,eAAiB1U,GAAWkB,WAAW9M,EAAMsgB,cAAe,UAC3E3P,MAAiC,IAArBA,KAASoI,SACrB/Y,GAA2B,IAAlBA,EAAM+Y,UAKd/Y,GAASA,EAAMsgB,cAAe,CAChC,GAAItgB,EAAMsgB,cAAcC,UAAUC,SAAS,qBACzC,OAEFzhB,EAAKkB,SAAS,CAAE+f,aAAa,EAAOG,YAAa,SAvkBjBphB,EA2kBpC0hB,mBAAqB,SAACnZ,EAAa2B,EAAgByX,GAEtB3hB,EAAKI,MAAMwe,iBAAmB5e,EAAKI,MAAMwe,gBAAgBrW,MACjCvI,EAAKI,MAAMwe,gBAAgBnX,MAD9E,IAEM0S,EAAW,CACfkF,mBAAmB,EACnBT,gBAAiB,CACf1U,SACA3B,SAGJvI,EAAKkB,SAASiZ,GAETwH,GACH3hB,EAAKD,MAAM4f,aAAapX,IAzlBQvI,EA2oBpC4hB,gBAAkB,WAGhB,IAAM7H,EAAcnI,KAASmI,YAE7B,GAEE/Z,EAAKD,MAAMqe,WAEVrE,GAEAA,IAAgBA,EAAYC,SAE5BD,IAAgBA,EAAY5Y,OAAOqgB,UAAUC,SAAS,qBAEvD,OAAO,EAfa,IAoBhBI,EADa9H,EAAX5Y,OACcvB,GAChB6K,EAAOzK,EAAKI,MAAM2d,UAAY/d,EAAKI,MAAM2d,SAAS8D,GAAU7hB,EAAKI,MAAM2d,SAAS8D,GAAQpX,KAAO,KAGrG,IAAKzK,EAAK8hB,eAAerX,KAAUA,EACjC,OAAO,EAETzK,EAAKge,kBAAkBvT,EAAK0C,OAAQ1C,EAAKtJ,QACzCnB,EAAKkB,SAAS,CAAEsf,cAAc,EAAMuB,YAAatX,IACjDzK,EAAKgiB,SAASvX,IAxqBoBzK,EA0sBpCiiB,WAAa,WAAM,IAAApG,EACkC7b,EAAKI,MAAhDogB,EADS3E,EACT2E,aACFlf,GAFWua,EACKkG,YADLlG,EACkBoF,YACDrP,KAAStQ,WAE3C,GAAKkf,GAcE,GAAIA,EAET,OADAxgB,EAAKgiB,YACE,OAfPpQ,KAAU5R,EAAKkiB,MAAMC,KAAK,YAAa7gB,GAGnCtB,EAAKI,MAAMgiB,gBAAkB9gB,GAC/BtB,EAAKkB,SAAS,CACZkhB,cAAe9gB,EACfygB,YAAa,KACbvB,cAAc,GACb,WAEDxgB,EAAKqiB,yBAztBuBriB,EAkuBpCsiB,cAAgB,WAAM,IAAAxF,EACyC9c,EAAKI,MAA1DogB,EADY1D,EACZ0D,aAAcuB,EADFjF,EACEiF,YAAaX,EADftE,EACesE,YAE3B3X,GAHYqT,EAC4BiB,SAE5B/d,EAAKD,MAAjB0J,SACR,GAAK+W,GAAiBuB,EAAtB,CAaA,IAAMQ,EAAepkB,OAAAmY,EAAA,EAAAnY,CAAA,GAAQ6B,EAAKI,MAAM2hB,aAGxClV,GAAW2V,qBAAqB,yBAChCxiB,EAAKkB,SACH,CACE6gB,YAAa,KACbvB,cAAc,EACdS,aAAa,GAEf,WAEE,IAAMwB,EAAiBziB,EAAKsgB,YAAYyB,EAAY5U,QAC9CuV,EAAiB1iB,EAAKsgB,YAAYyB,EAAY5gB,QAGpD,GAAKshB,GAAmBC,EAAxB,CAGA,IAAM9S,EAAa6S,EAAela,KAEhC6Y,IACCphB,EAAKmf,sBAAsB4C,EAAY5U,OAAQiU,EAAY3X,KAC5DzJ,EAAK2iB,QAAQ/S,EAAYwR,EAAaW,IAGtCQ,EAAgBphB,OAASigB,EAAY3X,GACrCzJ,EAAKygB,eAAe8B,GACpBviB,EAAKD,MAAM6iB,WACTH,EAAela,KACf6Y,EACAW,IAIF/hB,EAAKygB,eAAesB,WA/CpBvB,IAAiBuB,GAGnB/hB,EAAKkB,SAAS,CACZsf,cAAc,KA3uBcxgB,EA6xBpC6iB,gBAAkB,WAChB,IAAMC,EAASlR,KAAU5R,EAAK+iB,YAAYpI,SAASpS,OAC7Cya,EAAWpR,KAAU5R,EAAKgjB,UAAUza,OACpC0a,EAAWD,EAASE,QAAUF,EAASE,UAAY,KACzD,GAAKD,EAAL,CAEA,IAAMje,EAAQ8d,EAAOK,YACfle,EAAS6d,EAAOM,aAChB9K,EAAUtY,EAAKD,MAAMuY,SAAW,EAChCC,EAAUvY,EAAKD,MAAMwY,SAAW,EAEhC8K,EAAO,CACXC,GAAIhL,EAAUC,GAAW,EACzBhT,EAAG,EACHC,EAAG,GAGL,GAAIyd,EAASje,MAAQ,GAAKie,EAAShe,OAAS,EAAG,CAE7C,IAAM2G,EAAKqX,EAASje,MACd6G,EAAKoX,EAAShe,OACdM,EAAI0d,EAAS1d,EAAI0d,EAASje,MAAQ,EAClCQ,EAAIyd,EAASzd,EAAIyd,EAAShe,OAAS,EACzCoe,EAAKC,EAAI,GAAMla,KAAK2P,IAAInN,EAAK5G,EAAO6G,EAAK5G,GAErCoe,EAAKC,EAAIhL,EACX+K,EAAKC,EAAIhL,EACA+K,EAAKC,EAAI/K,IAClB8K,EAAKC,EAAI/K,GAGX8K,EAAK9d,EAAIP,EAAQ,EAAIqe,EAAKC,EAAI/d,EAC9B8d,EAAK7d,EAAIP,EAAS,EAAIoe,EAAKC,EAAI9d,EAGjCxF,EAAKujB,QAAQF,EAAKC,EAAGD,EAAK9d,EAAG8d,EAAK7d,EAAGxF,EAAKD,MAAMyjB,WAh0BdxjB,EAo0BpC6Y,WAAa,WAA2E,IAA1E4K,EAA0ExV,UAAAtF,OAAA,QAAA8H,IAAAxC,UAAA,GAAAA,UAAA,GAA3D,EAAGyV,EAAwDzV,UAAAtF,OAAA,QAAA8H,IAAAxC,UAAA,GAAAA,UAAA,GAAzC,EAAG0V,EAAsC1V,UAAAtF,OAAA,QAAA8H,IAAAxC,UAAA,GAAAA,UAAA,GAAvB,EAAG2V,EAAoB3V,UAAAtF,OAAA,QAAA8H,IAAAxC,UAAA,GAAAA,UAAA,GAAN,EAC1E6U,EAASlR,KAAU5R,EAAK+iB,YAAYpI,SAASpS,OAC7C4L,EACD2O,EAAOK,YAAc,EADpBhP,EAED2O,EAAOM,aAAe,EAErBS,EAAS7jB,EAAKoY,KAAK0L,cACnB1B,EAAqBpiB,EAAKI,MAAMgiB,cAEhCiB,EAAO,CACXC,EAAGlB,EAAckB,EACjB/d,EAAG6c,EAAc7c,EACjBC,EAAG4c,EAAc5c,GAGbue,EAAaV,EAAKC,GAAK,EAAIG,GAGjC,GAFAJ,EAAKC,EAAIS,EAELA,EAAaF,EAAO,IAAME,EAAaF,EAAO,GAChD,OAAO,EAGT,IAAMG,GACA7P,EAAWkP,EAAK9d,GAAK8d,EAAKC,EAD1BU,GAEA7P,EAAWkP,EAAK7d,GAAK6d,EAAKC,EAG1BW,EACDD,EAAeX,EAAKC,EAAID,EAAK9d,EAD5B0e,EAEDD,EAAeX,EAAKC,EAAID,EAAK7d,EAMlC,OAHA6d,EAAK9d,GAAK4O,EAAW8P,EAAMP,EAC3BL,EAAK7d,GAAK2O,EAAW8P,EAAMN,EAC3B3jB,EAAKujB,QAAQF,EAAKC,EAAGD,EAAK9d,EAAG8d,EAAK7d,EAAGoe,IAC9B,GAv2B2B5jB,EA+3BpCkkB,iBAAmB,WAAM,IAAAnH,EACkC/c,EAAKD,MAAtD+K,EADeiS,EACfjS,SAAUC,EADKgS,EACLhS,iBAAkBmZ,EADbnH,EACamH,iBACpC,OAAIA,EACKA,EAAiBpZ,GAEjB3G,EAAA,cAACggB,GAAD,CAAYrZ,SAAUA,EAAUC,iBAAkBA,KAp4BzB/K,EAw4BpCokB,iBAAmB,SAACxkB,EAAY2I,GAAgB,IAAA8b,EACqCrkB,EAAKD,MAAhF6E,EADsCyf,EACtCzf,UAAWyH,EAD2BgY,EAC3BhY,aAAc1C,EADa0a,EACb1a,SAAUiS,EADGyI,EACHzI,WAAYgB,EADTyH,EACSzH,eAAgBnT,EADzB4a,EACyB5a,QACvE,OACEtF,EAAA,cAACmgB,GAAD,CACEvjB,IAAKnB,EACLA,GAAIA,EACJ+P,KAAMpH,EACN3D,UAAWA,EACX+E,SAAUA,EACVF,QAASA,EACT4C,aAAcA,EACdkP,iBAAkBvb,EAAKkhB,qBACvBzF,iBAAkBzb,EAAKqhB,qBACvB7G,WAAYxa,EAAKmgB,eACjBhF,aAAcnb,EAAK6gB,iBACnBzF,eAAgBpb,EAAK0hB,mBACrB9F,WAAYA,EACZgB,eAAgBA,EAChBjV,WAAY3H,EAAKI,MAAMwe,gBAAgBrW,OAASA,EAChD2R,aAAcla,EAAKka,aACnBzH,gBAAiBzS,EAAK+iB,YAAYpI,WA55BJ3a,EAq9BpCukB,YAAc,WACPvkB,EAAKgjB,UAIVhjB,EAAKI,MAAMoI,MAAMyB,QAAQ,SAAC1B,EAAMG,GAC9B1I,EAAK4gB,gBAAgBrY,MA39BWvI,EA+9BpCwkB,eAAiB,SAAC/Z,GAChB,QAASzK,EAAKI,MAAMgf,mBAChBpf,EAAKI,MAAMgf,gBAAgB3U,MAC7BzK,EAAKI,MAAMgf,gBAAgB3U,KAAK0C,SAAW1C,EAAK0C,QAChDnN,EAAKI,MAAMgf,gBAAgB3U,KAAKtJ,SAAWsJ,EAAKtJ,QAn+BhBnB,EAs+BpCykB,iBAAmB,SAACha,GAClB,IAAMia,EAAoB1kB,EAAKsgB,YAAY7V,EAAK0C,QAC1CyC,EAAa8U,EAAoBA,EAAkBnc,KAAO,KAC1Doc,EAAoB3kB,EAAKsgB,YAAY7V,EAAKtJ,QAC1C0O,EAAa8U,EAAoBA,EAAkBpc,KAAO,KAC1DmY,EAAiBjW,EAAKiW,eALYkE,EAMgB5kB,EAAKD,MAArD8E,EANgC+f,EAMhC/f,UAAWyL,EANqBsU,EAMrBtU,eAAgB3G,EANKib,EAMLjb,SAAUF,EANLmb,EAMKnb,QAE7C,OACEtF,EAAA,cAAC0gB,GAAD,CACElV,KAAMlF,EACN5F,UAAWA,EACXyL,eAAgBA,EAChB3G,SAAUA,EACViG,WAAYA,EACZC,WAAYA,GAAc6Q,EAC1BjX,QAASA,EACTgJ,gBAAiBzS,EAAK+iB,YAAYpI,QAClChT,WAAY3H,EAAKwkB,eAAe/Z,MAx/BFzK,EA8/BpC8kB,WAAa,SAACllB,EAAYgO,EAAcnD,GAA6C,IAAhCsa,EAAgC9W,UAAAtF,OAAA,QAAA8H,IAAAxC,UAAA,IAAAA,UAAA,GACnF,IAAKjO,EAAKgjB,SACR,OAAO,KAET,IAAIgC,EAAW,GAAA5a,OAAMxK,EAAN,cACTqlB,EAAiB,GAAA7a,OAAMxK,EAAN,qBACfmiB,EAAgB/hB,EAAKI,MAArB2hB,YACAmD,EAAoBllB,EAAKD,MAAzBmlB,gBACJC,EAAgB3X,SAASC,eAAeuX,GAC5C,GAAID,GAAcI,EAChBA,EAAcpd,MAAMqd,QAAU,OAC9BJ,EAAW,GAAA5a,OAAMxK,EAAN,qBACXulB,EAAgB3X,SAASC,eAAeuX,QACnC,GAAIG,EAAe,CACxB,IAAME,EAAkB7X,SAASC,eAAewX,GAChDE,EAAcpd,MAAMqd,QAAU,GAC1BC,GACFA,EAAgBC,SAGpB,IAAKH,GAAiB1a,IAASsX,EAAa,CAC1C,IAAMwD,EAAsB/X,SAASgY,gBAAgB,6BAA8B,KACnFD,EAAoB3lB,GAAKolB,EACzBhlB,EAAKgjB,SAASlI,YAAYyK,GAC1BJ,EAAgBI,EAIlB,OAAIJ,IACFM,IAASC,OAAO9X,EAASuX,GACrBD,GACKA,EAAgBtlB,EAAIgO,EAASnD,EAAM0a,EAAenlB,EAAKwkB,eAAe/Z,SAHjF,GA1hCkCzK,EAkiCpC2lB,gBAAkB,SAAClb,GAA6C,IAAhCsa,EAAgC9W,UAAAtF,OAAA,QAAA8H,IAAAxC,UAAA,IAAAA,UAAA,GAC9D,GAAKxD,EAAK0C,QAAW1C,EAAKtJ,OAA1B,CAGA,IAAMykB,EAAS,SAAAxb,OAAYK,EAAK0C,OAAjB,KAAA/C,OAA2BK,EAAKtJ,QAC/C0kB,qBAAqB7lB,EAAK8lB,aAAaF,IACvC5lB,EAAK8lB,aAAaF,GAAaG,sBAAsB,WACnD/lB,EAAKygB,eAAehW,EAAMsa,OAziCM/kB,EA2jCpCgmB,YAAc,WAAM,IAAAC,EACcjmB,EAAKI,MAA7BgN,EADU6Y,EACV7Y,MAAOoT,EADGyF,EACHzF,aACf,GAAKxgB,EAAKgjB,WAAYxC,EAGtB,IAAK,IAAI9X,EAAI,EAAGA,EAAI0E,EAAMzE,OAAQD,IAChC1I,EAAK2lB,gBAAgBvY,EAAM1E,KA9jC7B1I,EAAKkmB,aAAe,GACpBlmB,EAAK8lB,aAAe,GACpB9lB,EAAKmmB,mBAAqB,KAC1BnmB,EAAKomB,mBAAqB,KAC1BpmB,EAAK+iB,YAActf,cACnBzD,EAAKqmB,cAAgB5iB,cACrBzD,EAAKigB,SAAWxc,cAChBzD,EAAKU,QAAUV,EAAKD,MAAMW,QACtBX,EAAMumB,mBACRtmB,EAAKka,aAAe,IAAI5Q,GAAcvJ,EAAMumB,kBAAkBvmB,IAGhEC,EAAKI,MAAQ,CACXif,mBAAmB,EACnB0C,YAAa,KACbvB,cAAc,EACdY,YAAa,KACbhU,MAAO,GACP2Q,SAAU,GACVkD,aAAa,EACbE,gBAAiB,KACjB3Y,MAAO,GACPC,SAAU,GACV2W,gBAAiB,KACjBR,gBAAiB,KACjBa,eAAe,EACfS,iBAAiB,EACjBhB,YAAY,EACZP,SAAS,GA/BuB3e,6FAxDJkM,EAA4BC,GAA4B,IAC9EiB,EAAmBlB,EAAnBkB,MAAO3D,EAAYyC,EAAZzC,QACXjB,EAAQ0D,EAAU1D,MAChBC,EAAWoE,GAAW0Z,YAAY/d,EAAOiB,GACzCsU,EAAWlR,GAAW2Z,YAAYpZ,GACxCP,GAAW4Z,kBAAkBhe,EAAU2E,GAEvC,IAAMsZ,EACJxa,EAAU0L,UAAYnP,EAAQ,OAAA2B,OAAQ8B,EAAU0L,SAASnO,KACrDhB,EAAQ,OAAA2B,OAAQ8B,EAAU0L,SAASnO,KACnC,KACAkd,EACJza,EAAU0L,UAAYmG,EAAQ,GAAA3T,OAAI8B,EAAU0L,SAASzK,OAAvB,KAAA/C,OAAiC8B,EAAU0L,SAASzW,SAC9E4c,EAAQ,GAAA3T,OAAI8B,EAAU0L,SAASzK,OAAvB,KAAA/C,OAAiC8B,EAAU0L,SAASzW,SAC5D,KAGyB,IAA3BgL,EAAU3D,MAAMG,QAAgBuD,EAAUoa,kBAAoBhd,GAAc4C,EAAUoa,oBAGxF9d,EAFqB,IAAIc,GAAc4C,EAAUoa,kBAAkBpa,GACrC0a,YAAYpe,EAAOC,IAqBnD,MAjBkB,CAChB4W,mBAAmB,EACnBjS,QACA2Q,WACAvV,QACAC,WACA2V,SAAUlS,EAAUkS,SACpBgB,gBAAiB,CACf3U,KAAMkc,EAAkBA,EAAgBlc,KAAO,MAEjDmU,gBAAiB,CACf1U,OAAQwc,EAAkBxa,EAAU0L,SAASnO,GAAW,KACxDlB,KAAMme,EAAkBA,EAAgBne,KAAO,MAEjDse,kBAAkB,gEAsDF,IAAAtlB,EAAAlD,KAElBmP,SAASsZ,iBAAiB,UAAWzoB,KAAKkgB,sBAC1C/Q,SAASsZ,iBAAiB,QAASzoB,KAAK0hB,qBAExC1hB,KAAK+Z,KAAOxG,OAETmV,OAAO1oB,KAAK2oB,YACZlD,YAAY,CAACzlB,KAAK0B,MAAMuY,SAAW,EAAGja,KAAK0B,MAAMwY,SAAW,IAC5DoD,GAAG,QAAStd,KAAKujB,iBACjBjG,GAAG,OAAQtd,KAAK4jB,YAChBtG,GAAG,MAAOtd,KAAKikB,eAElB1Q,KACUvT,KAAK0kB,YAAYpI,SACxBgB,GAAG,aAActd,KAAK4oB,aACtBtL,GAAG,YAAatd,KAAK4oB,aACrBtL,GAAG,QAAStd,KAAKkhB,kBACjB3X,OAAO,OACPzH,KAAK9B,KAAK+Z,MAEb/Z,KAAK6oB,aAAetV,KAAUvT,KAAK6jB,MAInC7jB,KAAK8oB,aAELjY,WAAW,WACe,MAApB3N,EAAKwhB,aACPxhB,EAAKshB,mBAENxkB,KAAK0B,MAAMqnB,0DAId5Z,SAAS6Z,oBAAoB,UAAWhpB,KAAKkgB,sBAC7C/Q,SAAS6Z,oBAAoB,QAAShpB,KAAK0hB,mEAGvB7T,EAA4Bob,GAChD,OACEpb,EAAU1D,QAAUnK,KAAK0B,MAAMyI,OAC/B0D,EAAUkB,QAAU/O,KAAK0B,MAAMqN,QAC9Bka,EAAUjI,mBACXnT,EAAU0L,WAAavZ,KAAK0B,MAAM6X,UAClC1L,EAAUkS,WAAa/f,KAAK0B,MAAMqe,UAClClS,EAAUoa,mBAAqBjoB,KAAK0B,MAAMumB,4DAO3BiB,EAA4Bpb,GAA4B,IAAAqb,EACDnpB,KAAK+B,MAArEqI,EADiE+e,EACjE/e,SAAUsV,EADuDyJ,EACvDzJ,SAAUvV,EAD6Cgf,EAC7Chf,MAAOoW,EADsC4I,EACtC5I,gBAAiBQ,EADqBoI,EACrBpI,gBAC5CkH,EAAqBjoB,KAAK0B,MAA1BumB,iBAER,GAAIA,GAAoBhd,GAAcgd,GAAmB,CACvDjoB,KAAK6b,aAAe,IAAI5Q,GAAcjL,KAAK0B,MAAMumB,kBAAkBjoB,KAAK0B,OACxE,IAAM0nB,EAAWppB,KAAK6b,aAAa0M,YAAYpe,EAAOC,GACtDpK,KAAK6C,SAAS,CACZsH,MAAOif,IAIX,IAAMC,EAAgBrpB,KAAK0B,MAAMyI,QAAU+e,EAAU/e,OAASnK,KAAK0B,MAAMqN,QAAUma,EAAUna,MAI7F/O,KAAKwf,eAAe1R,EAAUiB,MAAO2Q,GAGrC1f,KAAKspB,eAAexb,EAAU3D,MAAO2D,EAAU1D,SAAUA,GAGzDpK,KAAKupB,YAAYvpB,KAAK+B,MAAMoI,MAAO2D,EAAU1D,SAAUmW,EAAiBzS,EAAUyS,gBAAiB8I,GAGnGrpB,KAAKwpB,YAAYxpB,KAAK+B,MAAMgN,MAAOjB,EAAU4R,SAAUqB,EAAiBjT,EAAUiT,gBAAiBsI,GAEnGrpB,KAAK6C,SAAS,CACZme,mBAAmB,wCAIXzf,EAAmB6I,GAC7B,IAAMqf,EAAcrf,GAAYpK,KAAK+B,MAAMqI,SAC3C,OAAOqf,EAAcA,EAAW,OAAA1d,OAAQxK,GAAM,KAAQ,mDAGlCuN,EAAgBhM,GACpC,OAAO9C,KAAK+B,MAAM2d,SAAW1f,KAAK+B,MAAM2d,SAAX,GAAA3T,OAAuB+C,EAAvB,KAAA/C,OAAiCjJ,IAAY,sDAGnDgM,EAAgBhM,GACnC9C,KAAK+B,MAAM2d,UAAY1f,KAAK+B,MAAM2d,SAAX,GAAA3T,OAAuB+C,EAAvB,KAAA/C,OAAiCjJ,YACnD9C,KAAK+B,MAAM2d,SAAX,GAAA3T,OAAuB+C,EAAvB,KAAA/C,OAAiCjJ,wCAIhCqH,EAAgBuf,EAAkBC,EAAmBC,GAAqD,IAAAnmB,EAAAzD,KAA9B6pB,EAA8Bja,UAAAtF,OAAA,QAAA8H,IAAAxC,UAAA,IAAAA,UAAA,GACpH,IAAI5P,KAAK+B,MAAMogB,aAAf,CAGA,IAAM/W,EAAUpL,KAAK0B,MAAM0J,QACvBlB,EAAO,KACP4G,EAAW,KAEftC,GAAWsb,aAAa3f,EAAMG,OAAQ,GAAI,SAACD,GACzCH,EAAOC,EAAME,GAGG,OAFhByG,EAAWrN,EAAKwe,YAAY/X,EAAKkB,GAAUse,MAGzC5Y,EAAS5G,OAASA,GAGhByf,EAAazf,OAAS0f,EAAiB1f,OAEpCyf,EAAazf,MAAQA,EAAKkB,KAAaue,EAAazf,KAAKkB,IACzDwe,EAAiB1f,MAAQA,EAAKkB,KAAawe,EAAiB1f,KAAKkB,KAKtE3H,EAAK8e,gBAAgBrY,IACZ2f,GAAgB/Y,GAEzBrN,EAAK8e,gBAAgBrY,6CAKZ6f,EAAgBC,EAAmB5f,GAIhD,IAJ+D,IAAA7E,EAAAvF,KACzDoL,EAAUpL,KAAK0B,MAAM0J,QADoC6e,EAAA,SAItD5f,GACP,IACMwB,EADWke,EAAU1f,GACHe,GAGxB,GAAI7F,EAAK0c,YAAYpW,EAAQzB,GAC3B,iBAGF,IAAM8f,EAAkB3kB,EAAK0c,YAAYpW,EAAQme,GAEjDE,EAAgBhe,cAAcN,QAAQ,SAACQ,GACrC7G,EAAKoa,kBAAkBvT,EAAK0C,OAAQ1C,EAAKtJ,UAI3ConB,EAAgBje,cAAcL,QAAQ,SAACQ,GACrC7G,EAAKoa,kBAAkBvT,EAAK0C,OAAQ1C,EAAKtJ,UAK3C+N,WAAW,WACTrC,GAAW2V,qBAAX,QAAApY,OAAwCF,EAAxC,kBAvBKxB,EAAI,EAAGA,EAAI0f,EAAUzf,OAAQD,IAAI4f,EAAjC5f,uCA4BC0E,EAAgBob,EAAkBC,EAAmBC,GAAqD,IAA9BR,EAA8Bja,UAAAtF,OAAA,QAAA8H,IAAAxC,UAAA,IAAAA,UAAA,GACpH,IAAK5P,KAAK+B,MAAMogB,aAEd,IADA,IAAI/V,EAAO,KACF/B,EAAI,EAAGA,EAAI0E,EAAMzE,OAAQD,IAEhC,IADA+B,EAAO2C,EAAM1E,IACHyE,QAAW1C,EAAKtJ,OAA1B,CAGA,IAAMwnB,EAAWH,EAAW,GAAApe,OAAIK,EAAK0C,OAAT,KAAA/C,OAAmBK,EAAKtJ,UAChD+mB,IACDS,GAECF,IAAiBC,IAEdD,EAAahe,MAAQA,IAASge,EAAahe,MAC3Cie,EAAiBje,MAAQie,EAAiBje,QAK/CpM,KAAKsnB,gBAAgBlb,8CAsBX0C,EAAgBhM,GAChC,IAAMvB,EAAE,GAAAwK,OAAM+C,EAAN,KAAA/C,OAAgBjJ,GACxB0L,GAAW2V,qBAAX,QAAApY,OAAwCxK,EAAxC,+CAGMgQ,EAAmBqR,EAA2B2H,GACpD,OACE3H,GACArR,IAAeqR,IACd2H,EAASzb,SAAWyC,EAAWvR,KAAK0B,MAAM0J,UACzCmf,EAASznB,SAAW8f,EAAY5iB,KAAK0B,MAAM0J,6CAItCue,GAAqB,IACtBve,EAAYpL,KAAK0B,MAAjB0J,QACAjB,EAAUnK,KAAK+B,MAAfoI,MACF0B,EAAS8d,EAAave,GAGtBof,EAAcrgB,EAAMue,OAAO,SAAAxe,GAAI,OAAIA,EAAKkB,KAAaS,IAC3D7L,KAAK6C,SAAS,CACZme,mBAAmB,EACnB4B,aAAa,IAIfpU,GAAW2V,qBAAX,QAAApY,OAAwCF,EAAxC,eAGA7L,KAAK0B,MAAM4f,aAAa,MACxBthB,KAAK0B,MAAM+oB,aAAad,EAAc9d,EAAQ2e,sCAGrCJ,GAAqB,IACtBrb,EAAU/O,KAAK+B,MAAfgN,MACR,GAAKqb,EAAatb,QAAWsb,EAAatnB,OAA1C,CAGA,IAAI4nB,EAAc3b,EAAM2Z,OAAO,SAAAtc,GAC7B,QAASA,EAAK0C,SAAWsb,EAAatb,QAAU1C,EAAKtJ,SAAWsnB,EAAatnB,UAE3EsnB,EAAatb,QAAUsb,EAAatnB,QACtC9C,KAAK2qB,yBAAyBP,EAAatb,OAAQsb,EAAatnB,QAGlE9C,KAAK6C,SAAS,CACZme,mBAAmB,EACnBjS,MAAO2b,IAILN,EAAatb,QAAUsb,EAAatnB,SAEtC0L,GAAW2V,qBAAX,QAAApY,OAAwCqe,EAAatb,OAArD,KAAA/C,OAA+Dqe,EAAatnB,OAA5E,sBACA0L,GAAW2V,qBAAX,QAAApY,OAAwCqe,EAAatb,OAArD,KAAA/C,OAA+Dqe,EAAatnB,OAA5E,gBAIF9C,KAAK0B,MAAMkpB,aAAaR,EAAcM,yCAiI3Bnb,GACX,QAASf,GAAWkB,WAAWH,EAAS,2DAkC1B,IAAAsb,EAAA7qB,KAAA8qB,EACmC9qB,KAAK0B,MAA9CqgB,EADM+I,EACN/I,cAAe3W,EADT0f,EACS1f,QAAS2f,EADlBD,EACkBC,aADlBC,EAEqChrB,KAAK+B,MAAhD2d,EAFMsL,EAENtL,SAAUqD,EAFJiI,EAEIjI,YAAaD,EAFjBkI,EAEiBlI,gBAC/B,GAAKA,IAGLtU,GAAW2V,qBAAqB,yBAC5BpB,GAAa,CACf,IAAMkI,EAAM,GAAAlf,OAAM+W,EAAgB1X,GAAtB,KAAAW,OAAkCgX,EAAY3X,IACpD8f,EAAM,GAAAnf,OAAMgX,EAAY3X,GAAlB,KAAAW,OAA8B+W,EAAgB1X,IAExDsU,GACAoD,IAAoBC,GACpBhB,GACAA,EAAce,EAAiBC,KAC9BrD,EAASuL,KACTvL,EAASwL,GAGVlrB,KAAKqC,QAAQ8oB,cAAcrI,EAAgB9H,SAAU+H,EAAY/H,UAAUja,KAAK,SAAAC,GAC9E,IAA+B,IAA5BqP,QAAQrP,EAAS2B,OAAgB,CAClC,IAAMyJ,EAAc,CAClB0C,OAAQgU,EAAgB1X,GACxBtI,OAAQigB,EAAY3X,IAEtByf,EAAKhoB,SAAS,CACZme,mBAAmB,EACnB0C,YAAa,KACbvB,cAAc,IAIhB0I,EAAKzI,eAAehW,GACpBye,EAAKtJ,eAAewB,GAEpBgI,EAAajI,EAAiBC,QAE9BzhB,MAAM,8CAAgDwhB,EAAgB9H,SAASxX,SAASvB,cAAgB,OAAS8gB,EAAY/H,SAASxX,SAASvB,iBAOnJjC,KAAK6C,SAAS,CACZkgB,YAAa,KACbZ,cAAc,4CAkGP/V,GAAoB,IAAAgf,EACGprB,KAAK0B,MAAvBkL,GADewe,EACzB9f,SADyB8f,EACfxe,eACZye,EAAc9X,KAASmI,YAAY5Y,OACnCwR,EAAY1H,GAAiB,EACnC,IAAKR,GAAgC,SAAxBif,EAAYC,QACvB,OAAO,EAGT,IAAM9J,EAAWjO,KAAS8X,GAC1B,IAAKjf,EAAKtJ,OACR,OAAO,EAEiB9C,KAAKiiB,YAAY7V,EAAKtJ,QAAhD,IACMgM,EACD0S,EAAS,GADR1S,EAED0S,EAAS,GAER+J,EAAana,GAAKoa,cAAcpa,GAAKqa,mBAAmBrf,EAAMpM,KAAK0kB,YAAYpI,UAGrF,OACExN,EAAWyc,EAAWzoB,OAAOoE,EAAIoN,GACjCxF,EAAWyc,EAAWzoB,OAAOoE,EAAIoN,GACjCxF,EAAWyc,EAAWzoB,OAAOqE,EAAImN,GACjCxF,EAAWyc,EAAWzoB,OAAOqE,EAAImN,uCAKnC,OAAIf,KAASmY,SAAUnY,KAASkN,+CAQnBlN,KAASmY,QAAUnY,KAASkN,UAEvClN,KAASoY,yEAqCX,IAAIC,EAAmB,CAAC,EAAG,GAI3B,OAHI5rB,KAAK6oB,eACP+C,EAAmBrY,KAASvT,KAAK6oB,aAAa3e,SAEzC0hB,mCAGAlI,GAAqB,IAAAmI,EACE7rB,KAAK0B,MAA3B4J,EADoBugB,EACpBvgB,SAAUF,EADUygB,EACVzgB,QAElB,GADAsY,EAAcA,GAAe1jB,KAAK+B,MAAM2hB,YACxC,CAIA,IAAMkI,EAAmB5rB,KAAK8rB,sBACxBzJ,EAAiB,CACrBnb,EAAG0kB,EAAiB,GACpBzkB,EAAGykB,EAAiB,IAEhB5P,EAAM5K,GAAKmH,gBAAgBjN,EAAWtL,KAAKiiB,YAAYyB,EAAY5U,QAAc5E,KAAMmY,EAAgBjX,GAC7GiX,EAAenb,GAAK8U,EAAIlI,KACxBuO,EAAelb,GAAK6U,EAAIjI,KACxB/T,KAAKoiB,eAAe,CAAEtT,OAAQ4U,EAAY5U,OAAQuT,mBAClDriB,KAAK6C,SAAS,CACZ6gB,cACAvB,cAAc,uCAsKoD,IAA9D8C,EAA8DrV,UAAAtF,OAAA,QAAA8H,IAAAxC,UAAA,GAAAA,UAAA,GAAlD,EAAG1I,EAA+C0I,UAAAtF,OAAA,QAAA8H,IAAAxC,UAAA,GAAAA,UAAA,GAAnC,EAAGzI,EAAgCyI,UAAAtF,OAAA,QAAA8H,IAAAxC,UAAA,GAAAA,UAAA,GAApB,EAAG2V,EAAiB3V,UAAAtF,OAAA,QAAA8H,IAAAxC,UAAA,GAAAA,UAAA,GAAH,EAC3Dmc,EAAIxY,KAAgByY,UAAU9kB,EAAGC,GAAG8kB,MAAMhH,GAEhD1R,KACUvT,KAAK0kB,YAAYpI,SACxB/S,OAAO,OACP2iB,aACAC,SAAS5G,GACTzjB,KAAK9B,KAAK+Z,KAAK9W,UAAW8oB,wCAM7B/rB,KAAK6oB,aAAa/E,KAAK,YAAa9jB,KAAK+B,MAAMgiB,eAE/CqI,aAAapsB,KAAK8nB,oBAClB9nB,KAAK8nB,mBAAqBjX,WAAW7Q,KAAKkmB,gDAqCjC3kB,EAAYgO,GACrB,IAAKvP,KAAK2kB,SACR,OAAO,KAET,IAAMgC,EAAW,GAAA5a,OAAMxK,EAAN,cACb8qB,EAA8Cld,SAASC,eAAeuX,GAErE0F,KACHA,EAAgBld,SAASgY,gBAAgB,6BAA8B,MACzD5lB,GAAKolB,EACnB3mB,KAAK2kB,SAASlI,YAAY4P,IAK5B,IAAMC,EAAkB/c,EACxB6X,IAASC,OAAOiF,EAAYD,wDAGDniB,GAAiD,IAAAqiB,EAAAvsB,KAA7B0mB,EAA6B9W,UAAAtF,OAAA,QAAA8H,IAAAxC,UAAA,IAAAA,UAAA,GACxE5P,KAAK+B,MAAMogB,eAIfjY,EAAK+B,cAAcL,QAAQ,SAACQ,GAC1BmgB,EAAKjF,gBAAgBlb,EAAMsa,KAE7Bxc,EAAKgC,cAAcN,QAAQ,SAACQ,GAC1BmgB,EAAKjF,gBAAgBlb,EAAMsa,8CAIfxc,GAAa,IAAAsiB,EAAAxsB,KACrBoL,EAAUpL,KAAK0B,MAAM0J,QACrBmc,EAAS,SAAAxb,OAAY7B,EAAKkB,IAChCoc,qBAAqBxnB,KAAK6nB,aAAaN,IACvCvnB,KAAK6nB,aAAaN,GAAaG,sBAAsB,WACnD8E,EAAKjL,eAAerX,4CAITA,GACb,IAAMkB,EAAUpL,KAAK0B,MAAM0J,QACrB7J,EAAE,QAAAwK,OAAW7B,EAAKkB,IAClBmE,EAAevP,KAAK+lB,iBAAiBxkB,EAAI2I,GACzC8B,EAAehM,KAAKiiB,YAAY/X,EAAKkB,IAC3CpL,KAAKud,WAAWhc,EAAIgO,GAChBvD,GACFhM,KAAKsiB,6BAA6BtW,0CA6FvBI,GAAgD,IAA7Bsa,EAA6B9W,UAAAtF,OAAA,QAAA8H,IAAAxC,UAAA,IAAAA,UAAA,GAC7D,GAAKxD,EAAK0C,OAAV,CAKA,IAAM2d,EAAQrgB,EAAKtJ,OAAL,GAAAiJ,OAAiBK,EAAK0C,OAAtB,KAAA/C,OAAgCK,EAAKtJ,QAAW,SACxDvB,EAAE,QAAAwK,OAAW0gB,GACbld,EAAUvP,KAAKomB,iBAAiBha,GACtCpM,KAAKymB,WAAWllB,EAAIgO,EAASnD,EAAMsa,kDAqBnC,GAAK1mB,KAAK0B,MAAMgrB,mBAAsB1sB,KAAK0kB,YAA3C,CAIA,IAAMiI,EAAuB3sB,KAAK0kB,YAAYpI,QAAQ9I,cAAc,2BAChEmZ,GACFvF,IAASC,OACPvhB,EAAA,cAAC8mB,GAAD,CACE/S,IAAK7Z,KAAKgoB,cACV/N,QAASja,KAAK0B,MAAMuY,QACpBC,QAASla,KAAK0B,MAAMwY,QACpBK,UAAWva,KAAK+B,MAAMgiB,cAAgB/jB,KAAK+B,MAAMgiB,cAAckB,EAAI,EACnEpK,UAAW7a,KAAKwkB,gBAChBhK,WAAYxa,KAAKwa,aAEnBmS,qCAKG,IAAAE,EAAA7sB,KAAA8sB,EAC6F9sB,KAAK0B,MAAjGkL,EADDkgB,EACClgB,cAAehH,EADhBknB,EACgBlnB,YAAaC,EAD7BinB,EAC6BjnB,YAAaU,EAD1CumB,EAC0CvmB,UAAWyH,EADrD8e,EACqD9e,aAAcxH,EADnEsmB,EACmEtmB,UAAW+H,EAD9Eue,EAC8Eve,WACrF,OACEzI,EAAA,qBACEvG,UAAU,eACVsa,IAAK7Z,KAAK0kB,aAEV5e,EAAA,qBAAKvG,UAAU,QAAQsa,IAAK7Z,KAAK4hB,UAC/B9b,EAAA,cAACinB,GAAD,CACEngB,cAAeA,EACfhH,YAAaA,EACbC,YAAaA,EACbU,UAAWA,EACXyH,aAAcA,EACdxH,UAAWA,EACX+H,WAAYA,IAEdzI,EAAA,mBAAGvG,UAAU,OAAOsa,IAAK,SAACmT,GAAD,OAASH,EAAKhJ,KAAOmJ,IAC3ChtB,KAAK6lB,mBAEN/f,EAAA,mBAAGvG,UAAU,WAAWsa,IAAK,SAACmT,GAAD,OAASH,EAAKlI,SAAWqI,OAG1DlnB,EAAA,qBAAKvG,UAAU,mCAjsCC6F,aAAlBma,GACGrZ,aAAe,CACpB6b,cAAe,SAACkL,EAAkBC,GAAnB,OAAsC,GACrDpN,cAAe,kBAAM,GACrBD,cAAe,kBAAM,GACrBjT,cAAe,EACfhH,YAAa,GACbqiB,iBAAkB,OAClBkF,cAAe,EACfjT,QAAS,IACTD,QAAS,IACT3O,SAAU,IACVyU,UAAU,EACV2M,mBAAmB,EACnB3D,UAAW,IACX5D,QAAS,KAwrCE5F,oGC/vCM6N,eAEjB,SAAAA,EAAY1rB,GAAM,IAAAC,EAAA,OAAA7B,OAAAC,EAAA,EAAAD,CAAAE,KAAAotB,IACdzrB,EAAA7B,OAAA8B,EAAA,EAAA9B,CAAAE,KAAAF,OAAA+B,EAAA,EAAA/B,CAAAstB,GAAAtrB,KAAA9B,KAAM0B,KAEDK,MAAQ,CACTsrB,cAAc,EACd9T,cAAUnH,EACV+M,MAAO,GAGXxd,EAAKW,OAASZ,EAAMY,OACpBX,EAAK2rB,WAAa3rB,EAAK2rB,WAAW1pB,KAAhB9D,OAAA+I,EAAA,EAAA/I,QAAA+I,EAAA,EAAA/I,CAAA6B,KAClBA,EAAK4rB,QAAU7rB,EAAMud,WACrBtd,EAAK6rB,SAAW9rB,EAAM8rB,SACtB7rB,EAAKU,QAAU,IAAI0c,GACnBpd,EAAK8rB,eAAiB/rB,EAAM+rB,eAdd9rB,4EAkBd3B,KAAK6C,SAAS,SAAAiL,GAAS,MAAK,CACxBuf,cAAevf,EAAUuf,iDAK7BrtB,KAAKqC,QAAQqrB,aAAa1tB,KAAKutB,QAAQvS,SAAUhb,KAAKwtB,SAASxS,SAAUhb,KAAK+B,MAAMod,MAAOnf,KAAK+B,MAAMwX,UACtGvZ,KAAKytB,eAAeztB,KAAKutB,QAASvtB,KAAKwtB,SAAUxtB,KAAK+B,MAAMwX,SAAUvZ,KAAK+B,MAAMod,OACjFnf,KAAKsC,0CAGA,IAAAY,EAAAlD,KAEDoC,EAAYpC,KAAKwtB,SAASxS,SAASxX,SAAStB,SAASE,UAAUmC,IAAI,SAAC6a,GAAD,OAAcA,EAASuO,eAM9F,OACIvuB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACsuB,GAAA,EAAD,CAAatrB,OAAQtC,KAAKsC,QAA1B,iBACAlD,EAAAC,EAAAC,cAACuuB,GAAA,EAAD,KACIzuB,EAAAC,EAAAC,cAACwuB,GAAA,EAAD,KACI1uB,EAAAC,EAAAC,cAAC+E,EAAA,EAAD,CAAW0pB,KAAG,GACV3uB,EAAAC,EAAAC,cAACkG,EAAA,EAAD,CAAOwoB,IAAI,QAAQC,GAAI,GAAvB,UACA7uB,EAAAC,EAAAC,cAAC4uB,GAAA,EAAD,CAAKD,GAAI,IACL7uB,EAAAC,EAAAC,cAACmG,EAAA,EAAD,CAAON,KAAK,SAASgpB,QAAQ,SAASvd,IAAI,IAAI5O,KAAK,QAAQT,GAAG,QAAQyC,YAAY,gBAAgBrB,MAAO3C,KAAK+B,MAAMod,MAAOlb,SAAU,SAACrB,GAAD,OAAWM,EAAKL,SAAS,CAACsc,MAAOvc,EAAME,OAAOH,aAG3LvD,EAAAC,EAAAC,cAAC+E,EAAA,EAAD,CAAW0pB,KAAG,GACV3uB,EAAAC,EAAAC,cAACkG,EAAA,EAAD,CAAOwoB,IAAI,WAAWC,GAAI,GAA1B,yBACA7uB,EAAAC,EAAAC,cAAC4uB,GAAA,EAAD,CAAKD,GAAI,GACL7uB,EAAAC,EAAAC,cAAC8uB,GAAA,EAAD,CAAUxkB,OAAQ5J,KAAK+B,MAAMsrB,aAAc/qB,OAAQtC,KAAKstB,YACpDluB,EAAAC,EAAAC,cAAC+uB,GAAA,EAAD,CAAgBC,OAAK,GAChBtuB,KAAK+B,MAAMwX,SAAWvZ,KAAK+B,MAAMwX,SAAW,mBAEjDna,EAAAC,EAAAC,cAACivB,GAAA,EAAD,CAAchvB,UAAW,kBACrBH,EAAAC,EAAAC,cAACkvB,GAAA,EAAD,CAAcC,QAAM,GAApB,eACCrsB,EAAUmC,IAAI,SAAC6a,EAAUhW,GACtB,OAAOhK,EAAAC,EAAAC,cAACkvB,GAAA,EAAD,CAAc9rB,IAAK0G,EAAOzE,QAAS,kBAAMzB,EAAKL,SAAS,CAAC0W,SAAU6F,MAAaA,EAA/E,aAQnChgB,EAAAC,EAAAC,cAACovB,GAAA,EAAD,KACItvB,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQgvB,MAAM,UAAUhqB,QAAS3E,KAAK4uB,OAAOhrB,KAAK5D,MAAO6uB,UAAW7uB,KAAK+B,MAAMwX,WAAavZ,KAAK+B,MAAMod,OAAvG,WAA+H,IAC/H/f,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQgvB,MAAM,YAAYhqB,QAAS3E,KAAKsC,QAAxC,mBAtEqB8C,IAAMxF,WC2CzCkvB,GAAiB,CACrB/f,MAAO,GACP5E,MAAO,QAyDYsB,eAGnB,SAAAA,EAAY/J,GAAoB,IAAAC,EAAA,OAAA7B,OAAAC,EAAA,EAAAD,CAAAE,KAAAyL,IAC9B9J,EAAA7B,OAAA8B,EAAA,EAAA9B,CAAAE,KAAAF,OAAA+B,EAAA,EAAA/B,CAAA2L,GAAA3J,KAAA9B,KAAM0B,KAmHRqtB,YAAc,WACZ,IAAMC,EAAQrtB,EAAKI,MAAMitB,MACnBC,EA7KV,SAAwBC,GAatB,IAZA,IAAMD,EAA0B,CAC9BlgB,MAAO,GACP5E,MAAO,IAELhD,EAAI,EACJD,EAAI,EAEFioB,EAAWD,GAA0B,EAKlC7kB,EAAI,EAAGA,GAAK8kB,EAAU9kB,IACzBA,EAAI,KAAO,GACblD,IACAD,EAAI,GAEJA,IAEF+nB,EAAgB9kB,MAAMpB,KAAK,CACzBxH,GAAE,IAAAwK,OAAM1B,GACR2O,MAAK,QAAAjN,OAAU1B,GACflF,KAAMoB,EAAUwE,KAAKqkB,MAAM7oB,EAAU+D,OAASS,KAAKskB,WACnDnoB,EAAG,EAAI,IAAMA,EACbC,EAAG,EAAI,IAAMA,IAIjB,IAAK,IAAIkD,EAAI,EAAGA,EAAI8kB,EAAU9kB,IAC5B4kB,EAAgBlgB,MAAMhG,KAAK,CACzB+F,OAAM,IAAA/C,OAAM1B,GACZvH,OAAM,IAAAiJ,OAAM1B,EAAI,GAChBlF,KAAMqB,EAAUuE,KAAKqkB,MAAM5oB,EAAU8D,OAASS,KAAKskB,aAGvD,OAAOJ,EAyImBK,CAAe3tB,EAAKI,MAAMmtB,YAClDF,EAAM7kB,MAAQ8kB,EAAgB9kB,MAC9B6kB,EAAMjgB,MAAQkgB,EAAgBlgB,MAC9BpN,EAAKkB,SAASlB,EAAKI,QAzHWJ,EA4HhC4tB,aAAe,WACb,IAAMP,EAAQrtB,EAAKI,MAAMitB,MAGzBA,EAAM7kB,MAAN,CACE,CACE5I,GAAIiuB,KAAKC,MACTzW,MAAO,SACP7T,KAAMiB,EACNc,EAAG,EACHC,EAAG,IANP4E,OAAAjM,OAAA4vB,EAAA,EAAA5vB,CAQK6B,EAAKI,MAAMitB,MAAM7kB,QAEtBxI,EAAKkB,SAAS,CACZmsB,WA3I4BrtB,EA+IhCguB,gBAAkB,WAChB,IAAMX,EAAQrtB,EAAKI,MAAMitB,MACzBA,EAAM7kB,MAAMylB,OAAO,EAAG,GAGtBZ,EAAM7kB,MAANrK,OAAA4vB,EAAA,EAAA5vB,CAAkB6B,EAAKI,MAAMitB,MAAM7kB,OACnCxI,EAAKkB,SAAS,CACZmsB,WAtJ4BrtB,EA0JhCkuB,aAAe,SAACjtB,GACdjB,EAAKkB,SACH,CACEqsB,WAAY/Q,SAASvb,EAAME,OAAOH,OAAS,IAAK,KAElDhB,EAAKotB,cA/JuBptB,EAyKhC8gB,aAAe,SAACqN,GACd,IAAMd,EAAQrtB,EAAKI,MAAMitB,MACnB3kB,EAAI1I,EAAKouB,aAAaD,GAE5Bd,EAAM7kB,MAAME,GAAKylB,EACjBnuB,EAAKkB,SAAS,CAAEmsB,WA9KcrtB,EAkLhC2f,aAAe,SAACwO,GAGRnuB,EAAKI,MAAMiuB,eAENruB,EAAKI,MAAMkuB,iBAAmBC,IAAuC,OAAbJ,GAC7DnuB,EAAKwuB,qBAAqBL,GAF1BnuB,EAAKkB,SAAS,CAAC0W,SAAUuW,KAtLDnuB,EA6LhCsf,aAAe,SAACmP,GACdzuB,EAAKkB,SAAS,CAAE0W,SAAU6W,KA9LIzuB,EAkMhC8f,aAAe,SAACva,EAAWC,GACzB,IAAM6nB,EAAQrtB,EAAKI,MAAMitB,MAOzB,GAA8B,MAA3BrtB,EAAKI,MAAMsuB,aAAd,CAGE,IAAMlrB,EAAOxD,EAAKI,MAAMsuB,aAAaxM,KACjCiM,EAAW,CACXvuB,GAAI,IAAIiuB,KACRxW,MAAOrX,EAAKI,MAAMsuB,aAAanuB,SAASC,WACxCgD,OACA+B,IACAC,KAKJ6nB,EAAM7kB,MAAN,GAAA4B,OAAAjM,OAAA4vB,EAAA,EAAA5vB,CAAkBkvB,EAAM7kB,OAAxB,CAA+B2lB,IAC/BnuB,EAAKkB,SAAS,CAAEmsB,UAEhBrtB,EAAKU,QAAQiuB,gBAAgB3uB,EAAKI,MAAMsuB,aAAcnpB,EAAGC,GAAGpG,KAAK,SAAAC,GAC/D8uB,EAAS9U,SAAWha,EACpBC,QAAQC,IAAIS,EAAKI,MAAMitB,SAGzBrtB,EAAK4uB,4BAhOuB5uB,EAqOhC8oB,aAAe,SAACqF,EAAiBjkB,EAAgB2kB,GAC/C,IAAMxB,EAAQrtB,EAAKI,MAAMitB,MAEnByB,EAAWzB,EAAMjgB,MAAM2Z,OAAO,SAACtc,EAAM/B,GACzC,OAAO+B,EAAK0C,SAAWghB,EAAS3pB,IAAaiG,EAAKtJ,SAAWgtB,EAAS3pB,KAExE6oB,EAAM7kB,MAAQqmB,EACdxB,EAAMjgB,MAAQ0hB,EAEd9uB,EAAKU,QAAQquB,mBAAmBZ,EAAS9U,SAASzZ,IAElDI,EAAKkB,SAAS,CAAEmsB,QAAOzV,SAAU,OAEjC5X,EAAK4uB,2BAlPyB5uB,EA+PhCopB,aAAe,SAAC4F,EAAuBC,GACrC,IAAM5B,EAAQrtB,EAAKI,MAAMitB,MAGnB7pB,EAAOwrB,EAAexrB,OAASiB,EAAeE,EAAoBD,EAElE+pB,EAAW,CACfthB,OAAQ6hB,EAAexqB,GACvBrD,OAAQ8tB,EAAezqB,GACvBhB,KAAKA,GAGPlE,QAAQC,IAAIL,KAAKC,UAAUsvB,IAE3BzuB,EAAK4rB,QAAUoD,EACfhvB,EAAK6rB,SAAWoD,EAIhBjvB,EAAKW,SACHX,EAAK4uB,0BAGDH,EAASthB,SAAWshB,EAASttB,SAC7BksB,EAAMjgB,MAAN,GAAAhD,OAAAjM,OAAA4vB,EAAA,EAAA5vB,CAAkBkvB,EAAMjgB,OAAxB,CAA+BqhB,IAG/BzuB,EAAKkB,SAAS,CACVmsB,QACAzV,SAAU6W,MA5RUzuB,EAmShC4iB,WAAa,SAACoM,EAAuBC,EAAuBR,GAC1D,IAAMpB,EAAQrtB,EAAKI,MAAMitB,MACnB3kB,EAAI1I,EAAKkvB,aAAaT,GACtBhkB,EAAOvL,KAAKiwB,MAAMjwB,KAAKC,UAAUkuB,EAAMjgB,MAAM1E,KAEnD+B,EAAK0C,OAAS6hB,EAAexqB,GAC7BiG,EAAKtJ,OAAS8tB,EAAezqB,GAC7B6oB,EAAMjgB,MAAM1E,GAAK+B,EAEjB4iB,EAAMjgB,MAANjP,OAAA4vB,EAAA,EAAA5vB,CAAkBkvB,EAAMjgB,OAExBpN,EAAKkB,SAAS,CACZmsB,QACAzV,SAAUnN,IAGZzK,EAAK4uB,2BAnTyB5uB,EAwThCipB,aAAe,SAACwF,EAAiBrhB,GAC/B,IAAMigB,EAAQrtB,EAAKI,MAAMitB,MACzBA,EAAMjgB,MAAQA,EAEdpN,EAAKU,QAAQ0uB,iBAAiBX,EAAS7uB,IACvCI,EAAKkB,SAAS,CACZmsB,QACAzV,SAAU,OAGZ5X,EAAK4uB,2BAlUyB5uB,EAqUhCwe,OAAS,WAEPlf,QAAQ+vB,KAAK,sDAvUiBrvB,EA8UhCye,eAAiB,WACf,GAAIze,EAAKI,MAAMwX,SAASzK,OACtB7N,QAAQ+vB,KAAK,iEADf,CAKA,IAAM9pB,EAAIvF,EAAKI,MAAMwX,SAASrS,EAAI,GAC5BC,EAAIxF,EAAKI,MAAMwX,SAASpS,EAAI,GAClCxF,EAAKkB,SAAS,CACZouB,WAAWnxB,OAAAmY,EAAA,EAAAnY,CAAA,GAAM6B,EAAKI,MAAMwX,SAAlB,CAA4BrS,IAAGC,UAvVbxF,EA2VhC0e,gBAAkB,WACX1e,EAAKI,MAAMkvB,YACdhwB,QAAQ+vB,KAAK,mGAGf,IAAMhC,EAAQrtB,EAAKI,MAAMitB,MACnBje,EAAOjR,OAAAmY,EAAA,EAAAnY,CAAA,GAAQ6B,EAAKI,MAAMkvB,WAAnB,CAA+B1vB,GAAIiuB,KAAKC,QACrDT,EAAM7kB,MAAN,GAAA4B,OAAAjM,OAAA4vB,EAAA,EAAA5vB,CAAkBkvB,EAAM7kB,OAAxB,CAA+B4G,IAC/BpP,EAAKuvB,eAnWyBvvB,EAsWhCwvB,6BAA+B,SAACvuB,GAC9BjB,EAAKkB,SAAS,CAAEolB,iBAAmBrlB,EAAME,OAAOH,SApW9ChB,EAAKI,MAAQ,CACTkvB,WAAY,KACZjC,MAAOF,GACP7G,sBAAkB7V,EAClBmH,SAAU,KACV2V,WAAYJ,GAAO3kB,MAAMG,OACzB+lB,aAAc3uB,EAAM2uB,aACpBe,cAAc,EACdpB,eAAgBtuB,EAAMsuB,eACtBC,eAAgBvuB,EAAMuuB,eACtBoB,sBAAuB,GACvBC,mBAAmB,GAEvB3vB,EAAK4d,UAAYna,cACjBzD,EAAKU,QAAU,IAAI0c,GACnBpd,EAAKW,OAASX,EAAKW,OAAOsB,KAAZ9D,OAAA+I,EAAA,EAAA/I,QAAA+I,EAAA,EAAA/I,CAAA6B,KACdA,EAAKwuB,qBAAuBzuB,EAAMyuB,qBAClCxuB,EAAK4uB,wBAA0B5uB,EAAKD,MAAM6uB,wBAE1C5uB,EAAK4vB,UAtBuB5vB,yFA0BJD,GACnBA,EAAMuuB,iBAAmBuB,IAAyBxxB,KAAK+B,MAAMuvB,mBAC5DtxB,KAAK6C,SAAS,CAACyuB,mBAAmB,IAEtCtxB,KAAK6C,SACD,CACIwtB,aAAc3uB,EAAM2uB,aACpBL,eAAgBtuB,EAAMsuB,eACtBC,eAAgBvuB,EAAMuuB,mDAMzB,IAAA/sB,EAAAlD,KACDgvB,EAAQhvB,KAAK+B,MAAMitB,MACvBA,EAAM7kB,MAAQ,GACdnK,KAAKqC,QAAQovB,mBAAmB1wB,KAAK,SAAA2wB,GACjCA,EAAc9lB,QAAQ,SAACoP,EAAU3Q,GAC7BpJ,QAAQC,IAAI,IAAKmJ,EAAI,KAAMxJ,KAAKC,UAAUka,IAC1C,IAAIzZ,EAAKyZ,EAASzZ,GACd2F,EAAI8T,EAAS2W,YACbxqB,EAAI6T,EAAS4W,YAKb9B,EAAW,CACXvuB,GAAIA,EACJyX,MANQgC,EAASxX,SAAStB,SAASC,WAOnCgD,KAL2C,oBAApC6V,EAASxX,SAASvB,cpBrInB,coBqIsEmE,EAM5Ec,IACAC,KAGJ2oB,EAAS9U,SAAWA,EACpBgU,EAAM7kB,MAAMpB,KAAK+mB,KAGrB5sB,EAAKb,QAAQwvB,iBAAiB9wB,KAAK,SAAA+wB,GAC/B9C,EAAMjgB,MAAQ+iB,EAAYpJ,OAAO,SAAAqJ,GAAU,OAA4B,OAAxBA,EAAWC,UAA2C,OAAtBD,EAAWE,SAAiB1tB,IAAI,SAAAwtB,GAC3G,IAAM5sB,EAA6C,UAAtC4sB,EAAWC,SAASxuB,SAASxB,KAAmBsE,EAAoBD,EAC7E,MAAO,CACHyI,OAAQijB,EAAWC,SAASzwB,GAC5BuB,OAAQivB,EAAWE,OAAO1wB,GAC1B4D,KAAMA,EACN0T,WAAYkZ,EAAW3S,SAASuO,aAChCpsB,GAAIwwB,EAAWxwB,MAI3B2B,EAAKL,SAAS,CAACmsB,cAOvBhvB,KAAKuwB,sEAMLvwB,KAAKuxB,+CAKEW,GACX,OAAOlyB,KAAK+B,MAAMitB,MAAM7kB,MAAMgoB,UAAU,SAACjoB,GACvC,OAAOA,EAAK/D,KAAc+rB,EAAW/rB,0CAK5BisB,GACX,OAAOpyB,KAAK+B,MAAMitB,MAAMjgB,MAAMojB,UAAU,SAAC/lB,GACvC,OAAOA,EAAK0C,SAAWsjB,EAAWtjB,QAAU1C,EAAKtJ,SAAWsvB,EAAWtvB,6CAK/DsI,GACV,IAAM8mB,EAAa,GACnBA,EAAW/rB,GAAYiF,EACvB,IAAMf,EAAIrK,KAAK+vB,aAAamC,GAC5B,OAAOlyB,KAAK+B,MAAMitB,MAAM7kB,MAAME,oCAuI1BrK,KAAK6C,SAAS,SAAAiL,GAAS,MAAK,CACxBsjB,cAAetjB,EAAUsjB,uDA0HlBtiB,EAAQhM,EAAQuvB,EAAoBlT,GACjD,IAAI6P,EAAQhvB,KAAK+B,MAAMitB,MAErBA,EAAMjgB,MAAQigB,EAAMjgB,MAAM2Z,OAAO,SAAAtc,GAAI,OAAKA,EAAKyM,aACzCzM,EAAKtJ,SAAWA,EAAOvB,IAAM6K,EAAKyM,aAAewZ,KAA0BjmB,EAAKyM,aAGtF,IAAIzP,EAAQ4lB,EAAMjgB,MAAMojB,UAAU,SAAA/lB,GAClC,OAAOA,EAAK0C,SAAWA,EAAOvN,IAAM6K,EAAKtJ,SAAWA,EAAOvB,KAG3DN,QAAQC,IAAI,mBAAqBL,KAAKC,UAAUkuB,EAAMjgB,QACtD9N,QAAQC,IAAI,UAAYL,KAAKC,UAAUgO,IACvC7N,QAAQC,IAAI,UAAYL,KAAKC,UAAUgC,IAEvC7B,QAAQC,IAAI,UAAYkI,GACxBnI,QAAQC,IAAI,wBAA0BmxB,GAErCjpB,GAAS,IAERnI,QAAQC,IAAIL,KAAKC,UAAUkuB,EAAMjgB,QAEjCigB,EAAMjgB,MAAM3F,GAAOyP,WAAawZ,EAChCryB,KAAK6C,SAAS,CAACmsB,MAAOA,KAG1BhvB,KAAKuwB,2DAMA,IAAA9sB,EAAAzD,KAAAsyB,EACkBtyB,KAAK+B,MAAMitB,MAA5B7kB,EADDmoB,EACCnoB,MAAO4E,EADRujB,EACQvjB,MACTwK,EAAWvZ,KAAK+B,MAAMwX,SACpBvR,EAAuCuqB,EAAvCvqB,UAAWF,EAA4ByqB,EAA5BzqB,aAAcL,EAAc8qB,EAAd9qB,UAEjC,OACE3B,EAAA,qBAAKvE,GAAG,SACNuE,EAAA,cAAC0sB,GAAD,CAEIjzB,UAAW,YACbsa,IAAK,SAACmT,GAAD,OAASvpB,EAAK8b,UAAYyN,GAC/B5hB,QAASjF,EACTgE,MAAOA,EACP4E,MAAOA,EACPwK,SAAUA,EACVhT,UAAWyB,EACXgG,aAAclG,EACdtB,UAAWiB,EACX6Z,aAActhB,KAAKshB,aACnBG,aAAczhB,KAAKyhB,aACnBgB,aAAcziB,KAAKyiB,aACnBgI,aAAczqB,KAAKyqB,aACnBxJ,aAAcjhB,KAAKihB,aACnB8J,aAAc/qB,KAAK+qB,aACnBxG,WAAYvkB,KAAKukB,WACjBqG,aAAc5qB,KAAK4qB,aACnBzK,OAAQngB,KAAKmgB,OACbC,eAAgBpgB,KAAKogB,eAAexc,KAAK5D,MACzCqgB,gBAAiBrgB,KAAKqgB,gBAAgBzc,KAAK5D,MAC3CioB,iBAAkBjoB,KAAK+B,MAAMkmB,iBAC3B5lB,QAASrC,KAAKqC,UAGhByD,EAAA,cAAC2D,EAAA,EAAD,CAAOG,OAAQ5J,KAAK+B,MAAMqvB,aAAc9uB,OAAQtC,KAAKsC,QAClDwD,EAAA,cAAC2sB,GAAD,CAAanwB,OAAQtC,KAAKsC,OAAQ2c,WAAYjf,KAAKutB,QAASC,SAAUxtB,KAAKwtB,SAAUC,eAAgBztB,KAAKytB,eAAe7pB,KAAK5D,iBAxbxGoF,kOCrGdstB,oLAGb,IAAMC,EAAc3yB,KAAK0B,MAAMixB,YAE/B,OACIvzB,EAAAC,EAAAC,cAAC6J,EAAA,EAAD,CAAW5J,UAAW,YAAaqzB,OAAK,GACnCD,EAAYpuB,IAAI,SAAAsuB,GAAU,OACvBzzB,EAAAC,EAAAC,cAAC+J,EAAA,EAAD,CAAe3G,IAAKmwB,EAAW7X,SAASzZ,GAAIhC,UAAW,cACpDH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,gBACfH,EAAAC,EAAAC,cAACwzB,GAAA,EAAD,OAEA1zB,EAAAC,EAAAC,cAACyzB,GAAA,EAAD,CAAsBxzB,UAAW,oBAC5BszB,EAAW7X,SAASxX,SAASxB,MAIlC5C,EAAAC,EAAAC,cAAA,aAAQuzB,EAAW7X,SAASzZ,eAjBP6D,IAAMxF,WCH9BozB,qMAGb,IAAIvyB,EAAMT,KAAKC,QAAU,4BAEzB,OAAOS,IAAMD,EAAK,CACdE,OAAQ,MACRT,QAASF,KAAKE,UACfa,KAAK,SAAAC,GAEJ,OADAC,QAAQC,IAAIF,GACLA,EAASG,SACjBJ,KAAK,SAAAH,GAEJ,OADAK,QAAQC,IAAIN,GACLA,IACRQ,MAAO,SAAAC,GAAM,OAAIC,MAAMD,6CAGdsxB,EAAaM,EAAWC,GACpC,IAAIzyB,EAAMT,KAAKC,QAAU,YAErBC,EAAUF,KAAKE,QAGnB,OAFAe,QAAQC,IAAIT,GAELC,IAAMD,EAAK,CACdE,OAAO,OACPC,KAAMC,KAAKC,UAAU,CACjB6xB,YAAaA,EACbM,UAAWA,EACXC,QAASA,IAEbhzB,QAASA,IACVa,KAAK,SAAAC,GAEJ,OADAC,QAAQC,IAAIF,GACLA,EAASG,SACjBJ,KAAK,SAAAH,GAEJ,OADAK,QAAQC,IAAIN,GACLA,IACRQ,MAAO,SAAAC,GAAM,OAAIC,MAAMD,YArCkBxB,OCuC9CszB,eAGF,SAAAA,EAAYzxB,GAAM,IAAAC,EAAA,OAAA7B,OAAAC,EAAA,EAAAD,CAAAE,KAAAmzB,IACdxxB,EAAA7B,OAAA8B,EAAA,EAAA9B,CAAAE,KAAAF,OAAA+B,EAAA,EAAA/B,CAAAqzB,GAAArxB,KAAA9B,KAAM0B,KAEDK,MAAQ,CACTqxB,WAAY,MAJFzxB,mFAQC,IAAAuB,EAAAlD,MACD,IAAI+e,IACVsU,gBAAgBtyB,KAAK,SAAAuyB,GACzB,IAAMF,EAAaE,EAAW/uB,IAAI,SAAAgvB,GAAS,MAAI,GAAKA,EAAUhyB,KAC9D2B,EAAKL,SAAS,CAACuwB,mDAKbI,GACN,OAAOA,EAAM,GAAGjvB,IAAI,SAACkvB,EAAKppB,GAAN,OAAYmpB,EAAMjvB,IAAI,SAAAwpB,GAAG,OAAIA,EAAI1jB,gDAGxCqpB,GAAK,IAAAjwB,EAAAzD,KACd2zB,EAAa,IAAIC,WAErBD,EAAWE,UAAY,WACnB,IAAIC,EAAUH,EAAWlmB,OACrBA,EAASsmB,KAAKjD,MAAMgD,GAGI,IAAzBrmB,EAAOumB,OAAO1pB,OACbhJ,MAAMmM,EAAOumB,OAAOzvB,IAAI,SAAA0vB,GAAG,MAAI,aAAeA,EAAIC,QAAW,WAAaD,EAAIlG,OAG9EtqB,EAAK0wB,UAAY1wB,EAAK2wB,UAAU3mB,EAAO6D,OAK/CqiB,EAAWU,WAAWX,yDAItB,IAAMf,EAAc3yB,KAAK0B,MAAMixB,YAC/B,OACIvzB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACg1B,GAAAj1B,EAAD,qFACAD,EAAAC,EAAAC,cAACi1B,GAAD,CAAiB5B,YAAaA,yDAKtC,OACIvzB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACg1B,GAAAj1B,EAAD,gEACAD,EAAAC,EAAAC,cAACk1B,EAAA,QAAD,CAASC,SAAU,yBAA0BnjB,KAAM,CAACtR,KAAK+B,MAAMqxB,aAA/D,+DAKW,IAAA7tB,EAAAvF,KACnB,OACIZ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACg1B,GAAAj1B,EAAD,0CACAD,EAAAC,EAAAC,cAAA,SAAO6F,KAAM,OACNuvB,OAAQ,OACRhrB,MAAO,CAACyP,SAAU,QAClBlV,SAAU,SAACrB,GAAD,OAAW2C,EAAKovB,iBAAiB/xB,EAAME,OAAO8xB,MAAM,+CAKlEja,GACX,OAAQA,GACJ,KAAKuV,GACD,OAAOlwB,KAAK60B,8BAEhB,KAAKrD,GACD,OAAOxxB,KAAK80B,4BAEhB,KAAKC,GACD,OAAO/0B,KAAKg1B,wBAEhB,QACI,MAAO,0DAIF,IAAAnK,EAAA7qB,KACTqC,EAAU,IAAI2wB,GACdiC,EAAkBj1B,KAAK0B,MAAMixB,YAAYpuB,IAAI,SAAAsuB,GAAU,OAAIA,EAAW7X,WACtEiY,EAAY,GAGhBjzB,KAAKm0B,UAAUvoB,QAAQ,SAAAmiB,GACnBkF,EAAUlF,EAAI,IAAOA,EAAImH,MAAM,EAAGnH,EAAIzjB,UAG1C,IAAI4oB,EAAUlzB,KAAKm0B,UAAU,GAAG7pB,OAAS,EACzCjI,EAAQ8yB,gBAAgBF,EAAiBhC,EAAWC,GAC/CnyB,KAAK,SAAAq0B,GAIFvK,EAAKnpB,MAAM2zB,iBAAiBD,EAASlC,sCAIxC,IAAA3G,EAAAvsB,KAAA2F,EAC+D3F,KAAK0B,MAAjE4zB,EADH3vB,EACG2vB,QAASC,EADZ5vB,EACY4vB,WAAYC,EADxB7vB,EACwB6vB,WAAYC,EADpC9vB,EACoC8vB,WAAYC,EADhD/vB,EACgD+vB,YAC/CC,EAnHH,CAAC,sBAAuB,kCAAmC,4BAqH9D,OACIv2B,EAAAC,EAAAC,cAAA,OAAKC,UAAW+1B,EAAQM,KAAO,sBAC3Bx2B,EAAAC,EAAAC,cAAA,MAAIC,UAAW,eAAf,cAEAH,EAAAC,EAAAC,cAACu2B,GAAAx2B,EAAD,CAASE,UAAW,UAAWg2B,WAAYA,EAAYO,YAAY,YAC9DH,EAAMpxB,IAAI,SAACwxB,EAAO3sB,GAAR,OACPhK,EAAAC,EAAAC,cAAC02B,GAAA32B,EAAD,CAAMqD,IAAKqzB,GACP32B,EAAAC,EAAAC,cAAC22B,GAAA52B,EAAD,KAAY02B,GACZ32B,EAAAC,EAAAC,cAAC42B,GAAA72B,EAAD,KACKktB,EAAK4J,eAAe/sB,GACrBhK,EAAAC,EAAAC,cAAA,OAAKC,UAAW+1B,EAAQc,kBACpBh3B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC+2B,GAAAh3B,EAAD,CACIwvB,SAAyB,IAAf0G,EACV5wB,QAAS6wB,EACTj2B,UAAW+1B,EAAQ5J,QAHvB,QAOAtsB,EAAAC,EAAAC,cAAC+2B,GAAAh3B,EAAD,CACIi3B,QAAQ,YACR3xB,QAAS,WACD4wB,IAAeR,KACf9zB,QAAQC,IAAI,qBACZqrB,EAAK4I,mBAETl0B,QAAQC,IAAI,UACZu0B,KAEJ9G,MAAO,UACPpvB,UAAW,gBACXsvB,SAA4C,IAAlCtC,EAAK7qB,MAAMixB,YAAYroB,QAEhCirB,IAAeI,EAAMrrB,OAAS,EAAI,WAAa,eAQ3EirB,IAAeI,EAAMrrB,QAClBlL,EAAAC,EAAAC,cAACi3B,GAAAl3B,EAAD,CAAOm3B,QAAM,EAACC,UAAW,EAAGl3B,UAAW+1B,EAAQoB,gBAC3Ct3B,EAAAC,EAAAC,cAACg1B,GAAAj1B,EAAD,8CACAD,EAAAC,EAAAC,cAAC+2B,GAAAh3B,EAAD,CAAQsF,QAAS+wB,EAAan2B,UAAW+1B,EAAQ5J,QAAjD,kBA9JYtmB,IAAMxF,WA6K3B+2B,yBAjMA,SAAAC,GAAK,MAAK,CACrBhB,KAAM,CACFjvB,MAAO,OAEX+kB,OAAQ,CACJmL,UAAWD,EAAME,QAAQC,KACzBC,YAAaJ,EAAME,QAAQC,MAE/BX,iBAAkB,CACda,aAAmC,EAArBL,EAAME,QAAQC,MAEhCL,eAAgB,CACZQ,QAA8B,EAArBN,EAAME,QAAQC,QAqLhBJ,CAAmBxD,cChNbgE,4LAER,IAAAxxB,EACyC3F,KAAK0B,MAA5CixB,EADFhtB,EACEgtB,YAAayE,EADfzxB,EACeyxB,cAAelE,EAD9BvtB,EAC8ButB,QAE/BmE,EAAK,CAAC,CAACre,MAAO,IAAKse,UAAW,IAAKC,MAAO,OAAQ5wB,MAAO,KAC7DgsB,EAAY/mB,QAAQ,SAAAinB,GAAU,OAAIwE,EAAItuB,KAAK,CACvCiQ,MAAO6Z,EAAWtxB,GAAK,KAAOsxB,EAAW7X,SAASxX,SAASxB,KAAM,IACjEs1B,UAAWzE,EAAWtxB,GAAGi2B,WACzB7wB,MAAO,IACPjE,IAAKmwB,EAAWtxB,OAIpB,IADA,IAAIk2B,EAAe,GAXdxN,EAAA,SAYI5f,GACL,IAAIqtB,EAAY,GAChBL,EAAIzrB,QAAQ,SAAArK,GACW,KAAhBA,EAAG+1B,UACFI,EAAUn2B,EAAG+1B,WAAajtB,EAE1BqtB,EAAUn2B,EAAG+1B,WAAaF,EAAc71B,EAAG+1B,WAAWjtB,GAAG1H,MAE7D+0B,EAAUh1B,IAAM2H,IAEpBotB,EAAa1uB,KAAK2uB,IAVbrtB,EAAI,EAAGA,EAAI6oB,EAAS7oB,IAAK4f,EAAzB5f,GAYT,OACIjL,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACq4B,GAAA,EAAD,CAAOC,QAASP,EAAKQ,WAAYJ,EAAcK,UAAU,EAAMzsB,KAAM,SAAU0sB,gBAAgB,EAAMC,WAAY,CAAEC,SAAU,IAAMC,OAAQ,CAAE/wB,EAAG,IAAKD,EAAE,eA5B7H9B,IAAMxF,YCA3Bu4B,4LAOZ,IALI,IAAAxyB,EACyD3F,KAAK0B,MAA5DkI,EADFjE,EACEiE,OAAQtH,EADVqD,EACUrD,OAAQqwB,EADlBhtB,EACkBgtB,YAAayE,EAD/BzxB,EAC+ByxB,cAAelE,EAD9CvtB,EAC8CutB,QAE/ChzB,EAAUyyB,EAAYpuB,IAAI,SAAAsuB,GAAU,OAAIA,EAAWtxB,KACnDk2B,EAAe,GAJdxN,EAAA,SAKK5f,GACL,IAAI0jB,EAAM,GACV7tB,EAAQ0L,QAAQ,SAAArK,GACZN,QAAQC,IAAI,kBAAoBL,KAAKC,UAAUs2B,IAC/CrJ,EAAIhlB,KAAKquB,EAAc71B,EAAGi2B,YAAYntB,GAAG1H,SAE7C80B,EAAa1uB,KAAKglB,IANb1jB,EAAI,EAAGA,EAAI6oB,EAAS7oB,IAAK4f,EAAzB5f,GAQV,OACIjL,EAAAC,EAAAC,cAACmK,EAAA,EAAD,CAAQlK,UAAW,eAAgBqK,OAAQA,EAAQtH,OAAQA,GACvDlD,EAAAC,EAAAC,cAACsuB,GAAA,EAAD,CAAaruB,UAAW,gBAAxB,YACAH,EAAAC,EAAAC,cAACuuB,GAAA,EAAD,CAAWtuB,UAAW,gBAClBH,EAAAC,EAAAC,cAAC84B,GAAD,CAAczF,YAAaA,EACNyE,cAAeA,EACflE,QAASA,KAElC9zB,EAAAC,EAAAC,cAACovB,GAAA,EAAD,CAAanvB,UAAW,gBACpBH,EAAAC,EAAAC,cAACk1B,EAAA,QAAD,CAASj1B,UAAW,kBAAmBk1B,SAAU,2BAA4Bv0B,QAASA,EAASoR,KAAMmmB,GACjGr4B,EAAAC,EAAAC,cAAA,OAAKgT,IAAK,oBADd,iCAxBsBlN,IAAMxF,sBCKnCy4B,IAAQ,EAAGnI,GAAyB,EAAGsB,GAAuB,EAAGuD,GAAkB,EAoJjFuD,eAhJX,SAAAA,IAAa,IAAA32B,EAAA,OAAA7B,OAAAC,EAAA,EAAAD,CAAAE,KAAAs4B,IACT32B,EAAA7B,OAAA8B,EAAA,EAAA9B,CAAAE,KAAAF,OAAA+B,EAAA,EAAA/B,CAAAw4B,GAAAx2B,KAAA9B,QAuCJy1B,WAAa,WAET9zB,EAAKkB,SAAS,SAAAd,GAAK,MAAK,CACpBwzB,WAAYxzB,EAAMwzB,WAAa,MA3C1B5zB,EA+Cb6zB,WAAa,WACT7zB,EAAKkB,SAAS,SAAAd,GAAK,MAAK,CACpBwzB,WAAYxzB,EAAMwzB,WAAa,MAjD1B5zB,EAqDb+zB,YAAc,WACV/zB,EAAKkB,SAAS,CACV0yB,WAAY,KArDhB5zB,EAAKI,MAAQ,CACTsuB,aAAc,KACdL,gBAAgB,EAChBuI,oBAAqB,GACrBhD,WAAY8C,GACZG,aAAa,EACbpB,cAAc,KACdlE,QAAQ,KACRuF,gBAAgB,GAGpB92B,EAAK+2B,gBAAkB,IAAI1F,GAblBrxB,mFAiBO6B,GAChB,IAAIm1B,EAAen1B,EACW,oBAA3BA,EAASvB,cACR02B,EAAa9U,K1BRC,c0BUd8U,EAAa9U,KAAOzd,EAGxBpG,KAAK6C,SAAS,CAACwtB,aAAcsI,uDAI7B34B,KAAK6C,SAAS,CAACmtB,gBAAiBhwB,KAAK+B,MAAMiuB,eAAgBuF,WAAcrF,kDAGxD2C,GACjB,IAAI0F,EAAsBv4B,KAAK+B,MAAMw2B,oBACyD,IAA3FA,EAAoB7P,OAAO,SAAApJ,GAAI,OAAIA,EAAKtE,SAASzZ,KAAOsxB,EAAW7X,SAASzZ,KAAI+I,SAC/EiuB,EAAoBxvB,KAAK8pB,GACzB7yB,KAAK6C,SAAS,CAAC01B,qEAwBnBv4B,KAAK6C,SAAS,CACV21B,aAAcx4B,KAAK+B,MAAMy2B,uDAIhBpB,EAAelE,GAC5BlzB,KAAK6C,SAAS,CAACu0B,cAAcA,EAAcwB,aAAc1F,QAAQA,EAASsF,aAAa,gDAIvFx4B,KAAK64B,8EAGiB,IAAA31B,EAAAlD,KACtBA,KAAK04B,gBAAgBI,0BAA0B/3B,KAAK,SAAAC,GAChDkC,EAAKL,SAAS,CAAC41B,eAAgBpoB,QAAQrP,EAAS2B,4CAIhD,IAeAo2B,EAfAt1B,EAAAzD,KACAg5B,EAAah5B,KAAK+B,MAAMiuB,eAAkB,GAAK,mBAE/CiJ,EAAiBj5B,KAAK+B,MAAMiuB,eAE1B5wB,EAAAC,EAAAC,cAAC45B,GAAD,CACE35B,UAAW,SACXg2B,WAAYv1B,KAAK+B,MAAMwzB,WACvBE,WAAYz1B,KAAKy1B,WAAW7xB,KAAK5D,MACjCw1B,WAAYx1B,KAAKw1B,WAAW5xB,KAAK5D,MACjC01B,YAAa11B,KAAK01B,YAAY9xB,KAAK5D,MACnC2yB,YAAa3yB,KAAK+B,MAAMw2B,oBACxBlD,iBAAkBr1B,KAAKq1B,iBAAiBzxB,KAAK5D,QARjDZ,EAAAC,EAAAC,cAAC65B,EAAD,CAAgB55B,UAAW,SAAUqJ,gBAAiB5I,KAAKo5B,oBAAoBx1B,KAAK5D,QAgCxF,OAnBK+4B,EADF/4B,KAAK+B,MAAM02B,eACEr5B,EAAAC,EAAAC,cAAA,YACJF,EAAAC,EAAAC,cAAA,UAAQC,UAAW,0CAA2C85B,OAAQr5B,KAAK+B,MAAMiuB,eAAgBrrB,QAAS3E,KAAKs5B,yBAAyB11B,KAAK5D,OACzIZ,EAAAC,EAAAC,cAAA,OAAKyK,MAAM,6BAA6BpD,MAAM,IAAIC,OAAO,IAAIF,QAAQ,UAChEnH,UAAU,WACXH,EAAAC,EAAAC,cAAA,WAASiI,KAAK,UAAUgyB,SAAS,UAAU7iB,OAAO,oBACzCzT,UAAU,wBAJ3B,QAKkB+1B,EALlB,QAQHh5B,KAAK+B,MAAMiuB,gBACZ5wB,EAAAC,EAAAC,cAAA,UAAQC,UAAW,0CACXoF,QAAS,kBAAMlB,EAAKZ,SAAS,CAACmtB,gBAAe,MADrD,aAIQ5wB,EAAAC,EAAAC,cAACk6B,GAAA,EAAD,CAAO7K,MAAM,WAAb,iEAMZvvB,EAAAC,EAAAC,cAAA,OAAKC,UAAW,kBACXw5B,EAED35B,EAAAC,EAAAC,cAAA,OAAKC,UAAW,sBACP05B,EACD75B,EAAAC,EAAAC,cAACm6B,GAAD,CAAOl6B,UAAW,YACX8wB,aAAcrwB,KAAK+B,MAAMsuB,aACzBL,eAAgBhwB,KAAK+B,MAAMiuB,eAC3BC,eAAgBjwB,KAAK+B,MAAMwzB,WAC3BpF,qBAAsBnwB,KAAKmwB,qBAAqBvsB,KAAK5D,MACrDuwB,wBAAyBvwB,KAAK64B,yBAAyBj1B,KAAK5D,SAM3EZ,EAAAC,EAAAC,cAACo6B,GAAD,CAAcp3B,OAAQtC,KAAK25B,kBAAkB/1B,KAAK5D,MACpC4J,OAAQ5J,KAAK+B,MAAMy2B,YACnB7F,YAAa3yB,KAAK+B,MAAMw2B,oBACxBnB,cAAep3B,KAAK+B,MAAMq1B,cAC1BlE,QAASlzB,KAAK+B,MAAMmxB,kBA1IrBtzB,aCPdg6B,GAAA,kBACXx6B,EAAAC,EAAAC,cAACu6B,EAAA,EAAD,KACIz6B,EAAAC,EAAAC,cAACw6B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW96B,IACjCC,EAAAC,EAAAC,cAACw6B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,kBAAkBC,UAAW3B,KAC/Cl5B,EAAAC,EAAAC,cAACw6B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,kBAAkBC,UAAWz4B,oCC+BxC04B,4LAjCX,OACI96B,EAAAC,EAAAC,cAAC66B,EAAA,EAAD,CAAYC,SAAS,WAEvBh7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACPH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC+6B,GAAA,EAAD,CAAQ96B,UAAW,MAAQ+6B,OAAO,MAC9Bl7B,EAAAC,EAAAC,cAACi7B,GAAA,EAAD,CAAaC,KAAK,IAAIj7B,UAAW,cAC7BH,EAAAC,EAAAC,cAAA,MAAIC,UAAW,cACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAW,UAAjB,UACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAW,KAAjB,OAGRH,EAAAC,EAAAC,cAACm7B,GAAA,EAAD,CAAKl7B,UAAU,UAAUm7B,QAAM,KAYnCt7B,EAAAC,EAAAC,cAACs6B,GAAD,gBA1BAh6B,cCMEyQ,QACW,cAA7BsqB,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kECVN1T,IAASC,OAAOjoB,EAAAC,EAAAC,cAACy7B,GAAD,MAAS5rB,SAASC,eAAe","file":"static/js/main.ab1f0bae.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Jumbotron, Button} from 'reactstrap';\nimport {Link} from 'react-router-dom';\nimport './Home.css';\n\nclass Home extends Component {\n    render() {\n        return (\n            <div className=\"Home\">\n                <Jumbotron className={\"jumbo\"}>\n                    <h1 className=\"display-3\">\n                        <span>Retina</span>\n                        <span className={\"x\"}>X</span>\n                    </h1>\n                    <p className=\"lead\">A simple retina neural functionality simulator</p>\n                    <hr className=\"my-2\" />\n                    <p>by Or Givati & Roie Danino</p>\n                    <p className=\"lead\">\n                        <Link to={\"/networkBuilder\"}>\n                            <Button className={\"startSimulatingButton\"}>Start Simulating</Button>\n                        </Link>\n                    </p>\n                </Jumbotron>\n            </div>\n        );\n    }\n}\n\nexport default Home;\n","/* eslint-disable no-restricted-globals */\nexport default class RetinaXService {\n\n    constructor(){\n        const SERVER_IP = \"localhost\";//\"192.168.0.103\";\n        const SERVER_PORT = \"8080\";\n        this.baseUrl = \"http://\" + SERVER_IP + \":\" + SERVER_PORT;\n\n\n\n        this.headers = {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n            'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Methods': 'POST, GET, DELETE, PUT'\n        }\n    }\n\n}","import fetch from 'isomorphic-fetch'\nimport RetinaXService from \"./RetinaXService\";\n\nexport default class CellTypeService extends RetinaXService{\n\n    createCellType(createCellTypeRequest){\n        let url = this.baseUrl + \"/build/createCellType/\";\n\n        return fetch(url,{\n            method: 'POST',\n            body: JSON.stringify(createCellTypeRequest),\n            headers: this.headers\n        }).then(response => {\n            console.log(response);\n            return response.json();\n        }).then(body => {\n            console.log(body);\n            // alert(\"Cell Type \" + JSON.stringify(body) + \"\\ncreated successfully\");\n            return body;\n        }).catch((reason => alert(reason)));\n    }\n\n    getCellTypes(){\n        let url = this.baseUrl + \"/build/cellTypes\";\n\n        return fetch(url,{\n            method: 'GET',\n            headers: this.headers\n        }).then(response => {\n          //  console.log(response);\n            return response.json();\n        }).then(body => {\n            //console.log(body);\n            // alert(\"Cell Type \" + JSON.stringify(body) + \"\\ncreated successfully\");\n            return body;\n        }).catch((reason => alert(reason)));\n    }\n\n    deleteCellType(id){\n        let url = this.baseUrl + \"/build/cellTypes/\"+id;\n\n        return fetch(url,{\n            method: 'DELETE',\n            headers: this.headers\n        }).catch((reason => alert(reason)));\n    }\n}","import React from \"react\";\nimport \"./CreateCellTypeForm.css\"\nimport 'katex/dist/katex.min.css';\n\nimport { BlockMath} from 'react-katex';\nimport {Button, ButtonGroup, Label, Input, FormGroup, CardTitle} from 'reactstrap';\nimport CellTypeService from \"../../services/CellTypeService\";\n\n\n\nexport class CreateCellTypeForm extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            name: \"\",\n            transformType: \"\",\n            function:{\n                expression: \"\",\n                variables:[]\n            },\n        };\n        this.props = props;\n        this.service = new CellTypeService();\n        this.toggle = props.toggle;\n        this.addCellType = props.addCellType;\n    }\n\n    handleNameChange(event) {\n        this.setState({name: event.target.value});\n    }\n\n\n    handleExpressionChange(event) {\n\n        let _function = this.state.function;\n        _function.expression = event.target.value;\n\n        this.setState({function: _function});\n    }\n\n    handleVariablesChange(event) {\n\n        let _function = this.state.function;\n        _function.variables = event.target.value.split(',');\n\n        this.setState({function: _function});\n    }\n\n    handleTransformChange(transform) {\n        this.setState({transformType: transform});\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n\n        this.service.createCellType({\n            name: this.state.name,\n            transformType: this.state.transformType.toUpperCase().split(\" \").join(\"_\"),\n            createFunctionRequest: this.state.function\n        }).then((cellType) => {\n            this.addCellType(cellType);\n            this.toggle();\n        });\n\n        return event;\n    }\n\n    getExpressionIfDefined(){\n        if(this.state.function.expression){\n            return this.state.function.expression;\n        }\n        return \" \";\n    }\n\n\n    isActiveTransformType(transformType){\n        return transformType == this.state.transformType;\n    }\n\n    render(){\n        let transforms = [\"Analog to Analog\", \"Analog to Digital\", \"Digital to Analog\", \"Digital to Digital\"];\n\n        console.log(this.props);\n        return(\n            <div id=\"createCellForm\">\n                <form onSubmit={this.handleSubmit.bind(this)}>\n                    <CardTitle className={\"title\"}>Create A New Cell Type</CardTitle>\n                    <CreateCellTypeFormTextRow text=\"Name:\" value={this.state.name}  placeholder=\"Example: A\" onChange={this.handleNameChange.bind(this)}/>\n\n                    <CreateCellTypeFormTextRow text=\"Function Expression:\"  value={this.state.function.expression}  placeholder=\"x + y * z\" onChange={this.handleExpressionChange.bind(this)}/>\n\n                    <CreateCellTypeFormTextRow text=\"Variables:\" value={this.state.function.variables} placeholder=\"x, y, z\" onChange={this.handleVariablesChange.bind(this)}/>\n\n\n                    <FormGroup>\n                    <label id={\"transformTypeLabel\"} className=\"col-sm-4 col-form-label\">Transform Type:</label>\n\n                    <ButtonGroup>\n                        {transforms.map((transfrom) =>\n                            <Button active={this.isActiveTransformType(transfrom)} onClick={(event) => this.handleTransformChange(transfrom)}>\n                                {transfrom}\n                            </Button>)}\n                    </ButtonGroup>\n                    </FormGroup>\n\n                    <div id ={\"blockMath\"} className=\"form-group row\">\n                        <div className={\"col-sm-10\"}>\n                            <BlockMath\n                                math={this.getExpressionIfDefined()}\n                                errorColor={'#cc0000'}\n                                renderError={(error) => {\n                                return <b>Illegal Expression</b>}}\n                            />\n                        </div>\n                    </div>\n\n                    <button className=\"btn btn-dark btn-lg btn-block col-sm-11\" type=\"submit\">Create Cell Type</button>\n                </form>\n            </div>\n        );\n    }\n\n\n\n}\n\nexport class CreateCellTypeFormTextRow extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            text: props.text,\n            placeholder: props.placeholder,\n            onChange: props.onChange,\n            value: props.value\n        };\n    }\n\n    render(){\n      return(\n          <div>\n              <FormGroup>\n                <Label className={\"col-form-label\"}> {this.state.text} </Label>\n                <Input className={\"textField\"} placeholder={this.state.placeholder} type=\"text\" onChange={this.state.onChange} />\n              </FormGroup>\n          </div>\n      );\n    };\n}","// @flow\n/*\n  Copyright(c) 2018 Uber Technologies, Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n          http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport * as React from 'react';\n\ntype ICircleProps = {\n  gridSpacing?: number;\n  gridDotSize?: number;\n};\n\nclass Circle extends React.Component<ICircleProps> {\n  static defaultProps = {\n    gridDotSize: 2,\n    gridSpacing: 36\n  };\n\n  render() {\n    const { gridSpacing, gridDotSize } = this.props;\n\n    return <circle className=\"circle\" cx={(gridSpacing || 0) / 2} cy={(gridSpacing || 0) / 2} r={gridDotSize} />;\n  }\n}\n\nexport default Circle;\n","// @flow\n/*\n  Copyright(c) 2018 Uber Technologies, Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n          http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\n/*\n  Example config for GraphView component\n*/\nimport * as React from 'react';\n\nexport const NODE_KEY = 'id'; // Key used to identify nodes\n\n// These keys are arbitrary (but must match the config)\n// However, GraphView renders text differently for empty types\n// so this has to be passed in if that behavior is desired.\nexport const EMPTY_TYPE = 'customEmpty'; // Empty node type\nexport const POLY_TYPE = 'poly';\nexport const SPECIAL_TYPE = 'special';\nexport const SKINNY_TYPE = 'skinny';\nexport const SPECIAL_CHILD_SUBTYPE = 'specialChild';\nexport const EMPTY_EDGE_TYPE = 'emptyEdge';\nexport const SPECIAL_EDGE_TYPE = 'specialEdge';\n\nexport const nodeTypes = [EMPTY_TYPE, POLY_TYPE, SPECIAL_TYPE, SKINNY_TYPE];\nexport const edgeTypes = [EMPTY_EDGE_TYPE, SPECIAL_EDGE_TYPE];\n\n\nexport const EmptyNodeShape = (\n  <symbol viewBox=\"0 0 154 154\" width=\"154\" height=\"154\" id=\"emptyNode\">\n    <circle cx=\"77\" cy=\"77\" r=\"76\" />\n  </symbol>\n);\n\nexport const CustomEmptyShape = (\n  <symbol viewBox=\"0 0 100 100\" id=\"customEmpty\">\n    <circle cx=\"50\" cy=\"50\" r=\"45\" />\n  </symbol>\n);\n\nexport const SpecialShape = (\n  <symbol viewBox=\"-27 0 154 154\" id=\"special\" width=\"154\" height=\"154\">\n    <rect transform=\"translate(50) rotate(45)\" width=\"109\" height=\"109\" />\n  </symbol>\n);\n\nexport const PolyShape = (\n  <symbol viewBox=\"0 0 88 72\" id=\"poly\" width=\"88\" height=\"88\">\n    <path d=\"M 0 36 18 0 70 0 88 36 70 72 18 72Z\"></path>\n  </symbol>\n);\n\nexport const SkinnyShape = (\n  <symbol viewBox=\"0 0 154 54\" width=\"154\" height=\"54\" id=\"skinny\">\n    <rect x=\"0\" y=\"0\" rx=\"2\" ry=\"2\" width=\"154\" height=\"54\" />\n  </symbol>\n);\n\nexport const SpecialChildShape = (\n  <symbol viewBox=\"0 0 154 154\" id=\"specialChild\">\n    <rect x=\"2.5\" y=\"0\" width=\"154\" height=\"154\" fill=\"rgba(30, 144, 255, 0.12)\" />\n  </symbol>\n);\n\nexport const EmptyEdgeShape = (\n  <symbol viewBox=\"0 0 50 50\" id=\"emptyEdge\">\n    <circle cx=\"25\" cy=\"25\" r=\"8\" fill=\"currentColor\" />\n  </symbol>\n);\n\nexport const SpecialEdgeShape = (\n  <symbol viewBox=\"0 0 50 50\" id=\"specialEdge\">\n    <rect transform=\"rotate(45)\" x=\"27.5\" y=\"-7.5\" width=\"15\" height=\"15\" fill=\"currentColor\" />\n  </symbol>\n);\n\nexport default {\n  EdgeTypes: {\n    emptyEdge: {\n      shape: EmptyEdgeShape,\n      shapeId: '#emptyEdge'\n    },\n    specialEdge: {\n      shape: SpecialEdgeShape,\n      shapeId: '#specialEdge'\n    }\n  },\n  NodeSubtypes: {\n    specialChild: {\n      shape: SpecialChildShape,\n      shapeId: '#specialChild'\n    }\n  },\n  NodeTypes: {\n    emptyNode: {\n      shape: EmptyNodeShape,\n      shapeId: '#emptyNode',\n      typeText: 'None'\n    },\n    empty: {\n      shape: CustomEmptyShape,\n      shapeId: '#empty',\n      typeText: 'None'\n    },\n    special: {\n      shape: SpecialShape,\n      shapeId: '#special',\n      typeText: 'Special'\n    },\n    skinny: {\n      shape: SkinnyShape,\n      shapeId: '#skinny',\n      typeText: 'Skinny'\n    },\n    poly: {\n      shape: PolyShape,\n      shapeId: \"#poly\",\n      typeText: 'Poly'\n    }\n  }\n};\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './CellTypePicker.css'\n\nimport { ListGroup, ListGroupItem, Button, Modal} from 'reactstrap';\nimport {CreateCellTypeForm} from \"../../CellTypeCreatorUI/CreateCellTypeForm\";\n\nimport Draggable from 'react-draggable';\nimport CellTypeService from \"../../../services/CellTypeService\";\nimport Circle from \"../UberGraphView/components/circle\";\n// import Node from \"../UberGraphView/components/node\"; // The default\nimport {EmptyNodeShape} from '../UberGraphView/fromUberGit/graph-config.js';\nimport {CSVLink} from \"react-csv\";\n\nexport default class CellTypePicker extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            modal: false,\n            dragged:0,\n            cellTypes: [],\n            selectedCellType: {},\n            setSelectedType : props.setSelectedType\n        };\n        this.service = new CellTypeService();\n        this.toggle = this.toggle.bind(this);\n    }\n\n    onCreateCellTypeClicked(event){\n        this.toggle();\n    }\n\n    addCellType(cellType){\n        let types = this.state.cellTypes;\n        types.push(cellType);\n\n        this.setState({\n            cellTypes: types\n        });\n    }\n\n    toggle() {\n        this.setState({\n            modal: !this.state.modal\n        });\n    }\n\n    onStart() {\n        this.setState({dragged:1});\n    }\n\n    onStop() {\n        this.setState({dragged:0});\n    }\n\n    select(type){\n        this.setState({selectedCellType:type});\n        this.state.setSelectedType(type);\n    }\n\n    isSelected(type){\n        return this.state.selectedCellType.id === type.id;\n    }\n    componentWillMount(){\n        this.service.getCellTypes().then(types => {\n            this.setState({cellTypes: types});\n        });\n    }\n\n    render(){\n        const dragHandlers = {onStart: this.onStart.bind(this), onStop: this.onStop.bind(this)};\n        let types = this.state.cellTypes;\n//float-right\n        return(\n            <div className={'cellTypePicker'}>\n\n                <h2 className={\"pickerTitle\"}>Cell Types</h2>\n\n                <ListGroup className={'cellTypesList border border-dark'}>\n                    {types.map((type, index) => {\n                            let id = \"cellType\"+index;\n                            return (<ListGroupItem key={index} active={this.isSelected(type)} onClick={() => this.select(type)}>\n                                    {/*<img className={\"deleteCellTypeButton\"} src={\"/images/multiply.svg\"} onClick={() => this.service.deleteCellType(type.id)}/>*/}\n                                    <div className={\"cellType\"} id={id} key={index}>\n                                        <h6>{type.name}</h6>\n                                        <br/>\n                                        <small>{type.function.expression}</small>\n                                        <br/>\n                                        <small>{type.transformType.replace('_TO_',' → ')}</small>\n                                    </div>\n                            </ListGroupItem>);\n                        }\n                    )}\n                </ListGroup>\n\n\n                <Modal style={{borderRadius:\"4rem\"}} isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\n                    <CreateCellTypeForm toggle = {this.toggle} addCellType={this.addCellType.bind(this)}/>\n                </Modal>\n                <hr/>\n                <Button className={\"createCellTypeBtn\"} onClick={this.onCreateCellTypeClicked.bind(this)}>\n                    <svg width=\"18\" height=\"22\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path className=\"primary\" d=\"M8 2v6H2v2h6v6h2v-6h6V8h-6V2H8z\" fill=\"#ffffff\"/>\n                    </svg>\n                    &nbsp; Create a New Cell Type\n                </Button>\n            </div>\n        );\n    }\n}\n","// @flow\n/*\n  Copyright(c) 2018 Uber Technologies, Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n          http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\n// import { type IGraphViewProps } from '../../components/graph-view';\nimport { type IGraphViewProps } from '../../components/graph-view-props';\nimport { type INode } from '../../components/node';\n\nexport type IPosition = {\n  x: number;\n  y: number;\n  [key: string]: any;\n};\n\nexport default class LayoutEngine {\n  graphViewProps: IGraphViewProps;\n  constructor(graphViewProps: IGraphViewProps) {\n    this.graphViewProps = graphViewProps;\n  }\n\n  calculatePosition(node: IPosition) {\n    return node;\n  }\n\n  adjustNodes(nodes: INode[], nodesMap?: any): INode[] {\n    let node = null;\n    let position = {\n      x: 0,\n      y: 0\n    }\n    for (let i = 0; i < nodes.length; i++){\n      node = nodes[i];\n      const position = this.calculatePosition({\n        x: node.x || 0,\n        y: node.y || 0\n      });\n      node.x = position.x;\n      node.y = position.y;\n    }\n    return nodes;\n  }\n\n  getPositionForNode(node: IPosition): IPosition {\n    return this.calculatePosition(node);\n  }\n}\n","// @flow\n/*\n  Copyright(c) 2018 Uber Technologies, Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n          http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\nimport { type INode } from '../../components/node';\nimport LayoutEngine, { type IPosition } from './layout-engine';\n\nclass None extends LayoutEngine {\n  calculatePosition(node: IPosition) {\n    return node;\n  }\n}\n\nexport default None;\n","// @flow\n/*\n  Copyright(c) 2018 Uber Technologies, Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n          http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport LayoutEngine, { type IPosition } from './layout-engine';\n\nclass SnapToGrid extends LayoutEngine {\n  calculatePosition(node: IPosition) {\n    const { x, y } = node;\n    let { gridSpacing } = this.graphViewProps;\n    gridSpacing = gridSpacing || 10;\n    const gridOffset = gridSpacing / 2;\n\n    let newX = x || 0;\n    let newY = y || 0;\n    if (x && (x - gridOffset) % gridSpacing !== 0) {\n      // Add (gridSpacing / 2) to account for the dot rendering.\n      // Now the center of the node is on a dot.\n      let multiplier = 1;\n      if ((x - gridOffset) % gridSpacing < gridOffset) {\n        multiplier = -1;\n      }\n      newX = (gridSpacing * Math.round(x / gridSpacing)) + (gridOffset * multiplier);\n    }\n\n    if (y && (y - gridOffset) % gridSpacing !== 0) {\n      // Add (gridSpacing / 2) to account for the dot rendering.\n      // Now the center of the node is on a dot.\n      let multiplier = 1;\n      if ((y - gridOffset) % gridSpacing < gridOffset) {\n        multiplier = -1;\n      }\n      newY = (gridSpacing * Math.round(y / gridSpacing)) + (gridOffset * multiplier);\n    }\n    return {\n      x: newX,\n      y: newY\n    };\n  }\n}\n\nexport default SnapToGrid;\n","// @flow\n/*\n  Copyright(c) 2018 Uber Technologies, Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n          http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport None from './none';\nimport SnapToGrid from './snap-to-grid';\nimport VerticalTree from './vertical-tree';\n\n\nexport type LayoutEngine = None | SnapToGrid | VerticalTree;\n\nexport const LayoutEngines = {\n  None,\n  SnapToGrid,\n  VerticalTree\n};\n","// @flow\n/*\n  Copyright(c) 2018 Uber Technologies, Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n          http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport * as dagre from 'dagre';\nimport { type INode } from '../../components/node';\nimport SnapToGrid from './snap-to-grid';\n\nclass VerticalTree extends SnapToGrid {\n  adjustNodes(nodes: INode[], nodesMap?: any): INode[] {\n    const { nodeKey, nodeSize } = this.graphViewProps;\n    const size = (nodeSize || 1) * 1.5;\n    const g = new dagre.graphlib.Graph();\n    g.setGraph({});\n    g.setDefaultEdgeLabel(() => ({}));\n\n    nodes.forEach((node) => {\n      if (!nodesMap) {\n        return;\n      }\n      const nodeId = node[nodeKey];\n      const nodeKeyId = `key-${nodeId}`;\n      const nodesMapNode = nodesMap[nodeKeyId];\n\n      // prevent disconnected nodes from being part of the graph\n      if (nodesMapNode.incomingEdges.length === 0 && nodesMapNode.outgoingEdges.length === 0) {\n        return;\n      }\n      g.setNode(nodeKeyId, { width: size, height: size });\n      nodesMapNode.outgoingEdges.forEach((edge) => {\n        g.setEdge(nodeKeyId,   `key-${edge.target}`);\n      });\n    });\n\n    dagre.layout(g);\n\n    g.nodes().forEach((gNodeId) => {\n      const nodesMapNode = nodesMap[gNodeId];\n\n      // gNode is the dagre representation\n      const gNode = g.node(gNodeId);\n\n      nodesMapNode.node.x = gNode.x;\n      nodesMapNode.node.y = gNode.y;\n    });\n    return nodes;\n  }\n}\n\nexport default VerticalTree;\n","// @flow\n/*\n  Copyright(c) 2018 Uber Technologies, Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n          http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport * as React from 'react';\n\ntype IBackgroundProps = {\n  gridSize?: number;\n  backgroundFillId?: string;\n};\n\nclass Background extends React.Component<IBackgroundProps> {\n  static defaultProps = {\n    backgroundFillId: '#grid',\n    gridSize: 40960\n  };\n\n  render() {\n    const { gridSize, backgroundFillId } = this.props;\n    return (\n      <rect\n        className=\"background\"\n        x={-(gridSize || 0) / 4}\n        y={-(gridSize || 0) / 4}\n        width={gridSize}\n        height={gridSize}\n        fill={`url(${backgroundFillId || ''})`}\n      />\n    );\n  }\n}\n\nexport default Background;\n","// @flow\n/*\n  Copyright(c) 2018 Uber Technologies, Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n          http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport * as React from 'react';\n\ntype IArrowheadMarkerProps = {\n  edgeArrowSize?: number;\n};\n\nclass ArrowheadMarker extends React.Component<IArrowheadMarkerProps> {\n  static defaultProps = {\n    edgeArrowSize: 8\n  };\n\n  render() {\n    const { edgeArrowSize } = this.props;\n    if (!edgeArrowSize && edgeArrowSize !== 0) {\n      return null;\n    }\n\n    return (\n      <marker\n        id=\"end-arrow\"\n        key=\"end-arrow\"\n        viewBox={`0 -${edgeArrowSize / 2} ${edgeArrowSize} ${edgeArrowSize}`}\n        refX={`${edgeArrowSize / 2}`}\n        markerWidth={`${edgeArrowSize}`}\n        markerHeight={`${edgeArrowSize}`}\n        orient=\"auto\"\n      >\n        <path\n          className=\"arrow\"\n          d={`M0,-${(edgeArrowSize) / 2}L${edgeArrowSize},0L0,${(edgeArrowSize) / 2}`}\n        />\n      </marker>\n    );\n  }\n}\n\nexport default ArrowheadMarker;\n","// @flow\n/*\n  Copyright(c) 2018 Uber Technologies, Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n          http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport * as React from 'react';\nimport Circle from './circle';\n\ntype IBackgroundPatternProps = {\n  gridSpacing?: number;\n  gridDotSize?: number;\n};\n\nclass BackgroundPattern extends React.Component<IBackgroundPatternProps> {\n  render() {\n    const { gridSpacing, gridDotSize } = this.props;\n\n    return (\n      <pattern id=\"grid\" key=\"grid\" width={gridSpacing} height={gridSpacing} patternUnits=\"userSpaceOnUse\">\n        <Circle gridSpacing={gridSpacing} gridDotSize={gridDotSize} />\n      </pattern>\n    );\n  }\n}\n\nexport default BackgroundPattern;\n","// @flow\n/*\n  Copyright(c) 2018 Uber Technologies, Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n          http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport * as React from 'react';\n\nclass DropshadowFilter extends React.Component<any> {\n  render() {\n    return (\n      <filter id=\"dropshadow\" key=\"dropshadow\" height=\"130%\">\n        <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"3\" />\n        <feOffset dx=\"2\" dy=\"2\" result=\"offsetblur\" />\n        <feComponentTransfer>\n          <feFuncA type=\"linear\" slope=\"0.1\" />\n        </feComponentTransfer>\n        <feMerge>\n          <feMergeNode />\n          <feMergeNode in=\"SourceGraphic\" />\n        </feMerge>\n      </filter>\n    );\n  }\n}\n\nexport default DropshadowFilter;\n","// @flow\n/*\n  Copyright(c) 2018 Uber Technologies, Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n          http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport * as React from 'react';\nimport ArrowheadMarker from './arrowhead-marker';\nimport BackgroundPattern from './background-pattern';\nimport DropshadowFilter from './dropshadow-filter';\n\ntype IDefsProps = {\n  gridSpacing?: number;\n  gridDotSize?: number;\n  edgeArrowSize?: number;\n  nodeTypes: any; // TODO: define nodeTypes, nodeSubtypes, and edgeTypes. Must have shape and shapeId!\n  nodeSubtypes: any;\n  edgeTypes: any;\n  renderDefs?: () => any | null;\n};\n\ntype IDefsState = {\n  graphConfigDefs: any;\n};\n\nclass Defs extends React.Component<IDefsProps, IDefsState> {\n  static defaultProps = {\n    gridDotSize: 2,\n    renderDefs: () => null\n  };\n\n  static getDerivedStateFromProps(nextProps: any, prevState: any) {\n    const graphConfigDefs = [];\n    Defs.processGraphConfigDefs(nextProps.nodeTypes, graphConfigDefs);\n    Defs.processGraphConfigDefs(nextProps.nodeSubtypes, graphConfigDefs);\n    Defs.processGraphConfigDefs(nextProps.edgeTypes, graphConfigDefs);\n\n    return {\n      graphConfigDefs\n    };\n  }\n\n  static processGraphConfigDefs(typesObj: any, graphConfigDefs: any) {\n    Object.keys(typesObj).forEach((type) => {\n      const safeId = typesObj[type].shapeId ? typesObj[type].shapeId.replace('#', '') : 'graphdef';\n      graphConfigDefs.push(React.cloneElement(typesObj[type].shape, { key: `${safeId}-${graphConfigDefs.length + 1}` }));\n    });\n  }\n\n  constructor(props: IDefsProps) {\n    super(props);\n    this.state = {\n      graphConfigDefs: []\n    };\n  }\n\n  render() {\n    const { edgeArrowSize, gridSpacing, gridDotSize } = this.props;\n    return (\n      <defs>\n        {this.state.graphConfigDefs}\n\n        <ArrowheadMarker edgeArrowSize={edgeArrowSize} />\n\n        <BackgroundPattern gridSpacing={gridSpacing} gridDotSize={gridDotSize} />\n\n        <DropshadowFilter />\n\n        {this.props.renderDefs && this.props.renderDefs()}\n      </defs>\n    );\n  }\n}\n\nexport default Defs;\n","// @flow\n/*\n  Copyright(c) 2018 Uber Technologies, Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n          http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport { type IEdge } from './edge';\nimport { type INode } from './node';\n\nexport type INodeMapNode = {\n  node: INode;\n  originalArrIndex: number;\n  incomingEdges: IEdge[];\n  outgoingEdges: IEdge[];\n  parents: INode[];\n  children: INode[];\n};\n\nclass GraphUtils {\n  static getNodesMap(arr: INode[], key: string) {\n    const map = {};\n    let item = null;\n    for (let i = 0; i < arr.length; i++){\n      item = arr[i];\n      map[`key-${item[key]}`] = {\n        children: [],\n        incomingEdges: [],\n        node: item,\n        originalArrIndex: i,\n        outgoingEdges: [],\n        parents: []\n      };\n    }\n    return map;\n  }\n\n  static getEdgesMap(arr: IEdge[]) {\n    const map = {};\n    let item = null;\n    for (let i = 0; i < arr.length; i++){\n      item = arr[i];\n      if (!item.target) {\n        continue;\n      }\n      map[`${item.source || ''}_${item.target}`] = {\n        edge: item,\n        originalArrIndex: i\n      };\n    }\n    return map;\n  }\n\n  static linkNodesAndEdges(nodesMap: any, edges: IEdge[]) {\n    let nodeMapSourceNode = null;\n    let nodeMapTargetNode = null;\n    let edge = null;\n    for (let i = 0; i < edges.length; i++){\n      edge = edges[i];\n      if (!edge.target) {\n        continue;\n      }\n      nodeMapSourceNode = nodesMap[`key-${edge.source || ''}`];\n      nodeMapTargetNode = nodesMap[`key-${edge.target}`];\n      // avoid an orphaned edge\n      if (nodeMapSourceNode && nodeMapTargetNode) {\n        nodeMapSourceNode.outgoingEdges.push(edge);\n        nodeMapTargetNode.incomingEdges.push(edge);\n        nodeMapSourceNode.children.push(nodeMapTargetNode);\n        nodeMapTargetNode.parents.push(nodeMapSourceNode);\n      }\n    }\n  }\n\n  static removeElementFromDom(id: string) {\n    const container = document.getElementById(id);\n    if (container && container.parentNode) {\n      container.parentNode.removeChild(container);\n      return true;\n    }\n    return false;\n  }\n\n  static findParent(element: any, selector: string) {\n\n    if (element && element != null && element.matches && element.matches != null && element.matches(selector)) {\n      return element;\n    } else if (element && element != null && element.parentNode != null && element.parentNode) {\n      return GraphUtils.findParent(element.parentNode, selector);\n    }\n\n    return null;\n  }\n\n  static classNames(...args: any[]) {\n    let className = '';\n    for (const arg of args) {\n      if (typeof arg === 'string' || typeof arg === 'number') {\n        className += ` ${arg}`;\n      } else if (typeof arg === 'object' && !Array.isArray(arg) && arg !== null) {\n          className = this.updateClassNames(arg, className);\n      } else if (Array.isArray(arg)) {\n        className += ` ${arg.join(' ')}`;\n      }\n    }\n\n    return className.trim();\n  }\n\n  static updateClassNames(arg, className){\n      Object.keys(arg).forEach((key) => {\n          if (Boolean(arg[key])) {\n              className += ` ${key}`;\n          }\n      });\n      return className;\n  }\n\n  static yieldingLoop(count, chunksize, callback, finished) {\n    var i = 0;\n    (function chunk() {\n        var end = Math.min(i + chunksize, count);\n        for (; i < end; ++i) {\n          callback.call(null, i);\n        }\n        if (i < count) {\n          setTimeout(chunk, 0);\n        } else {\n          finished && finished.call(null);\n        }\n    })();\n  }\n\n  static hasNodeShallowChanged(prevNode, newNode) {\n    const prevNodeKeys = Object.keys(prevNode);\n    const newNodeKeys = Object.keys(prevNode);\n    const checkedKeys = {};\n    for (let i = 0; i < prevNodeKeys.length; i++){\n      const key = prevNodeKeys[i];\n      if (!newNode.hasOwnProperty(key) || prevNode[key] !== newNode[key]) {\n        return true;\n      }\n      checkedKeys[key] = true;\n    }\n    for (let i = 0; i < newNodeKeys.length; i++){\n      const key = newNodeKeys[i];\n      if (checkedKeys[key]) {\n        continue;\n      }\n      if (!prevNode.hasOwnProperty(key) || prevNode[key] !== newNode[key]) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\nexport default GraphUtils;\n","// @flow\n/*\n  Copyright(c) 2018 Uber Technologies, Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n          http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport * as d3 from 'd3';\nimport * as React from 'react';\nimport * as lineIntersect from 'line-intersect';\nimport { intersect, shape } from 'svg-intersections';\nimport { Point2D, Matrix2D } from 'kld-affine';\nimport { Intersection } from 'kld-intersections';\nimport GraphUtils from './graph-util';\nimport { type INode } from './node';\n\nexport type IEdge = {\n  source: string;\n  target: string;\n  type?: string;\n  handleText?: string;\n  label_from?: string;\n  label_to?: string;\n  [key: string]: any;\n};\n\nexport type ITargetPosition = {\n  x: number,\n  y: number\n};\n\ntype IEdgeProps = {\n  data: IEdge;\n  edgeTypes: any; // TODO: create an edgeTypes interface\n  edgeHandleSize?: number;\n  nodeSize?: number;\n  sourceNode: INode | null;\n  targetNode: INode | ITargetPosition;\n  isSelected: boolean;\n  nodeKey: string;\n  viewWrapperElem: HTMLDivElement;\n};\n\nclass Edge extends React.Component<IEdgeProps> {\n  static defaultProps = {\n    edgeHandleSize: 50,\n    isSelected: false\n  };\n\n  static getTheta(pt1: any, pt2: any) {\n    const xComp = (pt2.x || 0) - (pt1.x || 0);\n    const yComp = (pt2.y || 0) - (pt1.y || 0);\n    const theta = Math.atan2(yComp, xComp);\n    return theta;\n  }\n\n  static lineFunction(srcTrgDataArray: any) {\n    // Provides API for curved lines using .curve() Example:\n    // https://bl.ocks.org/d3indepth/64be9fc39a92ef074034e9a8fb29dcce\n    return d3\n      .line()\n      .x((d: any) => {\n        return d.x;\n      })\n      .y((d: any) => {\n        return d.y;\n      })(srcTrgDataArray);\n  }\n\n  static getArrowSize(viewWrapperElem: HTMLDivElement | HTMLDocument = document) {\n    const defEndArrowElement: any = viewWrapperElem.querySelector(`defs>marker>.arrow`);\n    return defEndArrowElement.getBoundingClientRect();\n  }\n\n  static getEdgePathElement(edge: IEdge, viewWrapperElem: HTMLDivElement | HTMLDocument = document) {\n    return viewWrapperElem.querySelector(`#edge-${edge.source}-${edge.target}-container>.edge-container>.edge>.edge-path`);\n  }\n\n  static parsePathToXY(edgePathElement: Element | null) {\n    const response = {\n      source: { x: 0, y: 0 },\n      target: { x: 0, y: 0 }\n    };\n    if (edgePathElement) {\n      let d = edgePathElement.getAttribute('d');\n      d = d && d.replace(/^M/, '');\n      d = d && d.replace(/L/, ',');\n      let dArr = (d && d.split(',')) || [];\n      dArr = dArr.map(dimension => {\n        return parseFloat(dimension);\n      });\n\n      if (dArr.length === 4) {\n        response.source.x = dArr[0];\n        response.source.y = dArr[1];\n        response.target.x = dArr[2];\n        response.target.y = dArr[3];\n      }\n    }\n    return response;\n  }\n\n  static getDefaultIntersectResponse() {\n    return {\n      xOff: 0,\n      yOff: 0,\n      intersect: {\n        type: 'none',\n        point: {\n          x: 0,\n          y: 0\n        }\n      }\n    };\n  }\n\n  static getRotatedRectIntersect(\n    defSvgRotatedRectElement: any,\n    src: any,\n    trg: any,\n    includesArrow: boolean,\n    viewWrapperElem: HTMLDivElement | HTMLDocument = document\n  ) {\n    const response = Edge.getDefaultIntersectResponse();\n    const arrowSize = Edge.getArrowSize(viewWrapperElem);\n    const clientRect = defSvgRotatedRectElement.getBoundingClientRect();\n\n    const widthAttr = defSvgRotatedRectElement.getAttribute('width');\n    const heightAttr = defSvgRotatedRectElement.getAttribute('height');\n    const w = widthAttr ? parseFloat(widthAttr) : clientRect.width;\n    const h = heightAttr ? parseFloat(heightAttr) : clientRect.height;\n    const trgX = trg.x || 0;\n    const trgY = trg.y || 0;\n    const srcX = src.x || 0;\n    const srcY = src.y || 0;\n\n    const top = trgY - h / 2;\n    const bottom = trgY + h / 2;\n    const left = trgX - w / 2;\n    const right = trgX + w / 2;\n\n    const line = shape('line', { x1: srcX, y1: srcY, x2: trgX, y2: trgY });\n\n    // define rectangle\n    let rect = {\n        topLeft: new Point2D(left, top),\n        bottomRight: new Point2D(right, bottom)\n    };\n\n    // convert rectangle corners to polygon (list of points)\n    let poly = [\n      rect.topLeft,\n      new Point2D(rect.bottomRight.x, rect.topLeft.y),\n      rect.bottomRight,\n      new Point2D(rect.topLeft.x, rect.bottomRight.y)\n    ];\n\n    // find center point of rectangle\n    let center = rect.topLeft.lerp(rect.bottomRight, 0.5);\n\n    // get the rotation\n    let transform = defSvgRotatedRectElement.getAttribute('transform');\n    let rotate = transform ? transform.replace(/(rotate.[0-9]*.)|[^]/g, '$1') : null;\n    let angle = 0;\n    if (rotate) {\n      // get the number\n      rotate = rotate.replace(/^rotate\\(|\\)$/g, '');\n      // define rotation in radians\n      angle = parseFloat(rotate) * Math.PI / 180.0;\n    }\n    // create matrix for rotating around center of rectangle\n    let rotation = Matrix2D.rotationAt(angle, center);\n    // create new rotated polygon\n    const rotatedPoly = poly.map(p => p.transform(rotation));\n\n    // find intersections\n    const pathIntersect = Intersection.intersectLinePolygon(line.params[0], line.params[1], rotatedPoly);\n\n    if (pathIntersect.points.length > 0) {\n      let arrowWidth = 0; //arrowSize.width;\n      let arrowHeight = 0; //arrowSize.height;\n      const xIntersect = pathIntersect.points[0].x;\n      const yIntersect = pathIntersect.points[0].y;\n      if (xIntersect > left && xIntersect < right && yIntersect > trgY) {\n        // arrow points to the bottom of the node\n        arrowHeight = arrowSize.height;\n      } else if (xIntersect > left && xIntersect < right && yIntersect < trgY) {\n        // arrow points to the top of the node\n        arrowHeight = -arrowSize.height;\n      } else if (yIntersect > top && yIntersect < bottom && xIntersect < trgX) {\n        // arrow points to the left of the node\n        arrowWidth = -arrowSize.width;\n      } else {\n        // arrow points to the right of the node\n        arrowWidth = arrowSize.width;\n      }\n      response.xOff = trgX - xIntersect - (includesArrow ? arrowWidth / 1.25 : 0);\n      response.yOff = trgY - yIntersect - (includesArrow ? arrowHeight / 1.25 : 0);\n      response.intersect = pathIntersect.points[0];\n    }\n    return response;\n  }\n\n  static getPathIntersect(\n    defSvgPathElement: any,\n    src: any,\n    trg: any,\n    includesArrow?: boolean = true,\n    viewWrapperElem: HTMLDivElement | HTMLDocument = document\n  ) {\n    const response = Edge.getDefaultIntersectResponse();\n    const arrowSize = Edge.getArrowSize(viewWrapperElem);\n    // get the rectangular area around path\n    const clientRect = defSvgPathElement.getBoundingClientRect();\n\n    const w = clientRect.width;\n    const h = clientRect.height;\n    const trgX = trg.x || 0;\n    const trgY = trg.y || 0;\n    const srcX = src.x || 0;\n    const srcY = src.y || 0;\n\n    // calculate the positions of each corner relative to the trg position\n    const top = trgY - h / 2;\n    const bottom = trgY + h / 2;\n    const left = trgX - w / 2;\n    const right = trgX + w / 2;\n\n    // modify the d property to add top and left to the x and y positions\n    let d = defSvgPathElement.getAttribute('d');\n    if (!/^M/.test(d)) {\n      // doesn't look like what we expect.\n      // TODO: add more use cases than simple moveTo commands\n      return;\n    }\n\n    d = d.replace(/^M /, '');\n    let dArr = d.split(' ');\n    dArr = dArr.map((val, index) => {\n      let isEnd = false;\n      if (/Z$/.test(val)) {\n        val = val.replace(/Z$/, '');\n        isEnd = true;\n      }\n      // items % 2 are x positions\n      if (index % 2 === 0) {\n        return (parseFloat(val) + left) + (isEnd ? 'Z' : '');\n      }\n      return (parseFloat(val) + top) + (isEnd ? 'Z' : '');\n    });\n\n    const pathIntersect = intersect(\n      shape('path', { d: 'M ' + dArr.join(' ') }),\n      shape('line', { x1: srcX, y1: srcY, x2: trgX, y2: trgY })\n    );\n\n    if (pathIntersect.points.length > 0) {\n      let arrowWidth = 0; //arrowSize.width;\n      let arrowHeight = 0; //arrowSize.height;\n      const xIntersect = pathIntersect.points[0].x;\n      const yIntersect = pathIntersect.points[0].y;\n      let multiplier = 1;\n      if (xIntersect > left && xIntersect < right) {\n        const yIntersectDiff = yIntersect - trgY;\n        multiplier = yIntersect < trgY ? -1 : 1;\n\n        arrowHeight = arrowSize.height * multiplier\n        // Math.min is used to find a percentage of the arrow size\n        // as the arrow approaches a horizontal or vertical vector\n        // Math.abs is used to force the diff to be positive,\n        // because we're using a multiplier instead and Math.min would choose a large\n        // negative number as the minimum, which is undesirable.\n        arrowHeight = arrowHeight * Math.min(Math.abs(yIntersectDiff), 1);\n      }\n      if (yIntersect > top && yIntersect < bottom) {\n        const xIntersectDiff = xIntersect - trgX;\n        multiplier = xIntersect < trgX ? -1 : 1;\n\n        arrowWidth = arrowSize.width * multiplier\n        arrowWidth = arrowWidth * Math.min(Math.abs(xIntersectDiff), 1);\n      }\n\n      response.xOff = trgX - xIntersect - (includesArrow ? arrowWidth / 1.25 : 0);\n      response.yOff = trgY - yIntersect - (includesArrow ? arrowHeight / 1.25 : 0);\n\n      response.intersect = pathIntersect.points[0];\n    }\n    return response;\n  }\n\n  static getCircleIntersect(\n    defSvgCircleElement: any,\n    src: any,\n    trg: any,\n    includesArrow?: boolean = true,\n    viewWrapperElem: HTMLDivElement | HTMLDocument = document\n  ) {\n    const response = Edge.getDefaultIntersectResponse();\n    const arrowSize = Edge.getArrowSize(viewWrapperElem);\n    let arrowWidth = arrowSize.width;\n    let arrowHeight = arrowSize.height;\n    const clientRect = defSvgCircleElement.getBoundingClientRect();\n    const parentElement = defSvgCircleElement.parentElement;\n    let parentWidth = parentElement.getAttribute('width');\n    let parentHeight = parentElement.getAttribute('width');\n    if (parentWidth) {\n      parentWidth = parseFloat(parentWidth);\n    }\n    if (parentHeight) {\n      parentHeight = parseFloat(parentHeight);\n    }\n\n    const w = parentWidth ? parentWidth : clientRect.width;\n    const h = parentHeight ? parentHeight : clientRect.height;\n    const trgX = trg.x || 0;\n    const trgY = trg.y || 0;\n    const srcX = src.x || 0;\n    const srcY = src.y || 0;\n    // from the center of the node to the perimeter\n    const arrowOffsetDiviser = 1.25;\n    let offX = w / 2 + ( includesArrow ? arrowWidth / arrowOffsetDiviser : 0);\n    let offY = h / 2 + ( includesArrow ? arrowHeight / arrowOffsetDiviser: 0 );\n\n    // Note: even though this is a circle function, we can use ellipse\n    // because all circles are ellipses but not all ellipses are circles.\n    const pathIntersect = intersect(\n      shape('ellipse', {\n        rx: offX,\n        ry: offY,\n        cx: trgX,\n        cy: trgY\n      }),\n      shape('line', { x1: srcX, y1: srcY, x2: trgX, y2: trgY })\n    );\n\n    if (pathIntersect.points.length > 0) {\n      let xIntersect = pathIntersect.points[0].x;\n      let yIntersect = pathIntersect.points[0].y;\n\n      response.xOff = trgX - xIntersect;\n      response.yOff = trgY - yIntersect;\n      response.intersect = pathIntersect.points[0];\n    }\n    return response;\n  }\n\n  static calculateOffset(\n    nodeSize: any,\n    src: any,\n    trg: any,\n    nodeKey: string,\n    includesArrow?: boolean = true,\n    viewWrapperElem?: HTMLDivElement = document\n  ) {\n    let response = Edge.getDefaultIntersectResponse();\n\n    if (!trg[nodeKey]) {\n      return response;\n    }\n\n    // Note: document.getElementById is by far the fastest way to get a node.\n    // compare 2.82ms for querySelector('#node-a2 use.node') vs\n    // 0.31ms and 99us for document.getElementById()\n    const nodeElem = document.getElementById(`node-${trg[nodeKey]}`);\n    if (!nodeElem) {\n      return response;\n    }\n    const trgNode = nodeElem.querySelector(`use.node`);\n\n    // the test for trgNode.getAttributeNS makes sure we really have a node and not some other type of object\n    if (!trgNode || (trgNode && !trgNode.getAttributeNS)) {\n      return response;\n    }\n\n    const xlinkHref = trgNode.getAttributeNS('http://www.w3.org/1999/xlink', 'href');\n\n    if (!xlinkHref) {\n      return response;\n    }\n\n    const defSvgRectElement: SVGRectElement | null = viewWrapperElem.querySelector(`defs>${xlinkHref} rect`);\n    // Conditionally trying to select the element in other ways is faster than trying to\n    // do the selection.\n    const defSvgPathElement: SVGPathElement | null = (\n      !defSvgPathElement ?\n        viewWrapperElem.querySelector(`defs>${xlinkHref} path`) :\n        null\n    );\n    const defSvgCircleElement: SVGCircleElement | SVGEllipseElement | SVGPolygonElement | null = (\n      !defSvgPathElement && !defSvgPathElement ?\n        viewWrapperElem.querySelector(`defs>${xlinkHref} circle, defs>${xlinkHref} ellipse, defs>${xlinkHref} polygon`) :\n        null\n    );\n\n    if (defSvgRectElement) {\n      // it's a rectangle\n      response = {\n        ...response,\n        ...Edge.getRotatedRectIntersect(defSvgRectElement, src, trg, includesArrow, viewWrapperElem)\n      }\n    } else if (defSvgPathElement) {\n      // it's a complex path\n      response = {\n        ...response,\n        ...Edge.getPathIntersect(defSvgPathElement, src, trg, includesArrow, viewWrapperElem)\n      }\n    } else {\n      // it's a circle or some other type\n      response = {\n        ...response,\n        ...Edge.getCircleIntersect(defSvgCircleElement, src, trg, includesArrow, viewWrapperElem)\n      }\n    }\n\n    return response;\n  }\n\n  static getXlinkHref(edgeTypes: any, data: any) {\n    if (data.type && edgeTypes[data.type]) {\n      return edgeTypes[data.type].shapeId;\n    } else if (edgeTypes.emptyEdge) {\n      return edgeTypes.emptyEdge.shapeId;\n    }\n    return null;\n  }\n\n  edgeOverlayRef;\n\n  constructor(props: IEdgeProps) {\n    super(props);\n    this.edgeOverlayRef = React.createRef();\n  }\n\n  getEdgeHandleTranslation = () => {\n    const { nodeSize, nodeKey, sourceNode, targetNode, data } = this.props;\n\n    let pathDescription = this.getPathDescription(data);\n\n    pathDescription = pathDescription.replace(/^M/, '');\n    pathDescription = pathDescription.replace(/L/, ',');\n    const pathDescriptionArr = pathDescription.split(',');\n\n    // [0] = src x, [1] = src y\n    // [2] = trg x, [3] = trg y\n    const diffX = parseFloat(pathDescriptionArr[2]) - parseFloat(pathDescriptionArr[0]);\n    const diffY = parseFloat(pathDescriptionArr[3]) - parseFloat(pathDescriptionArr[1]);\n    const x = parseFloat(pathDescriptionArr[0]) + diffX / 2;\n    const y = parseFloat(pathDescriptionArr[1]) + diffY / 2;\n\n    return `translate(${x}, ${y})`;\n  }\n\n  getEdgeHandleOffsetTranslation = () => {\n    const offset = -(this.props.edgeHandleSize || 0) / 2;\n    return `translate(${offset}, ${offset})`;\n  }\n\n  getEdgeHandleRotation = (negate: any = false) => {\n    let rotated = false\n    const src = this.props.sourceNode;\n    const trg = this.props.targetNode;\n    let theta = Edge.getTheta(src, trg) * 180 / Math.PI;\n    if (negate) {\n      theta = -theta;\n    }\n    if(theta > 90 || theta < -90){\n      theta = theta + 180\n      rotated = true\n    }\n    return [`rotate(${theta})`, rotated];\n  }\n\n  getEdgeHandleTransformation = () => {\n    const translation = this.getEdgeHandleTranslation();\n    const [ rotation, ]= this.getEdgeHandleRotation();\n    const offset = this.getEdgeHandleOffsetTranslation();\n    return `${translation} ${rotation} ${offset}`;\n  }\n\n  getPathDescription(edge: any) {\n    const { sourceNode, targetNode, nodeKey, nodeSize, viewWrapperElem } = this.props;\n    const trgX = targetNode && targetNode.x ? targetNode.x : 0;\n    const trgY = targetNode && targetNode.y ? targetNode.y : 0;\n    const srcX = targetNode && sourceNode.x ? sourceNode.x : 0;\n    const srcY = targetNode && sourceNode.y ? sourceNode.y : 0;\n\n    // To calculate the offset for a specific node we use that node as the third parameter\n    // and the accompanying node as the second parameter, representing where the line\n    // comes from and where it's going to. Don't think of a line as a one-way arrow, but rather\n    // a connection between two points. In this case, to obtain the offsets for the src we\n    // write trg first, then src second. Vice versa to get the offsets for trg.\n    const srcOff = Edge.calculateOffset(nodeSize || 0, targetNode, sourceNode, nodeKey, false, viewWrapperElem);\n    const trgOff = Edge.calculateOffset(nodeSize || 0, sourceNode, targetNode, nodeKey, true, viewWrapperElem);\n\n    const linePoints = [\n      {\n        x: srcX - srcOff.xOff,\n        y: srcY - srcOff.yOff\n      },\n      {\n        x: trgX - trgOff.xOff,\n        y: trgY - trgOff.yOff\n      }\n    ];\n\n    return Edge.lineFunction(linePoints);\n  }\n\n  renderHandleText(data: any) {\n    return (\n      <text\n        className=\"edge-text\"\n        textAnchor=\"middle\"\n        alignmentBaseline=\"central\"\n        transform={`${this.getEdgeHandleTranslation()}`}\n      >\n        {data.handleText}\n      </text>\n    );\n  }\n\n  renderLabelText (data: any) {\n    const [rotation, isRotated] = this.getEdgeHandleRotation()\n    const title = isRotated ? `${data.label_to} ↔ ${data.label_from}` : `${data.label_from} ↔ ${data.label_to}`\n    return (\n      <text\n        className=\"edge-text\"\n        textAnchor=\"middle\"\n        alignmentBaseline=\"central\"\n        style={{fontSize: '11px', stroke: 'none', fill: 'black'}}\n        transform={`${this.getEdgeHandleTranslation()} ${rotation} translate(0,-5)`}\n      >\n        {title}\n      </text>\n    );\n  }\n\n  render() {\n    const { data, edgeTypes, edgeHandleSize, viewWrapperElem } = this.props;\n    if (!viewWrapperElem) {\n      return null;\n    }\n    const id = `${data.source || ''}_${data.target}`;\n    const className = GraphUtils.classNames('edge', {\n      selected: this.props.isSelected\n    });\n\n    return (\n      <g className=\"edge-container\" data-source={data.source} data-target={data.target}>\n        <g className={className}>\n          <path className=\"edge-path\" d={this.getPathDescription(data) || undefined} />\n            <use\n              xlinkHref={Edge.getXlinkHref(edgeTypes, data)}\n              width={edgeHandleSize}\n              height={edgeHandleSize}\n              transform={`${this.getEdgeHandleTransformation()}`}\n            />\n            {data.handleText && this.renderHandleText(data)}\n            {data.label_from && data.label_to && this.renderLabelText(data)}\n        </g>\n        <g className=\"edge-mouse-handler\">\n          <path\n            className=\"edge-overlay-path\"\n            ref={this.edgeOverlayRef}\n            id={id}\n            data-source={data.source}\n            data-target={data.target}\n            d={this.getPathDescription(data) || undefined}\n          />\n        </g>\n      </g>\n    );\n  }\n}\n\nexport default Edge;\n","// @flow\n/*\n  Copyright(c) 2018 Uber Technologies, Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n          http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\n/*\n  Zoom slider and zoom to fit controls for GraphView\n*/\n\nimport React from 'react';\nimport { FaExpand } from 'react-icons/fa';\n\nconst steps = 100; // Slider steps\n\ntype IGraphControlProps = {\n  maxZoom?: number;\n  minZoom?: number;\n  zoomLevel: number;\n  zoomToFit: (event: SyntheticMouseEvent<HTMLButtonElement>) => void;\n  modifyZoom: (delta: number) => boolean;\n}\n\nclass GraphControls extends React.Component<IGraphControlProps> {\n  static defaultProps = {\n    maxZoom: 1.5,\n    minZoom: 0.15\n  };\n\n  constructor(props: IGraphControlProps) {\n    super(props);\n  }\n\n  // Convert slider val (0-steps) to original zoom value range\n  sliderToZoom(val: number) {\n    const { minZoom, maxZoom } = this.props;\n    return val * ((maxZoom || 0) - (minZoom || 0)) / steps + (minZoom || 0);\n  }\n\n  // Convert zoom val (minZoom-maxZoom) to slider range\n  zoomToSlider(val: number) {\n    const { minZoom, maxZoom } = this.props;\n    return (val - (minZoom || 0)) * steps / ((maxZoom || 0) - (minZoom || 0));\n  }\n\n  // Modify current zoom of graph-view\n  zoom = (e: any) => {\n    const { minZoom, maxZoom } = this.props;\n    const sliderVal = e.target.value;\n    const zoomLevelNext = this.sliderToZoom(sliderVal);\n    const delta = zoomLevelNext - this.props.zoomLevel;\n\n    if (zoomLevelNext <= (maxZoom || 0) && zoomLevelNext >= (minZoom || 0)) {\n      this.props.modifyZoom(delta);\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"graph-controls\" >\n        <div className=\"slider-wrapper\">\n          <span>-</span>\n          <input\n            type=\"range\"\n            className=\"slider\"\n            min={this.zoomToSlider(this.props.minZoom || 0)}\n            max={this.zoomToSlider(this.props.maxZoom || 0)}\n            value={this.zoomToSlider(this.props.zoomLevel)}\n            onChange={this.zoom}\n            step=\"1\"\n          />\n          <span>+</span>\n        </div>\n        <button type=\"button\" className=\"slider-button\" onMouseDown={this.props.zoomToFit}>\n          <FaExpand />\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default GraphControls;\n","// @flow\n/*\n  Copyright(c) 2018 Uber Technologies, Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n          http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport * as React from 'react';\nimport GraphUtils from './graph-util';\nimport { type INode } from './node';\n\ntype INodeTextProps = {\n  data: INode;\n  nodeTypes: any; // TODO: create a nodeTypes interface\n  isSelected: boolean;\n}\n\nclass NodeText extends React.Component<INodeTextProps> {\n\n\n  constructor(props){\n      super(props);\n      this.state = {\n        data: props.data\n      }\n  }\n\n  // getTypeText(data: INode, nodeTypes: any) {\n  //   if (data.type && nodeTypes[data.type]) {\n  //     return nodeTypes[data.type].typeText;\n  //\n  //   } else if (nodeTypes.emptyNode) {\n  //     return nodeTypes.emptyNode.typeText;\n  //\n  //   } else {\n  //     return null;\n  //   }\n  // }\n\n  componentWillReceiveProps(props){\n    let data = props.data;\n    data.instance = props.data.instance;\n      this.setState({data: data});\n  }\n\n  getTypeText(){\n    let instance = this.state.data.instance;\n    if(instance) {\n        return this.state.data.instance.cellType.name;\n    }else{\n      return \"\";\n    }\n  }\n\n  getIdText(){\n      let instance = this.state.data.instance;\n      if(instance) {\n          return this.state.data.instance.id;\n      }else{\n          return \"\";\n      }\n  }\n\n  render() {\n    const { data, nodeTypes, isSelected } = this.props;\n    const lineOffset = 20;\n    const idText = this.getIdText();\n    const title = data.instance && data.instance.cellType.inputType !== \"INPUT\" ? data.title : \"\";\n    const className = GraphUtils.classNames('node-text', { selected: isSelected });\n    const typeText = this.getTypeText();//this.getTypeText(data, nodeTypes);\n    return (\n      <text className={className} textAnchor=\"middle\">\n\n        {!!typeText && (\n          <tspan opacity=\"0.5\">{typeText}</tspan>\n        )}\n        {title && (\n          <tspan x={0} dy={lineOffset} fontSize=\"10px\">\n            {title}\n          </tspan>\n        )}\n        {title && <title>{title}</title>}\n\n        {idText && <tspan x={0} dy={lineOffset*1.3} opacity=\"0.4\">{idText}<br/></tspan>}\n\n      </text>\n\n    );\n  }\n}\n\nexport default NodeText;\n","// @flow\n/*\n  Copyright(c) 2018 Uber Technologies, Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n          http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport * as d3 from 'd3';\nimport * as React from 'react';\n// This works in Typescript but causes an import loop for Flowtype. We'll just use `any` below.\n// import { type LayoutEngine } from '../utilities/layout-engine/layout-engine-config';\nimport Edge from './edge';\nimport GraphUtils from './graph-util';\nimport NodeText from './node-text';\n\nexport type INode = {\n  title: string;\n  x?: number | null;\n  y?: number | null;\n  type?: string;\n  subtype?: string | null;\n  [key: string]: any;\n  output: boolean;\n};\n\ntype INodeProps = {\n  data: INode;\n  id: string;\n  nodeTypes: any; // TODO: make a nodeTypes interface\n  nodeSubtypes: any; // TODO: make a nodeSubtypes interface\n  opacity?: number;\n  nodeKey: string;\n  nodeSize?: number;\n  onNodeMouseEnter: (event: any, data: any, hovered: boolean) => void;\n  onNodeMouseLeave: (event: any, data: any) => void;\n  onNodeMove: (point: IPoint, id: string, shiftKey: boolean) => void;\n  onNodeSelected: (data: any, id: string, shiftKey: boolean) => void;\n  onNodeUpdate: (point: IPoint, id: string, shiftKey: boolean) => void;\n  renderNode?: (\n    nodeRef: any,\n    data: any,\n    id: string,\n    selected: boolean,\n    hovered: boolean\n  ) => any;\n  renderNodeText?: (data: any, id: string | number, isSelected: boolean) => any;\n  isSelected: boolean;\n  layoutEngine?: any;\n  viewWrapperElem: HTMLDivElement;\n};\n\ntype INodeState = {\n  hovered: boolean;\n  x: number;\n  y: number;\n  selected: boolean;\n  mouseDown: boolean;\n  drawingEdge: boolean;\n};\n\nexport type IPoint = {\n  x: number;\n  y: number;\n};\n\nclass Node extends React.Component<INodeProps, INodeState> {\n  static defaultProps = {\n    isSelected: false,\n    nodeSize: 154,\n    onNodeMouseEnter: () => { return; },\n    onNodeMouseLeave: () => { return; },\n    onNodeMove: () => { return; },\n    onNodeSelected: () => { return; },\n    onNodeUpdate: () => { return; }\n  };\n\n  static getDerivedStateFromProps(nextProps: INodeProps, prevState: INodeState) {\n    return {\n      selected: nextProps.isSelected,\n      x: nextProps.data.x,\n      y: nextProps.data.y\n    };\n  }\n\n  nodeRef: any;\n  oldSibling: any;\n\n  constructor(props: INodeProps) {\n    super(props);\n\n    this.state = {\n      drawingEdge: false,\n      hovered: false,\n      mouseDown: false,\n      selected: false,\n      x: props.data.x || 0,\n      y: props.data.y || 0,\n    };\n\n    this.nodeRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const dragFunction = d3\n      .drag()\n      .on('drag', this.handleMouseMove)\n      .on('start', this.handleDragStart)\n      .on('end', this.handleDragEnd);\n    d3\n      .select(this.nodeRef.current)\n      .on('mouseout', this.handleMouseOut)\n      .call(dragFunction);\n  }\n\n  handleMouseMove = () => {\n    const mouseButtonDown = d3.event.sourceEvent.buttons === 1;\n    const shiftKey = d3.event.sourceEvent.shiftKey;\n    const { nodeSize, layoutEngine, nodeKey, viewWrapperElem } = this.props;\n    if (!mouseButtonDown) {\n      return;\n    }\n\n    // While the mouse is down, this function handles all mouse movement\n    const newState = {\n      x: d3.event.x,\n      y: d3.event.y\n    };\n\n    if (shiftKey) {\n      this.setState({ drawingEdge: true });\n      // draw edge\n      // undo the target offset subtraction done by Edge\n      const off = Edge.calculateOffset(nodeSize, this.props.data, newState, nodeKey, true, viewWrapperElem);\n      newState.x += off.xOff;\n      newState.y += off.yOff;\n      // now tell the graph that we're actually drawing an edge\n    } else if(!this.state.drawingEdge && layoutEngine) {\n      // move node using the layout engine\n      Object.assign(newState, layoutEngine.getPositionForNode(newState));\n    }\n    this.setState(newState);\n    // Never use this.props.index because if the nodes array changes order\n    // then this function could move the wrong node.\n    this.props.onNodeMove(newState, this.props.data[nodeKey], shiftKey);\n  }\n\n  handleDragStart = () => {\n    if (!this.nodeRef.current) {\n      return;\n    }\n    if (!this.oldSibling) {\n      this.oldSibling = this.nodeRef.current.parentElement.nextSibling;\n    }\n    // Moves child to the end of the element stack to re-arrange the z-index\n    this.nodeRef.current.parentElement.parentElement.appendChild(this.nodeRef.current.parentElement);\n  }\n\n  handleDragEnd = () => {\n    if (!this.nodeRef.current) {\n      return;\n    }\n    const { x, y, drawingEdge } = this.state;\n    const { data, index, nodeKey } = this.props;\n    this.setState({ mouseDown: false, drawingEdge: false });\n\n    if (this.oldSibling && this.oldSibling.parentElement) {\n      this.oldSibling.parentElement.insertBefore(this.nodeRef.current.parentElement, this.oldSibling);\n    }\n\n    const shiftKey = d3.event.sourceEvent.shiftKey;\n    this.props.onNodeUpdate(\n      { x, y },\n      data[nodeKey],\n      shiftKey || drawingEdge\n    );\n\n    this.props.onNodeSelected(data, data[nodeKey], shiftKey || drawingEdge);\n  }\n\n  handleMouseOver = (event: any) => {\n    // Detect if mouse is already down and do nothing.\n    let hovered = false;\n    if ((d3.event && d3.event.buttons !== 1) || (event && event.buttons !== 1)) {\n      hovered = true;\n      this.setState({ hovered });\n    }\n\n    this.props.onNodeMouseEnter(event, this.props.data, hovered);\n  }\n\n  handleMouseOut = (event: any) => {\n    // Detect if mouse is already down and do nothing. Sometimes the system lags on\n    // drag and we don't want the mouseOut to fire while the user is moving the\n    // node around\n\n    this.setState({ hovered: false });\n    this.props.onNodeMouseLeave(event, this.props.data);\n  }\n\n  static getNodeTypeXlinkHref(data: INode, nodeTypes: any) {\n    if (data.type && nodeTypes[data.type]) {\n      return nodeTypes[data.type].shapeId;\n    } else if (nodeTypes.emptyNode) {\n      return nodeTypes.emptyNode.shapeId;\n    }\n    return null;\n  }\n\n  static getNodeSubtypeXlinkHref(data: INode, nodeSubtypes?: any) {\n    if (data.subtype && nodeSubtypes && nodeSubtypes[data.subtype]) {\n      return nodeSubtypes[data.subtype].shapeId;\n    } else if (nodeSubtypes && nodeSubtypes.emptyNode) {\n      return nodeSubtypes.emptyNode.shapeId;\n    }\n    return null;\n  }\n\n  renderShape() {\n    const { renderNode, data, index, nodeTypes, nodeSubtypes, nodeKey } = this.props;\n    const { hovered, selected } = this.state;\n    const props = {\n      height: this.props.nodeSize || 0,\n      width: this.props.nodeSize || 0\n    };\n    const nodeShapeContainerClassName = GraphUtils.classNames('shape');\n    const nodeClassName = GraphUtils.classNames('node', { selected, hovered });\n    const nodeSubtypeClassName = GraphUtils.classNames('subtype-shape', { selected: this.state.selected });\n    const nodeTypeXlinkHref = Node.getNodeTypeXlinkHref(data, nodeTypes) || '';\n    const nodeSubtypeXlinkHref = Node.getNodeSubtypeXlinkHref(data, nodeSubtypes) || '';\n\n    // get width and height defined on def element\n    const defSvgNodeElement: any = nodeTypeXlinkHref ? document.querySelector(`defs>${nodeTypeXlinkHref}`) : null;\n    const nodeWidthAttr = defSvgNodeElement ? defSvgNodeElement.getAttribute('width') : 0;\n    const nodeHeightAttr = defSvgNodeElement ? defSvgNodeElement.getAttribute('height') : 0;\n    props.width = nodeWidthAttr ? parseInt(nodeWidthAttr, 10) : props.width;\n    props.height = nodeHeightAttr ? parseInt(nodeHeightAttr, 10) : props.height;\n\n    if (renderNode) {\n      // Originally: graphView, domNode, datum, index, elements.\n      return renderNode(this.nodeRef, data, data[nodeKey], selected, hovered);\n    } else {\n      return (\n        <g className={nodeShapeContainerClassName} {...props}>\n          {!!data.subtype && (\n            <use\n              data-index={index}\n              className={nodeSubtypeClassName}\n              x={-props.width / 2}\n              y={-props.height / 2}\n              width={props.width}\n              height={props.height}\n              xlinkHref={nodeSubtypeXlinkHref}\n            />\n          )}\n          <use\n            data-index={index}\n            className={nodeClassName}\n            x={-props.width / 2}\n            y={-props.height / 2}\n            width={props.width}\n            height={props.height}\n            xlinkHref={nodeTypeXlinkHref}\n          />\n        </g>\n      );\n    }\n  }\n\n  renderText() {\n    const { data, index, id, nodeTypes, renderNodeText, isSelected } = this.props;\n\n    if (renderNodeText) {\n      return renderNodeText(data, id, isSelected);\n    }\n    return (<NodeText data={data} nodeTypes={nodeTypes} isSelected={this.state.selected} />);\n  }\n\n  render() {\n    const { x, y, hovered, selected } = this.state;\n    const { opacity, id, data } = this.props;\n    const className = GraphUtils.classNames('node', data.type, {\n      hovered,\n      selected\n    });\n    return (\n      <g\n        className={className}\n        onMouseOver={this.handleMouseOver}\n        onMouseOut={this.handleMouseOut}\n        id={id}\n        ref={this.nodeRef}\n        opacity={opacity}\n        transform={`translate(${x}, ${y})`}\n      >\n        {this.renderShape()}\n        {this.renderText()}\n\n      </g>\n    );\n  }\n}\n\nexport default Node;\n","import fetch from 'isomorphic-fetch'\nimport RetinaXService from \"./RetinaXService\";\n\nexport default class CellInstanceService extends RetinaXService{\n\n    constructor() {\n        super();\n    }\n\n    addCellInstance(cellType, x, y) {\n        let url = this.baseUrl + \"/build/addCell/\";\n\n\n        return fetch(url, {\n            method: 'POST',\n            body: JSON.stringify({\n                cellTypeId: cellType.id,\n                x: x,\n                y: y\n            }),\n            headers: this.headers\n        }).then(response => {\n            console.log(response);\n            return response.json();\n        }).then(body => {\n            console.log(body);\n            return body;\n        }).catch((reason => alert(reason)));\n    }\n\n    connectCells(sourceCell, destinationCell, delay, variable){\n        let url = this.baseUrl + \"/build/connect/\";\n\n\n        return fetch(url, {\n            method: 'POST',\n            body: JSON.stringify({\n                sourceCell: sourceCell,\n                destinationCell: destinationCell,\n                delay: delay,\n                inputFunctionVariable: variable\n            }),\n            headers: this.headers\n        }).then(response => {\n            //console.log(response);\n            return response.json();\n        }).then(body => {\n            //console.log(body);\n            return body;\n        }).catch((reason => alert(reason)));\n    }\n\n    areCompatible(sourceCell, destinationCell){\n        let url = this.baseUrl + \"/build/areCompatible?srcTransform=\"+sourceCell.cellType.transformType\n            +\"&destTransform=\" + destinationCell.cellType.transformType;\n\n        return fetch(url, {\n            method: 'GET',\n            headers: this.headers\n        }).then(response => {\n            //console.log(response);\n            return response.json();\n        }).then(body =>{\n            //console.log(body);\n            return body;\n        }).catch((reason => alert(reason)));\n    }\n\n    getCellInstances(){\n        let url = this.baseUrl + \"/build/cellInstances/\";\n\n        return fetch(url, {\n            method: 'GET',\n            headers: this.headers\n        }).then(response => {\n            return response.json();\n        }).then(body =>{\n            return body;\n        }).catch((reason => alert(reason)));\n    }\n\n    getInputCells(){\n        let url = this.baseUrl + \"/build/inputCells/\";\n\n        return fetch(url, {\n            method: 'GET',\n            headers: this.headers\n        }).then(response => {\n            return response.json();\n        }).then(body =>{\n            return body;\n        }).catch((reason => alert(reason)));\n    }\n\n    getConnections(){\n        let url = this.baseUrl + \"/build/connections/\";\n\n        return fetch(url, {\n            method: 'GET',\n            headers: this.headers\n        }).then(response => {\n            console.log(response);\n            return response.json();\n        }).then(body =>{\n            console.log(body);\n            return body;\n        }).catch((reason => alert(reason)));\n    }\n\n    updateCellLocation(cell, x, y){\n        let url = this.baseUrl + \"/build/updateCellLocation/\" + x + \"/\" + y + \"/\";\n\n        return fetch(url, {\n            method: 'PUT',\n            headers: this.headers,\n            body: JSON.stringify(cell)\n        }).catch((reason => alert(reason)));\n    }\n\n\n\n    deleteCellInstance(id){\n        let url = this.baseUrl + \"/build/cellInstances/\"+id;\n\n        return fetch(url,{\n            method: 'DELETE',\n            headers: this.headers\n        }).catch((reason => alert(reason)));\n    }\n\n    deleteConnection(id){\n        let url = this.baseUrl + \"/build/connections/\"+id;\n\n        return fetch(url,{\n            method: 'DELETE',\n            headers: this.headers\n        }).catch((reason => alert(reason)));\n    }\n}","// @flow\n/*\n  Copyright(c) 2018 Uber Technologies, Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n          http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport * as d3 from 'd3';\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../styles/main.scss';\n\nimport { LayoutEngines } from '../utilities/layout-engine/layout-engine-config';\nimport { type LayoutEngineType } from '../utilities/layout-engine/layout-engine-types';\nimport { type IGraphViewProps } from './graph-view-props';\nimport Background from './background';\nimport Defs from './defs';\nimport Edge, { type IEdge, type ITargetPosition } from './edge';\nimport GraphControls from './graph-controls';\nimport GraphUtils, { type INodeMapNode } from './graph-util';\nimport Node, { type INode, type IPoint } from './node';\nimport { Transform } from 'stream';\nimport CellInstanceService from \"../../../../services/CellInstanceService\";\n\ntype IViewTransform = {\n  k: number,\n  x: number,\n  y: number\n}\n\ntype IGraphViewState = {\n  viewTransform?: IViewTransform;\n  hoveredNode: boolean;\n  nodesMap: any;\n  edgesMap: any;\n  nodes: any[];\n  edges: any[];\n  selectingNode: boolean;\n  hoveredNodeData: INode | null;\n  edgeEndNode: INode | null;\n  draggingEdge: boolean;\n  draggedEdge: any;\n  componentUpToDate: boolean;\n  selectedEdgeObj: any;\n  selectedNodeObj: any;\n  documentClicked: boolean;\n  svgClicked: boolean;\n  focused: boolean;\n};\n\nclass GraphView extends React.Component<IGraphViewProps, IGraphViewState> {\n  static defaultProps = {\n    canCreateEdge: (startNode?:INode, endNode?:INode) => true,\n    canDeleteEdge: () => true,\n    canDeleteNode: () => true,\n    edgeArrowSize: 8,\n    gridSpacing: 36,\n    layoutEngineType: 'None',\n    maxTitleChars: 9,\n    maxZoom: 1.5,\n    minZoom: 0.15,\n    nodeSize: 154,\n    readOnly: false,\n    showGraphControls: true,\n    zoomDelay: 1000,\n    zoomDur: 750\n  };\n\n  static getDerivedStateFromProps(nextProps: IGraphViewProps, prevState: IGraphViewState) {\n    const { edges, nodeKey } = nextProps;\n    let nodes = nextProps.nodes;\n    const nodesMap = GraphUtils.getNodesMap(nodes, nodeKey);\n    const edgesMap = GraphUtils.getEdgesMap(edges);\n    GraphUtils.linkNodesAndEdges(nodesMap, edges);\n\n    const selectedNodeMap =\n      nextProps.selected && nodesMap[`key-${nextProps.selected[nodeKey]}`]\n        ? nodesMap[`key-${nextProps.selected[nodeKey]}`]\n        : null;\n    const selectedEdgeMap =\n      nextProps.selected && edgesMap[`${nextProps.selected.source}_${nextProps.selected.target}`]\n        ? edgesMap[`${nextProps.selected.source}_${nextProps.selected.target}`]\n        : null;\n\n    // Handle layoutEngine on initial render\n    if (prevState.nodes.length === 0 && nextProps.layoutEngineType && LayoutEngines[nextProps.layoutEngineType]) {\n      const layoutEngine = new LayoutEngines[nextProps.layoutEngineType](nextProps);\n      const newNodes = layoutEngine.adjustNodes(nodes, nodesMap);\n      nodes = newNodes;\n    }\n\n    const nextState = {\n      componentUpToDate: true,\n      edges,\n      edgesMap,\n      nodes,\n      nodesMap,\n      readOnly: nextProps.readOnly,\n      selectedEdgeObj: {\n        edge: selectedEdgeMap ? selectedEdgeMap.edge : null\n      },\n      selectedNodeObj: {\n        nodeId: selectedNodeMap ? nextProps.selected[nodeKey] : null,\n        node: selectedNodeMap ? selectedNodeMap.node : null\n      },\n      selectionChanged: false\n    };\n\n    return nextState;\n  }\n\n  nodeTimeouts: any;\n  edgeTimeouts: any;\n  renderNodesTimeout: any;\n  renderEdgesTimeout: any;\n  zoom: any;\n  viewWrapper: React.RefObject<HTMLDivElement>;\n  graphSvg: React.RefObject<SVGElement>;\n  entities: any;\n  selectedView: any;\n  view: any;\n  graphControls: any;\n  layoutEngine: any;\n\n  constructor(props: IGraphViewProps) {\n    super(props);\n\n    this.nodeTimeouts = {};\n    this.edgeTimeouts = {};\n    this.renderNodesTimeout = null;\n    this.renderEdgesTimeout = null;\n    this.viewWrapper = React.createRef();\n    this.graphControls = React.createRef();\n    this.graphSvg = React.createRef();\n    this.service = this.props.service;\n    if (props.layoutEngineType) {\n      this.layoutEngine = new LayoutEngines[props.layoutEngineType](props);\n    }\n\n    this.state = {\n      componentUpToDate: false,\n      draggedEdge: null,\n      draggingEdge: false,\n      edgeEndNode: null,\n      edges: [],\n      edgesMap: {},\n      hoveredNode: false,\n      hoveredNodeData: null,\n      nodes: [],\n      nodesMap: {},\n      selectedEdgeObj: null,\n      selectedNodeObj: null,\n      selectingNode: false,\n      documentClicked: false,\n      svgClicked: false,\n      focused: true\n    };\n  }\n\n  componentDidMount() {\n    // TODO: can we target the element rather than the document?\n    document.addEventListener('keydown', this.handleWrapperKeydown);\n    document.addEventListener('click', this.handleDocumentClick);\n\n    this.zoom = d3\n      .zoom()\n      .filter(this.zoomFilter)\n      .scaleExtent([this.props.minZoom || 0, this.props.maxZoom || 0])\n      .on('start', this.handleZoomStart)\n      .on('zoom', this.handleZoom)\n      .on('end', this.handleZoomEnd);\n\n    d3\n      .select(this.viewWrapper.current)\n      .on('touchstart', this.containZoom)\n      .on('touchmove', this.containZoom)\n      .on('click', this.handleSvgClicked) // handle element click in the element components\n      .select('svg')\n      .call(this.zoom);\n\n    this.selectedView = d3.select(this.view);\n\n    // On the initial load, the 'view' <g> doesn't exist until componentDidMount.\n    // Manually render the first view.\n    this.renderView();\n\n    setTimeout(() => {\n      if (this.viewWrapper != null) {\n        this.handleZoomToFit();\n      }\n    }, this.props.zoomDelay);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleWrapperKeydown);\n    document.removeEventListener('click', this.handleDocumentClick);\n  }\n\n  shouldComponentUpdate(nextProps: IGraphViewProps, nextState: IGraphViewState) {\n    if (\n      nextProps.nodes !== this.props.nodes ||\n      nextProps.edges !== this.props.edges ||\n      !nextState.componentUpToDate ||\n      nextProps.selected !== this.props.selected ||\n      nextProps.readOnly !== this.props.readOnly ||\n      nextProps.layoutEngineType !== this.props.layoutEngineType\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  componentDidUpdate(prevProps: IGraphViewProps, prevState: IGraphViewState) {\n    const { nodesMap, edgesMap, nodes, selectedNodeObj, selectedEdgeObj } = this.state;\n    const { layoutEngineType } = this.props;\n\n    if (layoutEngineType && LayoutEngines[layoutEngineType]) {\n      this.layoutEngine = new LayoutEngines[this.props.layoutEngineType](this.props);\n      const newNodes = this.layoutEngine.adjustNodes(nodes, nodesMap);\n      this.setState({\n        nodes: newNodes\n      });\n    }\n\n    const forceReRender = this.props.nodes !== prevProps.nodes || this.props.edges !== prevProps.edges\n\n    // Note: the order is intentional\n    // remove old edges\n    this.removeOldEdges(prevState.edges, edgesMap);\n\n    // remove old nodes\n    this.removeOldNodes(prevState.nodes, prevState.nodesMap, nodesMap);\n\n    // add new nodes\n    this.addNewNodes(this.state.nodes, prevState.nodesMap, selectedNodeObj, prevState.selectedNodeObj, forceReRender);\n\n    // add new edges\n    this.addNewEdges(this.state.edges, prevState.edgesMap, selectedEdgeObj, prevState.selectedEdgeObj, forceReRender);\n\n    this.setState({\n      componentUpToDate: true\n    });\n  }\n\n  getNodeById(id: string | null, nodesMap: any | null): INodeMapNode | null {\n    const nodesMapVar = nodesMap || this.state.nodesMap\n    return nodesMapVar ? nodesMapVar[`key-${id || ''}`] : null;\n  }\n\n  getEdgeBySourceTarget(source: string, target: string): IEdge | null {\n    return this.state.edgesMap ? this.state.edgesMap[`${source}_${target}`] : null;\n  }\n\n  deleteEdgeBySourceTarget(source: string, target: string) {\n    if (this.state.edgesMap && this.state.edgesMap[`${source}_${target}`]) {\n      delete this.state.edgesMap[`${source}_${target}`];\n    }\n  }\n\n  addNewNodes(nodes: INode[], oldNodesMap: any, selectedNode: any, prevSelectedNode: any, forceRender: boolean = false) {\n    if (this.state.draggingEdge) {\n      return;\n    }\n    const nodeKey = this.props.nodeKey;\n    let node = null;\n    let prevNode = null;\n\n    GraphUtils.yieldingLoop(nodes.length, 50, (i) => {\n      node = nodes[i];\n      prevNode = this.getNodeById(node[nodeKey], oldNodesMap);\n      // if there was a previous node and it changed\n      if (prevNode != null && (\n        prevNode.node !== node ||\n        // GraphUtils.hasNodeShallowChanged(prevNode.node, node) ||\n        ( // selection change\n          selectedNode.node !== prevSelectedNode.node &&\n          (\n            (selectedNode.node && node[nodeKey] === selectedNode.node[nodeKey]) ||\n            (prevSelectedNode.node && node[nodeKey] === prevSelectedNode.node[nodeKey])\n          )\n        )\n      )) {\n        // Updated node\n        this.asyncRenderNode(node);\n      } else if (forceRender || !prevNode) {\n        // New node\n        this.asyncRenderNode(node);\n      }\n    });\n  }\n\n  removeOldNodes(prevNodes: any, prevNodesMap: any, nodesMap: any) {\n    const nodeKey = this.props.nodeKey;\n    // remove old nodes\n    // const prevNodeMapKeys = Object.keys(prevNodeMap);\n    for (let i = 0; i < prevNodes.length; i++){\n      const prevNode = prevNodes[i];\n      const nodeId = prevNode[nodeKey];\n\n      // Check for deletions\n      if (this.getNodeById(nodeId, nodesMap)) {\n        continue;\n      }\n\n      const prevNodeMapNode = this.getNodeById(nodeId, prevNodesMap)\n      // remove all outgoing edges\n      prevNodeMapNode.outgoingEdges.forEach((edge) => {\n        this.removeEdgeElement(edge.source, edge.target);\n      });\n\n      // remove all incoming edges\n      prevNodeMapNode.incomingEdges.forEach((edge) => {\n        this.removeEdgeElement(edge.source, edge.target);\n      });\n\n      // remove node\n      // The timeout avoids a race condition\n      setTimeout(() => {\n        GraphUtils.removeElementFromDom(`node-${nodeId}-container`);\n      });\n    }\n  }\n\n  addNewEdges(edges: IEdge[], oldEdgesMap: any, selectedEdge: any, prevSelectedEdge: any, forceRender: boolean = false) {\n    if (!this.state.draggingEdge) {\n      let edge = null;\n      for (let i = 0; i < edges.length; i++){\n        edge = edges[i];\n        if (!edge.source || !edge.target) {\n          continue;\n        }\n        const prevEdge = oldEdgesMap[`${edge.source}_${edge.target}`];\n        if (forceRender ||\n          !prevEdge ||\n          ( // selection change\n            selectedEdge !== prevSelectedEdge &&\n            (\n              (selectedEdge.edge && edge === selectedEdge.edge) ||\n              (prevSelectedEdge.edge && prevSelectedEdge.edge)\n            )\n          )\n        ) {\n          // new edge\n          this.asyncRenderEdge(edge);\n        }\n      }\n    }\n  }\n\n  removeOldEdges = (prevEdges: IEdge[], edgesMap: any) => {\n    // remove old edges\n    let edge = null;\n    for (let i = 0; i < prevEdges.length; i++){\n      edge = prevEdges[i];\n      // Check for deletions\n      if (!edge.source ||\n        !edge.target ||\n        !edgesMap[`${edge.source}_${edge.target}`]) {\n        // remove edge\n        this.removeEdgeElement(edge.source, edge.target);\n        continue;\n      }\n    }\n  }\n\n  removeEdgeElement(source: string, target: string) {\n    const id = `${source}-${target}`;\n    GraphUtils.removeElementFromDom(`edge-${id}-container`);\n  }\n\n  canSwap(sourceNode: INode, hoveredNode: INode | null, swapEdge: any) {\n    return (\n      hoveredNode &&\n      sourceNode !== hoveredNode &&\n      (swapEdge.source !== sourceNode[this.props.nodeKey] ||\n        swapEdge.target !== hoveredNode[this.props.nodeKey])\n    );\n  }\n\n  deleteNode(selectedNode: INode) {\n    const { nodeKey } = this.props;\n    const { nodes } = this.state;\n    const nodeId = selectedNode[nodeKey];\n\n    // delete from local state\n    const newNodesArr = nodes.filter(node => node[nodeKey] !== nodeId);\n    this.setState({\n      componentUpToDate: false,\n      hoveredNode: false\n    });\n\n    // remove from UI\n    GraphUtils.removeElementFromDom(`node-${nodeId}-container`);\n\n    // inform consumer\n    this.props.onSelectNode(null);\n    this.props.onDeleteNode(selectedNode, nodeId, newNodesArr);\n  }\n\n  deleteEdge(selectedEdge: IEdge) {\n    const { edges } = this.state;\n    if (!selectedEdge.source || !selectedEdge.target) {\n      return;\n    }\n    let newEdgesArr = edges.filter(edge => {\n      return !(edge.source === selectedEdge.source && edge.target === selectedEdge.target);\n    });\n    if (selectedEdge.source && selectedEdge.target) {\n      this.deleteEdgeBySourceTarget(selectedEdge.source, selectedEdge.target);\n    }\n\n    this.setState({\n      componentUpToDate: false,\n      edges: newEdgesArr\n    });\n\n    // remove from UI\n    if (selectedEdge.source && selectedEdge.target) {\n      // remove extra custom containers just in case.\n      GraphUtils.removeElementFromDom(`edge-${selectedEdge.source}-${selectedEdge.target}-custom-container`);\n      GraphUtils.removeElementFromDom(`edge-${selectedEdge.source}-${selectedEdge.target}-container`);\n    }\n\n    // inform consumer\n    this.props.onDeleteEdge(selectedEdge, newEdgesArr);\n  }\n\n  handleDelete = (selected: IEdge | INode) => {\n    const { canDeleteNode, canDeleteEdge, readOnly } = this.props;\n    if (readOnly || !selected) { return; }\n    if (!selected.source && canDeleteNode && canDeleteNode(selected)) {\n      // node\n      // $FlowFixMe\n      this.deleteNode(selected);\n    } else if (selected.source && canDeleteEdge && canDeleteEdge(selected)) {\n      // edge\n      // $FlowFixMe\n      this.deleteEdge(selected);\n    }\n  }\n\n  handleWrapperKeydown: KeyboardEventListener = (d) => {\n    const { selected, onUndo, onCopySelected, onPasteSelected } = this.props;\n    const { focused, selectedNodeObj } = this.state;\n    // Conditionally ignore keypress events on the window\n    if (!focused) {\n      return;\n    }\n    switch (d.key) {\n      case 'Delete':\n      case 'Backspace':\n        if (selectedNodeObj) {\n          this.handleDelete(selectedNodeObj.node || selected);\n        }\n        break;\n      case 'z':\n        if ((d.metaKey || d.ctrlKey) && onUndo) {\n          onUndo();\n        }\n        break;\n      case 'c':\n        if ((d.metaKey || d.ctrlKey) && selectedNodeObj.node && onCopySelected) {\n          onCopySelected();\n        }\n        break;\n      case 'v':\n        if ((d.metaKey || d.ctrlKey) && selectedNodeObj.node && onPasteSelected) {\n          onPasteSelected();\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  handleEdgeSelected = (e) => {\n    const { source, target } = e.target.dataset;\n    let newState = {\n      svgClicked: true,\n      focused: true\n    };\n    if (source && target) {\n      const edge: IEdge | null = this.getEdgeBySourceTarget(source, target);\n\n      if (!edge) {\n        return;\n      }\n      const originalArrIndex = (this.getEdgeBySourceTarget(source, target): any).originalArrIndex;\n      const previousSelection = (this.state.selectedEdgeObj && this.state.selectedEdgeObj.edge) || null;\n      newState = {\n        ...newState,\n        selectedEdgeObj: {\n          componentUpToDate: false,\n          edge: this.state.edges[originalArrIndex]\n        }\n      }\n      this.setState(newState);\n      this.props.onSelectEdge(this.state.edges[originalArrIndex]);\n    } else {\n      this.setState(newState);\n    }\n  }\n\n  handleSvgClicked = (d: any, i: any) => {\n    if (this.isPartOfEdge(d3.event.target)) {\n      this.handleEdgeSelected(d3.event);\n      return; // If any part of the edge is clicked, return\n    }\n\n    if (this.state.selectingNode) {\n      this.setState({\n        focused: true,\n        selectingNode: false,\n        svgClicked: true\n      });\n    } else {\n      const previousSelection = (this.state.selectedNodeObj && this.state.selectedNodeObj.node) || null;\n      const previousSelectionIndex = (this.state.selectedNodeObj && this.state.selectedNodeObj.index) || -1;\n\n      // de-select the current selection\n      this.setState({\n        selectedNodeObj: null,\n        focused: true,\n        svgClicked: true\n      });\n      this.props.onSelectNode(null);\n      if (previousSelection) {\n        this.syncRenderNode(previousSelection);\n      }\n\n      if (!this.props.readOnly && d3.event.shiftKey) {\n        const xycoords = d3.mouse(d3.event.target);\n        this.props.onCreateNode(xycoords[0], xycoords[1], d3.event);\n      }\n    }\n  }\n\n  handleDocumentClick = (event: MouseEvent) => {\n    // Ignore document click if it's in the SVGElement\n    if (event &&\n      event.target &&\n      event.target.ownerSVGElement != null &&\n      event.target.ownerSVGElement === this.graphSvg.current\n    ) {\n      return;\n    }\n    this.setState({\n      documentClicked: true,\n      focused: false,\n      svgClicked: false\n    });\n  }\n\n  isPartOfEdge(element) {\n    return !!GraphUtils.findParent(element, '.edge-container');\n  }\n\n  handleNodeMove = (position: IPoint, nodeId: string, shiftKey: boolean) => {\n    const { nodeKey, canCreateEdge, readOnly } = this.props;\n    const nodeMapNode: INodeMapNode | null = this.getNodeById(nodeId);\n    if (!nodeMapNode) {\n      return;\n    }\n    const node = nodeMapNode.node;\n\n\n\n    let service = new CellInstanceService();\n    service.updateCellLocation(node.instance, position.x, position.y);\n\n    if (readOnly) {\n      return;\n    }\n    if (!shiftKey && !this.state.draggingEdge) {\n      // node moved\n      node.x = position.x;\n      node.y = position.y;\n\n      // Update edges for node\n      this.renderConnectedEdgesFromNode(nodeMapNode, true);\n      this.asyncRenderNode(node);\n    } else if ((canCreateEdge && canCreateEdge(nodeId)) || this.state.draggingEdge) {\n      // render new edge\n      this.syncRenderEdge({ source: nodeId, targetPosition: position });\n      this.setState({ draggingEdge: true });\n    }\n  }\n\n  createNewEdge() {\n    const { canCreateEdge, nodeKey, onCreateEdge } = this.props;\n    const { edgesMap, edgeEndNode, hoveredNodeData } = this.state;\n    if (!hoveredNodeData) {\n      return;\n    }\n    GraphUtils.removeElementFromDom('edge-custom-container');\n    if (edgeEndNode) {\n      const mapId1 = `${hoveredNodeData[nodeKey]}_${edgeEndNode[nodeKey]}`;\n      const mapId2 = `${edgeEndNode[nodeKey]}_${hoveredNodeData[nodeKey]}`;\n      if (\n        edgesMap &&\n        hoveredNodeData !== edgeEndNode &&\n        canCreateEdge &&\n        canCreateEdge(hoveredNodeData, edgeEndNode) &&\n        !edgesMap[mapId1] &&\n        !edgesMap[mapId2]\n      ) {\n\n        this.service.areCompatible(hoveredNodeData.instance, edgeEndNode.instance).then(response => {\n          if(Boolean(response.value) === true){\n            const edge: IEdge = {\n              source: hoveredNodeData[nodeKey],\n              target: edgeEndNode[nodeKey]\n            };\n            this.setState({\n              componentUpToDate: false,\n              draggedEdge: null,\n              draggingEdge: false,\n            });\n\n            // this syncRenderEdge will render the edge as un-selected.\n            this.syncRenderEdge(edge);\n            this.syncRenderNode(edgeEndNode);\n            // we expect the parent website to set the selected property to the new edge when it's created\n            onCreateEdge(hoveredNodeData, edgeEndNode);\n          }else{\n            alert(\"Cannot connect - types are not compatible: \" + hoveredNodeData.instance.cellType.transformType + \" -> \" + edgeEndNode.instance.cellType.transformType);\n          }\n\n        });\n      }\n      else {\n        // make the system understand that the edge creation process is done even though it didn't work.\n        this.setState({\n          edgeEndNode: null,\n          draggingEdge: false,\n        });\n      }\n    }\n  }\n\n  handleNodeUpdate = (position: any, nodeId: string, shiftKey: boolean) => {\n    const { onUpdateNode, readOnly } = this.props;\n\n    if (readOnly) {\n      return;\n    }\n\n    // Detect if edge is being drawn and link to hovered node\n    // This will handle a new edge\n    if (shiftKey) {\n      this.createNewEdge();\n    } else {\n      const nodeMap = this.getNodeById(nodeId);\n\n      if (nodeMap) {\n        Object.assign(nodeMap.node, position);\n        onUpdateNode(nodeMap.node);\n      }\n    }\n    // force a re-render\n    this.setState({\n      componentUpToDate: false,\n      focused: true,\n      // Setting hoveredNode to false here because the layout engine doesn't\n      // fire the mouseLeave event when nodes are moved.\n      hoveredNode: false,\n      svgClicked: true,\n    });\n  };\n\n  handleNodeMouseEnter = (event: any, data: any, hovered: boolean) => {\n    // hovered is false when creating edges\n    if (hovered && !this.state.hoveredNode) {\n      this.setState({\n        hoveredNode: true,\n        hoveredNodeData: data\n      });\n    } else if (!hovered && this.state.hoveredNode && this.state.draggingEdge) {\n      this.setState({\n        edgeEndNode: data\n      });\n    } else {\n      this.setState({\n        hoveredNode: true,\n        hoveredNodeData: data\n      });\n    }\n  }\n\n  handleNodeMouseLeave = (event: any, data: any) => {\n\n    if(d3.event == null || d3.event.toElement == null || event == null || event.relatedTarget == null) {\n        return;\n    }\n    if (\n      (d3.event && d3.event.toElement && GraphUtils.findParent(d3.event.toElement, '.node')) ||\n      (event && event.relatedTarget && GraphUtils.findParent(event.relatedTarget, '.node')) ||\n      (d3.event && d3.event.buttons === 1) ||\n      (event && event.buttons === 1)\n    ) {\n      // still within a node\n      return;\n    }\n    if (event && event.relatedTarget) {\n      if (event.relatedTarget.classList.contains('edge-overlay-path')) {\n        return;\n      }\n      this.setState({ hoveredNode: false, edgeEndNode: null });\n    }\n  }\n\n  handleNodeSelected = (node: INode, nodeId: string, creatingEdge: boolean) => {\n    // if creatingEdge then de-select nodes and select new edge instead\n    const previousSelection = (this.state.selectedNodeObj && this.state.selectedNodeObj.node) || null;\n    const previousSelectionIndex = previousSelection ? this.state.selectedNodeObj.index : -1;\n    const newState = {\n      componentUpToDate: false,\n      selectedNodeObj: {\n        nodeId,\n        node\n      }\n    };\n    this.setState(newState);\n\n    if (!creatingEdge) {\n      this.props.onSelectNode(node);\n    }\n  };\n\n  // One can't attach handlers to 'markers' or obtain them from the event.target\n  // If the click occurs within a certain radius of edge target, assume the click\n  // occurred on the arrow\n  isArrowClicked(edge: IEdge | null) {\n    const { nodeSize, edgeArrowSize } = this.props;\n    const eventTarget = d3.event.sourceEvent.target;\n    const arrowSize = edgeArrowSize || 0;\n    if (!edge || eventTarget.tagName !== 'path') {\n      return false; // If the handle is clicked\n    }\n\n    const xycoords = d3.mouse(eventTarget);\n    if (!edge.target) {\n      return false;\n    }\n    const targetNodeMapNode = this.getNodeById(edge.target);\n    const source = {\n      x: xycoords[0],\n      y: xycoords[1]\n    };\n    const edgeCoords = Edge.parsePathToXY(Edge.getEdgePathElement(edge, this.viewWrapper.current));\n\n    // the arrow is clicked if the xycoords are within edgeArrowSize of edgeCoords.target[x,y]\n    return (\n      source.x < edgeCoords.target.x + arrowSize &&\n      source.x > edgeCoords.target.x - arrowSize &&\n      source.y < edgeCoords.target.y + arrowSize &&\n      source.y > edgeCoords.target.y - arrowSize\n    );\n  }\n\n  zoomFilter() {\n    if (d3.event.button || d3.event.ctrlKey) {\n      return false;\n    }\n    return true;\n  }\n\n  // Keeps 'zoom' contained\n  containZoom() {\n    const stop = d3.event.button || d3.event.ctrlKey;\n    if (stop) {\n      d3.event.stopImmediatePropagation(); // stop zoom\n    }\n  }\n\n  handleZoomStart = () => {\n    // Zoom start events also handle edge clicks. We need to determine if an edge\n    // was clicked and deal with that scenario.\n    const sourceEvent = d3.event.sourceEvent;\n\n    if (\n      // graph can't be modified\n      this.props.readOnly ||\n      // no sourceEvent, not an action on an element\n      !sourceEvent ||\n      // not a click event\n      (sourceEvent && !sourceEvent.buttons) ||\n      // not an edge click area\n      (sourceEvent && !sourceEvent.target.classList.contains('edge-overlay-path'))\n    ) {\n      return false;\n    }\n\n    // Clicked on the edge.\n    const { target } = sourceEvent;\n    const edgeId = target.id;\n    const edge = this.state.edgesMap && this.state.edgesMap[edgeId] ? this.state.edgesMap[edgeId].edge : null;\n\n    // Only move edges if the arrow is dragged\n    if (!this.isArrowClicked(edge) || !edge) {\n      return false;\n    }\n    this.removeEdgeElement(edge.source, edge.target);\n    this.setState({ draggingEdge: true, draggedEdge: edge });\n    this.dragEdge(edge);\n  }\n\n  getMouseCoordinates() {\n    let mouseCoordinates = [0, 0];\n    if (this.selectedView) {\n      mouseCoordinates = d3.mouse(this.selectedView.node());\n    }\n    return mouseCoordinates;\n  }\n\n  dragEdge(draggedEdge?: IEdge) {\n    const { nodeSize, nodeKey } = this.props;\n    draggedEdge = draggedEdge || this.state.draggedEdge;\n    if (!draggedEdge) {\n      return;\n    }\n\n    const mouseCoordinates = this.getMouseCoordinates();\n    const targetPosition = {\n      x: mouseCoordinates[0],\n      y: mouseCoordinates[1]\n    };\n    const off = Edge.calculateOffset(nodeSize, (this.getNodeById(draggedEdge.source): any).node, targetPosition, nodeKey);\n    targetPosition.x += off.xOff;\n    targetPosition.y += off.yOff;\n    this.syncRenderEdge({ source: draggedEdge.source, targetPosition });\n    this.setState({\n      draggedEdge,\n      draggingEdge: true\n    });\n  }\n\n  // View 'zoom' handler\n  handleZoom = () => {\n    const { draggingEdge, draggedEdge, hoveredNode } = this.state;\n    const transform: IViewTransform = d3.event.transform;\n\n    if (!draggingEdge) {\n      d3.select(this.view).attr('transform', transform);\n\n      // prevent re-rendering on zoom\n      if (this.state.viewTransform !== transform) {\n        this.setState({\n          viewTransform: transform,\n          draggedEdge: null,\n          draggingEdge: false\n        }, () => {\n          // force the child components which are related to zoom level to update\n          this.renderGraphControls();\n        });\n      }\n    } else if (draggingEdge) {\n      this.dragEdge();\n      return false;\n    }\n  }\n\n  handleZoomEnd = () => {\n    const { draggingEdge, draggedEdge, edgeEndNode, edgesMap } = this.state;\n\n    const { nodeKey } = this.props;\n    if (!draggingEdge || !draggedEdge) {\n      if (draggingEdge && !draggedEdge) {\n        // This is a bad case, sometimes when the graph loses focus while an edge\n        // is being created it doesn't set draggingEdge to false. This fixes that case.\n        this.setState({\n          draggingEdge: false\n        });\n      }\n      return;\n    }\n\n    // Zoom start events also handle edge clicks. We need to determine if an edge\n    // was clicked and deal with that scenario.\n    const draggedEdgeCopy = { ...this.state.draggedEdge };\n\n    // remove custom edge\n    GraphUtils.removeElementFromDom('edge-custom-container');\n    this.setState(\n      {\n        draggedEdge: null,\n        draggingEdge: false,\n        hoveredNode: false\n      },\n      () => {\n        // handle creating or swapping edges\n        const sourceNodeById = this.getNodeById(draggedEdge.source);\n        const targetNodeById = this.getNodeById(draggedEdge.target);\n\n\n        if (!sourceNodeById || !targetNodeById) {\n          return;\n        }\n        const sourceNode = sourceNodeById.node;\n        if (\n          edgeEndNode &&\n          !this.getEdgeBySourceTarget(draggedEdge.source, edgeEndNode[nodeKey]) &&\n          this.canSwap(sourceNode, edgeEndNode, draggedEdge)\n        ) {\n          // determine the target node and update the edge\n          draggedEdgeCopy.target = edgeEndNode[nodeKey];\n          this.syncRenderEdge(draggedEdgeCopy);\n          this.props.onSwapEdge(\n            sourceNodeById.node,\n            edgeEndNode,\n            draggedEdge\n          );\n        } else {\n          // this resets the dragged edge back to its original position.\n          this.syncRenderEdge(draggedEdge);\n        }\n      }\n    );\n  }\n\n  // Zooms to contents of this.refs.entities\n  handleZoomToFit = () => {\n    const parent = d3.select(this.viewWrapper.current).node();\n    const entities = d3.select(this.entities).node();\n    const viewBBox = entities.getBBox ? entities.getBBox() : null;\n    if (!viewBBox) { return; }\n\n    const width = parent.clientWidth;\n    const height = parent.clientHeight;\n    const minZoom = this.props.minZoom || 0;\n    const maxZoom = this.props.maxZoom || 2;\n\n    const next = {\n      k: (minZoom + maxZoom) / 2,\n      x: 0,\n      y: 0,\n    };\n\n    if (viewBBox.width > 0 && viewBBox.height > 0) {\n      // There are entities\n      const dx = viewBBox.width;\n      const dy = viewBBox.height;\n      const x = viewBBox.x + viewBBox.width / 2;\n      const y = viewBBox.y + viewBBox.height / 2;\n      next.k = 0.9 / Math.max(dx / width, dy / height);\n\n      if (next.k < minZoom) {\n        next.k = minZoom;\n      } else if (next.k > maxZoom) {\n        next.k = maxZoom;\n      }\n\n      next.x = width / 2 - next.k * x;\n      next.y = height / 2 - next.k * y;\n    }\n\n    this.setZoom(next.k, next.x, next.y, this.props.zoomDur);\n  }\n\n  // Updates current viewTransform with some delta\n  modifyZoom = (modK: number = 0, modX: number = 0, modY: number = 0, dur: number = 0) => {\n    const parent = d3.select(this.viewWrapper.current).node();\n    const center = {\n      x: parent.clientWidth / 2,\n      y: parent.clientHeight / 2\n    };\n    const extent = this.zoom.scaleExtent();\n    const viewTransform: any = this.state.viewTransform;\n\n    const next = {\n      k: viewTransform.k,\n      x: viewTransform.x,\n      y: viewTransform.y\n    };\n\n    const targetZoom = next.k * (1 + modK);\n    next.k = targetZoom;\n\n    if (targetZoom < extent[0] || targetZoom > extent[1]) {\n      return false;\n    }\n\n    const translate0 = {\n      x: (center.x - next.x) / next.k,\n      y: (center.y - next.y) / next.k\n    };\n\n    const l = {\n      x: translate0.x * next.k + next.x,\n      y: translate0.y * next.k + next.y\n    };\n\n    next.x += center.x - l.x + modX;\n    next.y += center.y - l.y + modY;\n    this.setZoom(next.k, next.x, next.y, dur);\n    return true;\n  }\n\n  // Programmatically resets zoom\n  setZoom(k: number = 1, x: number = 0, y: number = 0, dur: number = 0) {\n    const t = d3.zoomIdentity.translate(x, y).scale(k);\n\n    d3\n      .select(this.viewWrapper.current)\n      .select('svg')\n      .transition()\n      .duration(dur)\n      .call(this.zoom.transform, t);\n  }\n\n  // Renders 'graph' into view element\n  renderView() {\n    // Update the view w/ new zoom/pan\n    this.selectedView.attr('transform', this.state.viewTransform);\n\n    clearTimeout(this.renderNodesTimeout);\n    this.renderNodesTimeout = setTimeout(this.renderNodes);\n  }\n\n  renderBackground = () => {\n    const { gridSize, backgroundFillId, renderBackground } = this.props;\n    if (renderBackground) {\n      return renderBackground(gridSize);\n    } else {\n      return <Background gridSize={gridSize} backgroundFillId={backgroundFillId} />;\n    }\n  }\n\n  getNodeComponent = (id: string, node: INode) => {\n    const { nodeTypes, nodeSubtypes, nodeSize, renderNode, renderNodeText, nodeKey } = this.props;\n    return (\n      <Node\n        key={id}\n        id={id}\n        data={node}\n        nodeTypes={nodeTypes}\n        nodeSize={nodeSize}\n        nodeKey={nodeKey}\n        nodeSubtypes={nodeSubtypes}\n        onNodeMouseEnter={this.handleNodeMouseEnter}\n        onNodeMouseLeave={this.handleNodeMouseLeave}\n        onNodeMove={this.handleNodeMove}\n        onNodeUpdate={this.handleNodeUpdate}\n        onNodeSelected={this.handleNodeSelected}\n        renderNode={renderNode}\n        renderNodeText={renderNodeText}\n        isSelected={this.state.selectedNodeObj.node === node}\n        layoutEngine={this.layoutEngine}\n        viewWrapperElem={this.viewWrapper.current}\n      />\n    );\n  };\n\n  renderNode(id: string, element: Element) {\n    if (!this.entities) {\n      return null;\n    }\n    const containerId = `${id}-container`;\n    let nodeContainer: HTMLElement | Element | null = document.getElementById(containerId);\n\n    if (!nodeContainer) {\n      nodeContainer = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n      nodeContainer.id = containerId;\n      this.entities.appendChild(nodeContainer);\n    }\n\n    // ReactDOM.render replaces the insides of an element This renders the element\n    // into the nodeContainer\n    const anyElement: any = element;\n    ReactDOM.render(anyElement, nodeContainer);\n  }\n\n  renderConnectedEdgesFromNode(node: INodeMapNode, nodeMoving: boolean = false) {\n    if (this.state.draggingEdge) {\n      return;\n    }\n\n    node.incomingEdges.forEach((edge) => {\n      this.asyncRenderEdge(edge, nodeMoving);\n    });\n    node.outgoingEdges.forEach((edge) => {\n      this.asyncRenderEdge(edge, nodeMoving);\n    });\n  }\n\n  asyncRenderNode(node: INode) {\n    const nodeKey = this.props.nodeKey;\n    const timeoutId = `nodes-${node[nodeKey]}`;\n    cancelAnimationFrame(this.nodeTimeouts[timeoutId]);\n    this.nodeTimeouts[timeoutId] = requestAnimationFrame(() => {\n      this.syncRenderNode(node);\n    });\n  }\n\n  syncRenderNode(node: INode) {\n    const nodeKey = this.props.nodeKey;\n    const id = `node-${node[nodeKey]}`;\n    const element: any = this.getNodeComponent(id, node);\n    const nodesMapNode = this.getNodeById(node[nodeKey]);\n    this.renderNode(id, element);\n    if (nodesMapNode) {\n      this.renderConnectedEdgesFromNode(nodesMapNode);\n    }\n  }\n\n  renderNodes = () => {\n    if (!this.entities) {\n      return;\n    }\n\n    this.state.nodes.forEach((node, i) => {\n      this.asyncRenderNode(node);\n    });\n  }\n\n  isEdgeSelected = (edge: IEdge) => {\n    return !!this.state.selectedEdgeObj &&\n      !!this.state.selectedEdgeObj.edge &&\n      this.state.selectedEdgeObj.edge.source === edge.source &&\n      this.state.selectedEdgeObj.edge.target === edge.target;\n  }\n\n  getEdgeComponent = (edge: IEdge | any) => {\n    const sourceNodeMapNode = this.getNodeById(edge.source);\n    const sourceNode = sourceNodeMapNode ? sourceNodeMapNode.node : null;\n    const targetNodeMapNode = this.getNodeById(edge.target);\n    const targetNode = targetNodeMapNode ? targetNodeMapNode.node : null;\n    const targetPosition = edge.targetPosition;\n    const { edgeTypes, edgeHandleSize, nodeSize, nodeKey} = this.props;\n\n    return (\n      <Edge\n        data={edge}\n        edgeTypes={edgeTypes}\n        edgeHandleSize={edgeHandleSize}\n        nodeSize={nodeSize}\n        sourceNode={sourceNode}\n        targetNode={targetNode || targetPosition}\n        nodeKey={nodeKey}\n        viewWrapperElem={this.viewWrapper.current}\n        isSelected={this.isEdgeSelected(edge)}\n      />\n    );\n  }\n\n\n  renderEdge = (id: string, element: any, edge: IEdge, nodeMoving: boolean = false) => {\n    if (!this.entities) {\n      return null;\n    }\n    let containerId = `${id}-container`;\n    const customContainerId = `${id}-custom-container`;\n    const { draggedEdge } = this.state;\n    const { afterRenderEdge } = this.props;\n    let edgeContainer = document.getElementById(containerId);\n    if (nodeMoving && edgeContainer) {\n      edgeContainer.style.display = 'none';\n      containerId = `${id}-custom-container`;\n      edgeContainer = document.getElementById(containerId);\n    } else if (edgeContainer) {\n      const customContainer = document.getElementById(customContainerId);\n      edgeContainer.style.display = '';\n      if (customContainer) {\n        customContainer.remove();\n      }\n    }\n    if (!edgeContainer && edge !== draggedEdge) {\n      const newSvgEdgeContainer = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n      newSvgEdgeContainer.id = containerId;\n      this.entities.appendChild(newSvgEdgeContainer);\n      edgeContainer = newSvgEdgeContainer;\n    }\n    // ReactDOM.render replaces the insides of an element This renders the element\n    // into the edgeContainer\n    if (edgeContainer) {\n      ReactDOM.render(element, edgeContainer);\n      if (afterRenderEdge) {\n        return afterRenderEdge(id, element, edge, edgeContainer, this.isEdgeSelected(edge));\n      }\n    }\n  }\n\n  asyncRenderEdge = (edge: IEdge, nodeMoving: boolean = false) => {\n    if (!edge.source || !edge.target) {\n      return;\n    }\n    const timeoutId = `edges-${edge.source}-${edge.target}`;\n    cancelAnimationFrame(this.edgeTimeouts[timeoutId]);\n    this.edgeTimeouts[timeoutId] = requestAnimationFrame(() => {\n      this.syncRenderEdge(edge, nodeMoving);\n    });\n  }\n\n\n  syncRenderEdge(edge: IEdge | any, nodeMoving: boolean = false) {\n    if (!edge.source) {\n      return;\n    }\n\n    // We have to use the 'custom' id when we're drawing a new node\n    const idVar = edge.target ? `${edge.source}-${edge.target}` : 'custom';\n    const id = `edge-${idVar}`;\n    const element = this.getEdgeComponent(edge);\n    this.renderEdge(id, element, edge, nodeMoving);\n  }\n\n\n  renderEdges = () => {\n    const { edges, draggingEdge } = this.state;\n    if (!this.entities || draggingEdge) {\n      return;\n    }\n    for (let i = 0; i < edges.length; i++){\n      this.asyncRenderEdge(edges[i]);\n    }\n  }\n\n  /*\n   * GraphControls is a special child component. To maximize responsiveness we disable\n   * rendering on zoom level changes, but this component still needs to update.\n   * This function ensures that it updates into the container quickly upon zoom changes\n   * without causing a full GraphView render.\n   */\n  renderGraphControls() {\n    if (!this.props.showGraphControls || !this.viewWrapper) {\n      return;\n    }\n\n    const graphControlsWrapper = this.viewWrapper.current.querySelector('.graph-controls-wrapper')\n    if (graphControlsWrapper) {\n      ReactDOM.render(\n        <GraphControls\n          ref={this.graphControls}\n          minZoom={this.props.minZoom}\n          maxZoom={this.props.maxZoom}\n          zoomLevel={this.state.viewTransform ? this.state.viewTransform.k : 1}\n          zoomToFit={this.handleZoomToFit}\n          modifyZoom={this.modifyZoom}\n        />,\n        graphControlsWrapper\n      );\n    }\n  }\n\n  render() {\n    const { edgeArrowSize, gridSpacing, gridDotSize, nodeTypes, nodeSubtypes, edgeTypes, renderDefs } = this.props;\n    return (\n      <div\n        className=\"view-wrapper\"\n        ref={this.viewWrapper}\n      >\n        <svg className=\"graph\" ref={this.graphSvg}>\n          <Defs\n            edgeArrowSize={edgeArrowSize}\n            gridSpacing={gridSpacing}\n            gridDotSize={gridDotSize}\n            nodeTypes={nodeTypes}\n            nodeSubtypes={nodeSubtypes}\n            edgeTypes={edgeTypes}\n            renderDefs={renderDefs}\n          />\n          <g className=\"view\" ref={(el) => (this.view = el)}>\n            {this.renderBackground()}\n\n            <g className=\"entities\" ref={(el) => (this.entities = el)} />\n          </g>\n        </svg>\n        <div className=\"graph-controls-wrapper\" />\n      </div>\n    );\n  }\n}\n\nexport default GraphView;\n","import React from 'react'\nimport {Button, Modal, ModalBody, ModalFooter, ModalHeader, Form, FormGroup, Label, Col, Input, Dropdown, DropdownItem, DropdownMenu, DropdownToggle} from \"reactstrap\";\nimport CellInstanceService from \"../../services/CellInstanceService\";\n\nexport default class ConnectForm extends React.Component {\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            dropdownOpen: false,\n            selected: undefined,\n            delay: 0\n        };\n\n        this.toggle = props.toggle;\n        this.dropToggle = this.dropToggle.bind(this);\n        this.srcCell = props.sourceCell;\n        this.destCell = props.destCell;\n        this.service = new CellInstanceService();\n        this.onConnectCells = props.onConnectCells;\n    }\n\n    dropToggle() {\n        this.setState(prevState => ({\n            dropdownOpen: !prevState.dropdownOpen\n        }));\n    }\n\n    submit(){\n        this.service.connectCells(this.srcCell.instance, this.destCell.instance, this.state.delay, this.state.selected);\n        this.onConnectCells(this.srcCell, this.destCell, this.state.selected, this.state.delay);\n        this.toggle();\n    }\n\n    render() {\n\n        let variables = this.destCell.instance.cellType.function.variables.map((variable) => variable.variableName);\n\n        /*\n        {JSON.stringify(this.srcCell.instance)} to {JSON.stringify(this.destCell.instance)}\n         */\n\n        return (\n            <div>\n                <ModalHeader toggle={this.toggle}>Connect Cells</ModalHeader>\n                <ModalBody>\n                    <Form>\n                        <FormGroup row>\n                            <Label for=\"delay\" sm={2}>Delay:</Label>\n                            <Col sm={10}>\n                                <Input type=\"number\" pattern=\"[0-9]*\" min=\"0\" name=\"delay\" id=\"delay\" placeholder=\"0, 1, 2, 3...\" value={this.state.delay} onChange={(event) => this.setState({delay: event.target.value})}/>\n                            </Col>\n                        </FormGroup>\n                        <FormGroup row>\n                            <Label for=\"variable\" sm={6}>Destination Variable:</Label>\n                            <Col sm={6}>\n                                <Dropdown isOpen={this.state.dropdownOpen} toggle={this.dropToggle}>\n                                    <DropdownToggle caret>\n                                        {this.state.selected ? this.state.selected : \"Select Variable\"}\n                                    </DropdownToggle>\n                                    <DropdownMenu className={\"variablePicker\"}>\n                                        <DropdownItem header>Choose one:</DropdownItem>\n                                        {variables.map((variable, index) =>{\n                                            return <DropdownItem key={index} onClick={() => this.setState({selected: variable})}>{variable} </DropdownItem>;\n                                        })}\n                                    </DropdownMenu>\n                                </Dropdown>\n                            </Col>\n                        </FormGroup>\n                    </Form>\n                </ModalBody>\n                <ModalFooter>\n                    <Button color=\"primary\" onClick={this.submit.bind(this)} disabled={!this.state.selected || !this.state.delay}>Connect</Button>{' '}\n                    <Button color=\"secondary\" onClick={this.toggle}>Cancel</Button>\n                </ModalFooter>\n\n            </div>\n        );\n    }\n}","// @flow\n/*\n  Copyright(c) 2018 Uber Technologies, Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n          http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\n/*\n  Example usage of GraphView component\n*/\n\nimport * as React from 'react';\nimport {Modal, ModalHeader, ModalBody, ModalFooter, Button} from 'reactstrap';\nimport { GraphView, type IEdgeType as IEdge, type INodeType as INode, type LayoutEngineType } from '../';\nimport GraphConfig, {\n  edgeTypes,\n  EMPTY_EDGE_TYPE,\n  EMPTY_TYPE,\n  NODE_KEY,\n  nodeTypes,\n  POLY_TYPE,\n  SPECIAL_CHILD_SUBTYPE,\n  SPECIAL_EDGE_TYPE,\n  SPECIAL_TYPE,\n  SKINNY_TYPE\n} from './graph-config';\nimport CellInstanceService from \"../../../../services/CellInstanceService\";\nimport ConnectForm from \"../../../CreateConnectionUI/ConnectForm\";\nimport {NONE, SELECTING_OUTPUT_CELLS, UPLOADING_INPUT_FILE} from \"../../NetworkBuilder\"; // Configures node/edge types\ntype IGraph = {\n  nodes: INode[];\n  edges: IEdge[];\n};\n\n// NOTE: Edges must have 'source' & 'target' attributes\n// In a more realistic use case, the graph would probably originate\n// elsewhere in the App or be generated from some other state upstream of this component.\nconst sample: IGraph = {\n  edges: [],\n  nodes: []\n};\n\n\n\nfunction generateSample(totalNodes) {\n  const generatedSample: IGraph = {\n    edges: [],\n    nodes: []\n  };\n  let y = 0;\n  let x = 0;\n\n  const numNodes = totalNodes ? totalNodes : 0;\n  // generate large array of nodes\n  // These loops are fast enough. 1000 nodes = .45ms + .34ms\n  // 2000 nodes = .86ms + .68ms\n  // implying a linear relationship with number of nodes.\n  for (let i = 1; i <= numNodes; i++) {\n    if (i % 20 === 0) {\n      y++;\n      x = 0;\n    } else {\n      x++;\n    }\n    generatedSample.nodes.push({\n      id: `a${i}`,\n      title: `Node ${i}`,\n      type: nodeTypes[Math.floor(nodeTypes.length * Math.random())],\n      x: 0 + 200 * x,\n      y: 0 + 200 * y\n    });\n  }\n  // link each node to another node\n  for (let i = 1; i < numNodes; i++) {\n    generatedSample.edges.push({\n      source: `a${i}`,\n      target: `a${i + 1}`,\n      type: edgeTypes[Math.floor(edgeTypes.length * Math.random())]\n    });\n  }\n  return generatedSample;\n}\n\ntype IGraphProps = {\n  selectedType: any\n};\n\n\ntype IGraphState = {\n  graph: any;\n  selected: any;\n  totalNodes: number;\n  copiedNode: any;\n  layoutEngineType?: LayoutEngineType;\n};\n\nexport default class Graph extends React.Component<IGraphProps, IGraphState> {\n  GraphView;\n\n  constructor(props: IGraphProps) {\n    super(props);\n\n      this.state = {\n          copiedNode: null,\n          graph: sample,\n          layoutEngineType: undefined,\n          selected: null,\n          totalNodes: sample.nodes.length,\n          selectedType: props.selectedType,\n          connectModal: false,\n          simulationMode: props.simulationMode,\n          simulationStep: props.simulationStep,\n          simulationOutputCells: [],\n          updatedInputCells: false\n      };\n      this.GraphView = React.createRef();\n      this.service = new CellInstanceService();\n      this.toggle = this.toggle.bind(this);\n      this.onOutputCellSelected = props.onOutputCellSelected;\n      this.onAddCellOrConnectCells = this.props.onAddCellOrConnectCells;\n\n      this.refresh();\n  }\n\n\n    componentWillReceiveProps(props) {\n        if(props.simulationStep === UPLOADING_INPUT_FILE && !this.state.updatedInputCells){\n            this.setState({updatedInputCells: true})\n        }\n        this.setState(\n            {\n                selectedType: props.selectedType,\n                simulationMode: props.simulationMode,\n                simulationStep: props.simulationStep\n            });\n\n    }\n\n\n    refresh(){\n        let graph = this.state.graph;\n        graph.nodes = [];\n        this.service.getCellInstances().then(cellInstances => {\n            cellInstances.forEach((instance, i) => {\n                console.log(\"#\"+ i + \") \"+ JSON.stringify(instance));\n                let id = instance.id;\n                let x = instance.xCoordinate;\n                let y = instance.yCoordinate;\n                let title = instance.cellType.function.expression;\n\n                let type = instance.cellType.transformType !== 'INPUT_TO_ANALOG' ? EMPTY_TYPE : SPECIAL_TYPE;\n\n                let viewNode = {\n                    id: id,\n                    title: title,\n                    type,\n                    x,\n                    y\n                };\n\n                viewNode.instance = instance;\n                graph.nodes.push(viewNode);\n            });\n\n            this.service.getConnections().then(connections => {\n                graph.edges = connections.filter(connection => connection.fromCell !== null && connection.toCell !== null).map(connection => {\n                    const type = connection.fromCell.cellType.name === 'Input' ? SPECIAL_EDGE_TYPE : EMPTY_EDGE_TYPE;\n                        return {\n                            source: connection.fromCell.id,\n                            target: connection.toCell.id,\n                            type: type,\n                            handleText: connection.variable.variableName,\n                            id: connection.id\n                        };\n                });\n\n                this.setState({graph});\n            });\n\n\n\n        });\n\n        this.onAddCellOrConnectCells();\n\n    }\n\n\n    componentDidMount(){\n        this.refresh();\n    }\n\n\n  // Helper to find the index of a given node\n  getNodeIndex(searchNode: INode | any) {\n    return this.state.graph.nodes.findIndex((node) => {\n      return node[NODE_KEY] === searchNode[NODE_KEY];\n    });\n  }\n\n  // Helper to find the index of a given edge\n  getEdgeIndex(searchEdge: IEdge) {\n    return this.state.graph.edges.findIndex((edge) => {\n      return edge.source === searchEdge.source && edge.target === searchEdge.target;\n    });\n  }\n\n  // Given a nodeKey, return the corresponding node\n  getViewNode(nodeKey: string) {\n    const searchNode = {};\n    searchNode[NODE_KEY] = nodeKey;\n    const i = this.getNodeIndex(searchNode);\n    return this.state.graph.nodes[i];\n  }\n\n  makeItLarge = () => {\n    const graph = this.state.graph;\n    const generatedSample = generateSample(this.state.totalNodes);\n    graph.nodes = generatedSample.nodes;\n    graph.edges = generatedSample.edges;\n    this.setState(this.state);\n  };\n\n  addStartNode = () => {\n    const graph = this.state.graph;\n    // using a new array like this creates a new memory reference\n    // this will force a re-render\n    graph.nodes = [\n      {\n        id: Date.now(),\n        title: 'Node A',\n        type: SPECIAL_TYPE,\n        x: 0,\n        y: 0\n      },\n      ...this.state.graph.nodes\n    ];\n    this.setState({\n      graph\n    });\n  };\n\n  deleteStartNode = () => {\n    const graph = this.state.graph;\n    graph.nodes.splice(0, 1);\n    // using a new array like this creates a new memory reference\n    // this will force a re-render\n    graph.nodes = [...this.state.graph.nodes];\n    this.setState({\n      graph\n    });\n  };\n\n  handleChange = (event: any) => {\n    this.setState(\n      {\n        totalNodes: parseInt(event.target.value || '0', 10)\n      },\n      this.makeItLarge\n    );\n  };\n\n  /*\n   * Handlers/Interaction\n   */\n\n  // Called by 'drag' handler, etc..\n  // to sync updates from D3 with the graph\n  onUpdateNode = (viewNode: INode) => {\n    const graph = this.state.graph;\n    const i = this.getNodeIndex(viewNode);\n\n    graph.nodes[i] = viewNode;\n    this.setState({ graph });\n  };\n\n  // Node 'mouseUp' handler\n  onSelectNode = (viewNode: INode | null) => {\n    // Deselect events will send Null viewNode\n\n      if(!this.state.simulationMode) {\n          this.setState({selected: viewNode});\n      }else if(this.state.simulationStep === SELECTING_OUTPUT_CELLS && viewNode !== null){\n          this.onOutputCellSelected(viewNode);\n      }\n  };\n\n  // Edge 'mouseUp' handler\n  onSelectEdge = (viewEdge: IEdge) => {\n    this.setState({ selected: viewEdge });\n  };\n\n  // Updates the graph with a new node\n  onCreateNode = (x: number, y: number) => {\n    const graph = this.state.graph;\n\n    // This is just an example - any sort of logic\n    // could be used here to determine node type\n    // There is also support for subtypes. (see 'sample' above)\n    // The subtype geometry will underlay the 'type' geometry for a node\n\n    if(this.state.selectedType == null)\n      return;\n    \n      const type = this.state.selectedType.view;\n      let viewNode = {\n          id: new Date(),\n          title: this.state.selectedType.function.expression,\n          type,\n          x,\n          y,\n      };\n\n\n\n      graph.nodes = [...graph.nodes, viewNode];\n      this.setState({ graph });\n\n      this.service.addCellInstance(this.state.selectedType, x, y).then(response =>{\n        viewNode.instance = response;\n        console.log(this.state.graph);\n      });\n\n      this.onAddCellOrConnectCells();\n\n  };\n\n  // Deletes a node from the graph\n  onDeleteNode = (viewNode: INode, nodeId: string, nodeArr: INode[]) => {\n    const graph = this.state.graph;\n    // Delete any connected edges\n    const newEdges = graph.edges.filter((edge, i) => {\n      return edge.source !== viewNode[NODE_KEY] && edge.target !== viewNode[NODE_KEY];\n    });\n    graph.nodes = nodeArr;\n    graph.edges = newEdges;\n\n    this.service.deleteCellInstance(viewNode.instance.id);\n\n    this.setState({ graph, selected: null });\n\n    this.onAddCellOrConnectCells();\n  };\n\n\n\n  toggle() {\n        this.setState(prevState => ({\n            connectModal: !prevState.connectModal\n        }));\n  }\n\n\n  // Creates a new node between two edges\n  onCreateEdge = (sourceViewNode: INode, targetViewNode: INode) => {\n    const graph = this.state.graph;\n    // This is just an example - any sort of logic\n    // could be used here to determine edge type\n    const type = sourceViewNode.type === SPECIAL_TYPE ? SPECIAL_EDGE_TYPE : EMPTY_EDGE_TYPE;\n\n    const viewEdge = {\n      source: sourceViewNode[NODE_KEY],\n      target: targetViewNode[NODE_KEY],\n      type:type\n    };\n\n    console.log(JSON.stringify(viewEdge));\n\n    this.srcCell = sourceViewNode;\n    this.destCell = targetViewNode;\n\n\n\n    this.toggle();\n      this.onAddCellOrConnectCells();\n\n      // Only add the edge when the source node is not the same as the target\n      if (viewEdge.source !== viewEdge.target) {\n          graph.edges = [...graph.edges, viewEdge];\n\n\n          this.setState({\n              graph,\n              selected: viewEdge\n          });\n      }\n\n  };\n\n  // Called when an edge is reattached to a different target.\n  onSwapEdge = (sourceViewNode: INode, targetViewNode: INode, viewEdge: IEdge) => {\n    const graph = this.state.graph;\n    const i = this.getEdgeIndex(viewEdge);\n    const edge = JSON.parse(JSON.stringify(graph.edges[i]));\n\n    edge.source = sourceViewNode[NODE_KEY];\n    edge.target = targetViewNode[NODE_KEY];\n    graph.edges[i] = edge;\n    // reassign the array reference if you want the graph to re-render a swapped edge\n    graph.edges = [...graph.edges];\n\n    this.setState({\n      graph,\n      selected: edge\n    });\n\n    this.onAddCellOrConnectCells();\n\n  };\n\n  // Called when an edge is deleted\n  onDeleteEdge = (viewEdge: IEdge, edges: IEdge[]) => {\n    const graph = this.state.graph;\n    graph.edges = edges;\n\n    this.service.deleteConnection(viewEdge.id);\n    this.setState({\n      graph,\n      selected: null\n    });\n\n    this.onAddCellOrConnectCells();\n  };\n\n  onUndo = () => {\n    // Not implemented\n    console.warn('Undo is not currently implemented in the example.');\n    // Normally any add, remove, or update would record the action in an array.\n    // In order to undo it one would simply call the inverse of the action performed. For instance, if someone\n    // called onDeleteEdge with (viewEdge, i, edges) then an undelete would be a splicing the original viewEdge\n    // into the edges array at position i.\n  }\n\n  onCopySelected = () => {\n    if (this.state.selected.source) {\n      console.warn('Cannot copy selected edges, try selecting a node instead.');\n      return;\n    }\n\n    const x = this.state.selected.x + 10;\n    const y = this.state.selected.y + 10;\n    this.setState({\n      copiedNode: { ...this.state.selected, x, y }\n    });\n  }\n\n  onPasteSelected = () => {\n    if (!this.state.copiedNode) {\n      console.warn('No node is currently in the copy queue. Try selecting a node and copying it with Ctrl/Command-C');\n    }\n\n    const graph = this.state.graph;\n    const newNode = { ...this.state.copiedNode, id: Date.now() };\n    graph.nodes = [...graph.nodes, newNode];\n    this.forceUpdate();\n  }\n\n  handleChangeLayoutEngineType = (event: any) => {\n    this.setState({ layoutEngineType: (event.target.value: LayoutEngineType | 'None') });\n  };\n\n\n    /*\n      // {\n       //   handleText: '5',\n       //   source: 'start1',\n       //   target: 'a1',\n       //   type: SPECIAL_EDGE_TYPE\n       // }\n      */\n    onConnectCells(source, target, connectionVariable, delay){\n      let graph = this.state.graph;\n\n        graph.edges = graph.edges.filter(edge => (edge.handleText &&\n            ((edge.target !== target.id || edge.handleText !== connectionVariable))) || !edge.handleText);\n\n\n        let index = graph.edges.findIndex(edge => {\n        return edge.source === source.id && edge.target === target.id;\n      });\n\n        console.log(\"Current edges:\\n\" + JSON.stringify(graph.edges));\n        console.log(\"source:\" + JSON.stringify(source));\n        console.log(\"target:\" + JSON.stringify(target));\n\n        console.log('index: ' + index);\n        console.log('connection variable: ' + connectionVariable);\n\n      if(index >= 0) {\n\n          console.log(JSON.stringify(graph.edges));\n\n          graph.edges[index].handleText = connectionVariable;\n          this.setState({graph: graph});\n      }\n\n      this.onAddCellOrConnectCells();\n    }\n\n  /*\n   * Render\n   */\n  render() {\n    const { nodes, edges } = this.state.graph;\n    const selected = this.state.selected;\n    const { NodeTypes, NodeSubtypes, EdgeTypes } = GraphConfig;\n\n    return (\n      <div id=\"graph\">\n        <GraphView\n\n            className={\"graphView\"}\n          ref={(el) => (this.GraphView = el)}\n          nodeKey={NODE_KEY}\n          nodes={nodes}\n          edges={edges}\n          selected={selected}\n          nodeTypes={NodeTypes}\n          nodeSubtypes={NodeSubtypes}\n          edgeTypes={EdgeTypes}\n          onSelectNode={this.onSelectNode}\n          onCreateNode={this.onCreateNode}\n          onUpdateNode={this.onUpdateNode}\n          onDeleteNode={this.onDeleteNode}\n          onSelectEdge={this.onSelectEdge}\n          onCreateEdge={this.onCreateEdge}\n          onSwapEdge={this.onSwapEdge}\n          onDeleteEdge={this.onDeleteEdge}\n          onUndo={this.onUndo}\n          onCopySelected={this.onCopySelected.bind(this)}\n          onPasteSelected={this.onPasteSelected.bind(this)}\n          layoutEngineType={this.state.layoutEngineType}\n            service={this.service}\n        />\n\n          <Modal isOpen={this.state.connectModal} toggle={this.toggle} >\n             <ConnectForm toggle={this.toggle} sourceCell={this.srcCell} destCell={this.destCell} onConnectCells={this.onConnectCells.bind(this)}/>\n          </Modal>\n      </div>\n    );\n  }\n}\n\n\n","import React from 'react'\nimport './OutputCellsList.css'\nimport {Close} from 'grommet-icons'\nimport { ListGroup, ListGroupItem, ListGroupItemHeading, ListGroupItemText } from 'reactstrap';\n\nexport default class OutputCellsList extends React.Component {\n\n    render() {\n        const outputCells = this.props.outputCells;\n\n        return (\n            <ListGroup className={\"listGroup\"} flush>\n                {outputCells.map(outputCell => (\n                    <ListGroupItem key={outputCell.instance.id} className={\"outputCell\"}>\n                       <div className={\"removeButton\"}>\n                        <Close/>\n                       </div>\n                        <ListGroupItemHeading className={\"outputCellHeader\"}>\n                            {outputCell.instance.cellType.name}\n\n                        </ListGroupItemHeading>\n                        {/*<ListGroupItemText></ListGroupItemText>*/}\n                        <small>{outputCell.instance.id}</small>\n                    </ListGroupItem>\n                    )\n                )\n                }\n            </ListGroup>\n        );\n    }\n}","import fetch from 'isomorphic-fetch'\nimport RetinaXService from \"./RetinaXService\";\nexport default class SimulateNetworkService extends RetinaXService{\n\n    isNetworkStructureValid(){\n        let url = this.baseUrl + \"/simulate/isNetworkValid/\";\n\n        return fetch(url, {\n            method: 'GET',\n            headers: this.headers\n        }).then(response => {\n            console.log(response);\n            return response.json();\n        }).then(body =>{\n            console.log(body);\n            return body;\n        }).catch((reason => alert(reason)));\n    }\n\n    simulateNetwork(outputCells, userInput, maxTime){\n        let url = this.baseUrl + \"/simulate\";\n\n        let headers = this.headers;\n        console.log(url);\n\n        return fetch(url, {\n            method:'POST',\n            body: JSON.stringify({\n                outputCells: outputCells,\n                userInput: userInput,\n                maxTime: maxTime\n            }),\n            headers: headers\n        }).then(response => {\n            console.log(response);\n            return response.json();\n        }).then(body => {\n            console.log(body);\n            return body;\n        }).catch((reason => alert(reason)));\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport StepContent from '@material-ui/core/StepContent';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport { CSVLink, CSVDownload } from \"react-csv\";\nimport Papa from 'papaparse';\n\nimport './VerticalLinearStepper.css'\n\nimport OutputCellsList from \"../OutputCellsList/OutputCellsList\";\nimport {SELECTING_OUTPUT_CELLS, SHOWING_RESULTS, UPLOADING_INPUT_FILE} from \"../../NetworkBuilderUI/NetworkBuilder\";\nimport SimulateNetworkService from \"../../../services/SimulateNetworkService\";\nimport CellInstanceService from \"../../../services/CellInstanceService\";\n\n\nconst styles = theme => ({\n    root: {\n        width: '90%',\n    },\n    button: {\n        marginTop: theme.spacing.unit,\n        marginRight: theme.spacing.unit,\n    },\n    actionsContainer: {\n        marginBottom: theme.spacing.unit * 2,\n    },\n    resetContainer: {\n        padding: theme.spacing.unit * 3,\n    },\n});\n\nfunction getSteps() {\n    return ['Select Output Cells', 'Download Input Data File Format', 'Upload Filled Input File'];\n}\n\nclass VerticalLinearStepper extends React.Component {\n\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            csvHeaders: null\n        }\n    }\n\n    componentDidMount(){\n        let service = new CellInstanceService();\n        service.getInputCells().then(inputCells => {\n            const csvHeaders = inputCells.map(inputCell => \"\" + inputCell.id);\n            this.setState({csvHeaders})\n        });\n\n    }\n\n    transpose(array){\n        return array[0].map((col, i) => array.map(row => row[i]));\n    }\n\n    handleFileUpload(file){\n        let fileReader = new FileReader();\n\n        fileReader.onloadend = () => {\n            let content = fileReader.result;\n            let result = Papa.parse(content);\n\n\n            if(result.errors.length !== 0){\n                alert(result.errors.map(err => \"Message:  \" + err.message  + \"\\nRow:  \" + err.row));\n            }\n            else{\n                this.inputData = this.transpose(result.data);\n            }\n\n        };\n\n        fileReader.readAsText(file);\n    }\n\n    getSelectingOutputCellsView(){\n        const outputCells = this.props.outputCells;\n        return (\n            <div>\n                <Typography>Click on the cells that you want to see their calculations output over time.</Typography>\n                <OutputCellsList outputCells={outputCells}/>\n            </div>);\n    }\n\n    getUploadingInputFileView(){\n        return (\n            <div>\n                <Typography>Download the following file and fill it with your data:</Typography>\n                <CSVLink filename={\"RetinaX_Input_File.csv\"} data={[this.state.csvHeaders]}>Click Here</CSVLink>\n            </div>\n        );\n    }\n\n    getShowingResultsView(){\n        return (\n            <div>\n                <Typography>Upload your input data file here:</Typography>\n                <input type={\"file\"}\n                       accept={\".csv\"}\n                       style={{fontSize: \"15px\"}}\n                       onChange={(event) => this.handleFileUpload(event.target.files[0])}\n                />\n            </div>\n        );\n    }\n    getStepContent(step) {\n        switch (step) {\n            case SELECTING_OUTPUT_CELLS:\n                return this.getSelectingOutputCellsView();\n\n            case UPLOADING_INPUT_FILE:\n                return this.getUploadingInputFileView();\n\n            case SHOWING_RESULTS:\n                return this.getShowingResultsView();\n\n            default:\n                return 'Unknown step';\n        }\n    }\n\n    simulateNetwork(){\n        let service = new SimulateNetworkService();\n        let outputInstances = this.props.outputCells.map(outputCell => outputCell.instance);\n        let userInput = {};\n\n\n        this.inputData.forEach(row => {\n            userInput[row[0]] =  row.slice(1, row.length);\n        });\n\n        let maxTime = this.inputData[0].length - 1;\n        service.simulateNetwork(outputInstances, userInput, maxTime)\n            .then(results => {\n                // alert(\"RESULTS:\\n\" + JSON.stringify(results));\n\n\n                this.props.onResultsArrived(results, maxTime);\n            });\n    }\n\n    render() {\n        const { classes, activeStep, handleBack, handleNext, handleReset} = this.props;\n        const steps = getSteps();\n\n        return (\n            <div className={classes.root + \" stepper-container\"}>\n                <h2 className={\"pickerTitle\"}>Simulation</h2>\n\n                <Stepper className={\"stepper\"} activeStep={activeStep} orientation=\"vertical\">\n                    {steps.map((label, index) => (\n                        <Step key={label}>\n                            <StepLabel>{label}</StepLabel>\n                            <StepContent>\n                                {this.getStepContent(index)}\n                                <div className={classes.actionsContainer}>\n                                    <div>\n                                        <Button\n                                            disabled={activeStep === 0}\n                                            onClick={handleBack}\n                                            className={classes.button}\n                                        >\n                                            Back\n                                        </Button>\n                                        <Button\n                                            variant=\"contained\"\n                                            onClick={() =>{\n                                                 if(activeStep === SHOWING_RESULTS) {\n                                                    console.log(\"simulateNetwork()\");\n                                                    this.simulateNetwork();\n                                                }\n                                                console.log(\"next()\");\n                                                handleNext();\n                                            }}\n                                            color={\"primary\"}\n                                            className={\"stepperButton\"}\n                                            disabled={this.props.outputCells.length === 0}\n                                        >\n                                            {activeStep === steps.length - 1 ? 'Simulate' : 'Next'}\n                                        </Button>\n                                    </div>\n                                </div>\n                            </StepContent>\n                        </Step>\n                    ))}\n                </Stepper>\n                {activeStep === steps.length && (\n                    <Paper square elevation={0} className={classes.resetContainer}>\n                        <Typography>All steps completed - you&apos;re finished</Typography>\n                        <Button onClick={handleReset} className={classes.button}>\n                            Reset\n                        </Button>\n                    </Paper>\n                )}\n\n            </div>\n        );\n    }\n}\n\nVerticalLinearStepper.propTypes = {\n    classes: PropTypes.object,\n};\n\nexport default withStyles(styles)(VerticalLinearStepper);","// import { Table } from 'reactstrap';\nimport { Table } from 'antd';\n\nimport React from 'react'\nimport \"antd/dist/antd.css\";\n\nexport default class ResultsTable extends React.Component{\n\n    render() {\n        const {outputCells, outputResults, maxTime} = this.props;\n\n        let ids =[{title: \"t\", dataIndex: \"t\", fixed: 'left', width: 60}];\n        outputCells.forEach(outputCell => ids.push({\n            title: outputCell.id + \" (\" + outputCell.instance.cellType.name +\")\",\n            dataIndex: outputCell.id.toString(),\n            width: 200,\n            key: outputCell.id\n        }));\n\n        let tableContent = [];\n        for (let i = 0; i < maxTime; i++) {\n            let timePoint = {};\n            ids.forEach(id => {\n                if(id.dataIndex == \"t\"){\n                    timePoint[id.dataIndex] = i;\n                }else {\n                    timePoint[id.dataIndex] = outputResults[id.dataIndex][i].value;\n                }\n                timePoint.key = i ;\n            });\n            tableContent.push(timePoint);\n        }\n        return (\n            <div>\n                <Table columns={ids} dataSource={tableContent} bordered={true} size={\"middle\"} useFixedHeader={true} pagination={{ pageSize: 10 }} scroll={{ y: 240, x:500}}/>\n            </div>\n        )\n    }\n}\n\n","import React from 'react'\nimport {Modal, ModalBody, ModalFooter, ModalHeader} from 'reactstrap'\nimport ResultsTable from \"../ResultsTable/ResultsTable\";\nimport './ResultsModal.css'\nimport {CSVLink} from \"react-csv\";\n\nexport default class ResultsModal extends React.Component {\n\n    render() {\n        const {isOpen, toggle, outputCells, outputResults, maxTime} = this.props;\n\n        let headers = outputCells.map(outputCell => outputCell.id);\n        let tableContent = [];\n         for (let i = 0; i < maxTime; i++) {\n             let row = [];\n             headers.forEach(id => {\n                 console.log(\"outputResults: \" + JSON.stringify(outputResults));\n                 row.push(outputResults[id.toString()][i].value);\n             });\n             tableContent.push(row);\n         }\n        return (\n            <Modal  className={\"resultsModal\"} isOpen={isOpen} toggle={toggle}>\n                <ModalHeader className={\"resultsModal\"}>Results:</ModalHeader>\n                <ModalBody className={\"resultsModal\"}>\n                    <ResultsTable outputCells={outputCells}\n                                         outputResults={outputResults}\n                                         maxTime={maxTime}/>\n                </ModalBody>\n                <ModalFooter className={\"resultsModal\"}>\n                    <CSVLink className={\"btn btn-success\"} filename={\"RetinaX_Results_File.csv\"} headers={headers} data={tableContent}>\n                        <img src={\"/images/csv.svg\"}/>\n                        &nbsp;\n                        Download as CSV</CSVLink>\n                </ModalFooter>\n            </Modal>\n        );\n    }\n}","import React, { Component } from 'react';\nimport './NetworkBuilder.css'\n\nimport CellTypePicker from \"./CellTypePicker/CellTypePicker\";\nimport Graph from \"./UberGraphView/fromUberGit/graph.js\";\nimport {EMPTY_TYPE, SPECIAL_TYPE} from \"./UberGraphView/fromUberGit/graph-config\";\nimport VerticalLinearStepper from \"../SimulationUI/Stepper/VerticalLinearStepper\";\nimport ResultsModal from \"../SimulationUI/ResultsModal/ResultsModal\";\nimport {Alert} from \"reactstrap\";\nimport SimulateNetworkService from \"../../services/SimulateNetworkService\";\n\nexport const NONE = -1, SELECTING_OUTPUT_CELLS = 0, UPLOADING_INPUT_FILE = 1, SHOWING_RESULTS = 2;\n\nclass NetworkBuilder extends Component{\n\n    constructor(){\n        super();\n        this.state = {\n            selectedType: null,\n            simulationMode: false,\n            selectedOutputCells: [],\n            activeStep: NONE,\n            showResults: false,\n            outputResults:null,\n            maxTime:null,\n            networkIsValid: false\n        };\n\n        this.simulateService = new SimulateNetworkService();\n\n    }\n\n    setSelectedCellType(cellType){\n        let viewCellType = cellType;\n        if(cellType.transformType !== 'INPUT_TO_ANALOG'){\n            viewCellType.view = EMPTY_TYPE;\n        }else{\n            viewCellType.view = SPECIAL_TYPE;\n        }\n\n        this.setState({selectedType: viewCellType});\n    }\n\n    onSimulateNetworkClicked(){\n        this.setState({simulationMode: !this.state.simulationMode, activeStep:   SELECTING_OUTPUT_CELLS});\n    }\n\n    onOutputCellSelected(outputCell){\n        let selectedOutputCells = this.state.selectedOutputCells;\n        if(selectedOutputCells.filter(cell => cell.instance.id === outputCell.instance.id).length === 0) {\n            selectedOutputCells.push(outputCell);\n            this.setState({selectedOutputCells});\n        }\n    }\n\n    handleNext = () => {\n\n        this.setState(state => ({\n            activeStep: state.activeStep + 1,\n        }));\n    };\n\n    handleBack = () => {\n        this.setState(state => ({\n            activeStep: state.activeStep - 1,\n        }));\n    };\n\n    handleReset = () => {\n        this.setState({\n            activeStep: 0,\n        });\n    };\n\n    toggleShowResults(){\n        this.setState({\n            showResults: !this.state.showResults\n        });\n    }\n\n    onResultsArrived(outputResults, maxTime){\n        this.setState({outputResults:outputResults.cellsResults, maxTime:maxTime, showResults: true});\n    }\n\n    componentDidMount(){\n        this.refreshNetworkValidation();\n    }\n\n    refreshNetworkValidation(){\n        this.simulateService.isNetworkStructureValid().then(response => {\n            this.setState({networkIsValid: Boolean(response.value)});\n        });\n    }\n\n    render(){\n        let buttonText = this.state.simulationMode ?  \"\" : \"Simulate Network\";\n\n        let sideComponent = !this.state.simulationMode ?\n            <CellTypePicker className={\"picker\"} setSelectedType={this.setSelectedCellType.bind(this)}/>\n            : <VerticalLinearStepper\n                className={\"picker\"}\n                activeStep={this.state.activeStep}\n                handleNext={this.handleNext.bind(this)}\n                handleBack={this.handleBack.bind(this)}\n                handleReset={this.handleReset.bind(this)}\n                outputCells={this.state.selectedOutputCells}\n                onResultsArrived={this.onResultsArrived.bind(this)}\n            />;\n\n        let topView;\n        if(this.state.networkIsValid){\n             topView = (<span>\n                    <button className={\"simulateNetworkButton btn btn-secondary\"} hidden={this.state.simulationMode} onClick={this.onSimulateNetworkClicked.bind(this)}>\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"7\" height=\"8\" viewBox=\"0 0 7 8\"\n                             className=\"primary\">\n                            <polygon fill=\"#FFFFFF\" fillRule=\"evenodd\" points=\"13 10 13 18 20 14\"\n                                     transform=\"translate(-13 -10)\"/>\n                        </svg> &nbsp;{buttonText}&nbsp;\n                    </button>\n\n                {this.state.simulationMode &&\n                <button className={\"simulateNetworkButton btn btn-secondary\"}\n                        onClick={() => this.setState({simulationMode:false})}> Cancel </button>}\n                </span>);\n        }else{\n            topView =  (<Alert color=\"warning\">\n                The current network structure is not yet valid for simulation\n            </Alert>)\n        }\n\n        return (\n            <div className={\"networkBuilder\"}>\n                {topView}\n\n                <div className={\"networkBuilderBody\"}>\n                        {sideComponent}\n                        <Graph className={\"graphView\"}\n                               selectedType={this.state.selectedType}\n                               simulationMode={this.state.simulationMode}\n                               simulationStep={this.state.activeStep}\n                               onOutputCellSelected={this.onOutputCellSelected.bind(this)}\n                               onAddCellOrConnectCells={this.refreshNetworkValidation.bind(this)}\n                        />\n                </div>\n\n\n\n                <ResultsModal toggle={this.toggleShowResults.bind(this)}\n                              isOpen={this.state.showResults}\n                              outputCells={this.state.selectedOutputCells}\n                              outputResults={this.state.outputResults}\n                              maxTime={this.state.maxTime}/>\n\n\n            </div>\n        );\n    }\n}\n\nexport default NetworkBuilder;","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Home from \"../Components/Home/Home\";\nimport NetworkBuilder from \"../Components/NetworkBuilderUI/NetworkBuilder\";\nimport {CreateCellTypeForm} from \"../Components/CellTypeCreatorUI/CreateCellTypeForm\";\n\nexport default () =>\n    <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/networkBuilder\" component={NetworkBuilder} />\n        <Route exact path=\"/createCellType\" component={CreateCellTypeForm}/>\n    </Switch>;","import React, { Component } from 'react';\nimport {HashRouter} from 'react-router-dom';\nimport NavRoutes from '../Routes/NavRoutes';\nimport { NavbarBrand, Navbar, Nav, NavItem, NavLink } from 'reactstrap';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n        <HashRouter basename=\"retinax\">\n\n      <div className=\"App\">\n              <div>\n                  <Navbar className={\"Nav\"}  expand=\"md\">\n                      <NavbarBrand href=\"/\" className={\"homeButton\"}>\n                          <h1 className={\"homeButton\"}>\n                              <span className={\"retina\"}>Retina</span>\n                              <span className={\"x\"}>X</span>\n                          </h1>\n                      </NavbarBrand>\n                      <Nav className=\"ml-auto\" navbar>\n                          {/*<NavItem>*/}\n                              {/*<NavLink className={\"navLink\"} href=\"/networkBuilder\">Build Network</NavLink>*/}\n                          {/*</NavItem>*/}\n                          {/*<NavItem>*/}\n                              {/*<NavLink className={\"navLink\"} href=\"/createCellType\">Login</NavLink>*/}\n                          {/*</NavItem>*/}\n                          {/*<NavItem>*/}\n                              {/*<NavLink className={\"navLink\"} href=\"/connectCells\">Register</NavLink>*/}\n                          {/*</NavItem>*/}\n                      </Nav>\n                  </Navbar>\n                  <NavRoutes/>\n              </div>\n        </div>\n\n        </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}